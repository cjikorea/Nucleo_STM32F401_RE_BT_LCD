

/**
  ******************************************************************************
  * @file    bluenrg1_gatt_aci.h
  * @author  AMG - RF Application team
  * @version V1.0.0
  * @date    20 February 2020
  * @brief   Header file for external uC - BlueNRG-x in network coprocessor mode (gatt_aci)
  *          Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT STMicroelectronics</center></h2>
  ******************************************************************************
  */
#ifndef _BLUENRG1_GATT_ACI_H_
#define _BLUENRG1_GATT_ACI_H_

#include "bluenrg1_types.h"

//ADD
#include "bluenrg1_gatt_server.h"

/** @addtogroup Middlewares
 *  @{
 */

/** @defgroup ST
 *  @{
 */
 
/** @defgroup SimpleBlueNRG_HCI
 *  @{
 */
 
/**
 *@addtogroup GATT GATT
 *@brief GATT layer.
 *@{
 */

/**
 *@defgroup GATT_Functions GATT functions
 *@brief API for GATT layer.
 *@{
 */

/** Documentation for C union Service_UUID_t */
typedef union Service_UUID_t_s {
  /** 16-bit UUID
   */
  uint16_t Service_UUID_16;
  /** 128-bit UUID
   */
  uint8_t Service_UUID_128[16];
} Service_UUID_t;
/** Documentation for C union Include_UUID_t */
typedef union Include_UUID_t_s {
  /** 16-bit UUID
   */
  uint16_t Include_UUID_16;
  /** 128-bit UUID
   */
  uint8_t Include_UUID_128[16];
} Include_UUID_t;
/** Documentation for C union Char_UUID_t */
typedef union Char_UUID_t_s {
  /** 16-bit UUID
   */
  uint16_t Char_UUID_16;
  /** 128-bit UUID
   */
  uint8_t Char_UUID_128[16];
} Char_UUID_t;
/** Documentation for C union Char_Desc_Uuid_t */
typedef union Char_Desc_Uuid_t_s {
  /** 16-bit UUID
   */
  uint16_t Char_UUID_16;
  /** 128-bit UUID
   */
  uint8_t Char_UUID_128[16];
} Char_Desc_Uuid_t;
/** Documentation for C union UUID_t */
typedef union UUID_t_s {
  /** 16-bit UUID
   */
  uint16_t UUID_16;
  /** 128-bit UUID
   */
  uint8_t UUID_128[16];
} UUID_t;
/** Documentation for C struct Handle_Entry_t */
typedef struct Handle_Entry_t_s {
  /** The handles for which the attribute value has to be read
   *  Values:
   *  - 0x0001 ... 0xFFFF
   */
  uint16_t Handle;
} Handle_Entry_t;
/**
 * @brief Initialize the GATT layer for server and client roles.  It adds also
 *        the GATT service with Service Changed Characteristic.  Until this
 *        command is issued the GATT channel will not process any commands even
 *        if the  connection is opened. This command has to be given before
 *        using any of the GAP features.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_init(void);
/**
 * @brief Add a service to GATT Server. When a service is created in the server,
 *        the host needs to reserve the handle ranges for this service using
 *        Max_Attribute_Records parameter. This parameter specifies the maximum
 *        number of attribute records that can be added to this service
 *        (including the service attribute, include attribute, characteristic
 *        attribute, characteristic value attribute and characteristic
 *        descriptor attribute). Handle of the created service is returned in
 *        command complete event. Service declaration is taken from the service
 *        pool.  The attributes for characteristics and descriptors are
 *        allocated from the attribute pool.
 * @param Service_UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param Service_UUID See @ref Service_UUID_t
 * @param Service_Type Service type.
 *        Values:
 *        - 0x01: Primary Service
 *        - 0x02: Secondary Service
 * @param Max_Attribute_Records Maximum number of attribute records that can be
 *        added to this service
 * @param[out] Service_Handle Handle of the Service. When this service is added,
 *             a handle is allocated by the server for this service.  Server
 *             also allocates a range of handles for this service from
 *             serviceHandle to <serviceHandle + max_attr_records - 1>
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle);
/**
 * @brief Include a service given by Include_Start_Handle and Include_End_Handle
 *        to another  service given by Service_Handle. Attribute server creates
 *        an INCLUDE definition  attribute and return the handle of this
 *        attribute in Included_handle.
 * @param Service_Handle Handle of the Service to which another service has to
 *        be included.
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Include_Start_Handle Attribute Handle of the Service which has to be
 *        included in service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Include_End_Handle End Handle of the Service which has to be included
 *        in service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Include_UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param Include_UUID See @ref Include_UUID_t
 * @param[out] Include_Handle Handle of the include declaration
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_include_service(uint16_t Service_Handle,
                                    uint16_t Include_Start_Handle,
                                    uint16_t Include_End_Handle,
                                    uint8_t Include_UUID_Type,
                                    Include_UUID_t *Include_UUID,
                                    uint16_t *Include_Handle);
/**
 * @brief Add a characteristic to a service.
 * @param Service_Handle Handle of the Service to which the characteristic will
 *        be added
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param Char_UUID See @ref Char_UUID_t
 * @param Char_Value_Length Maximum length of the characteristic value.
 *        Values:
 *        - 0 ... 512
 * @param Char_Properties Characteristic Properties (Volume 3, Part G, section
 *        3.3.1.1 of Bluetooth Specification 4.1)
 *        Flags:
 *        - 0x00: CHAR_PROP_NONE
 *        - 0x01: CHAR_PROP_BROADCAST (Broadcast)
 *        - 0x02: CHAR_PROP_READ (Read)
 *        - 0x04: CHAR_PROP_WRITE_WITHOUT_RESP (Write w/o resp)
 *        - 0x08: CHAR_PROP_WRITE (Write)
 *        - 0x10: CHAR_PROP_NOTIFY (Notify)
 *        - 0x20: CHAR_PROP_INDICATE (Indicate)
 *        - 0x40: CHAR_PROP_SIGNED_WRITE (Authenticated Signed Writes)
 *        - 0x80: CHAR_PROP_EXT (Extended Properties)
 * @param Security_Permissions Security permission flags.
 *        Flags:
 *        - 0x00: None
 *        - 0x01: AUTHEN_READ (Need authentication to read)
 *        - 0x02: AUTHOR_READ (Need authorization to read)
 *        - 0x04: ENCRY_READ (Need encryption to read)
 *        - 0x08: AUTHEN_WRITE (need authentication to write)
 *        - 0x10: AUTHOR_WRITE (need authorization to write)
 *        - 0x20: ENCRY_WRITE (need encryption to write)
 * @param GATT_Evt_Mask GATT event mask.
 *        Flags:
 *        - 0x00: GATT_DONT_NOTIFY_EVENTS
 *        - 0x01: GATT_NOTIFY_ATTRIBUTE_WRITE
 *        - 0x02: GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP
 *        - 0x04: GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP
 * @param Enc_Key_Size Minimum encryption key size required to read the
 *        characteristic.
 *        Values:
 *        - 0x07 ... 0x10
 * @param Is_Variable Specify if the characteristic value has a fixed length or
 *        a variable length.
 *        Values:
 *        - 0x00: Fixed length
 *        - 0x01: Variable length
 * @param[out] Char_Handle Handle of the Characteristic that has been added.  It
 *             is the handle of the characteristic declaration.  The attribute
 *             that holds the characteristic value is allocated at the next
 *             handle,  followed by the Client Characteristic Configuration
 *             descriptor if the characteristic  has CHAR_PROP_NOTIFY or
 *             CHAR_PROP_INDICATE properties.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_add_char(uint16_t Service_Handle,
                             uint8_t Char_UUID_Type,
                             Char_UUID_t *Char_UUID,
                             uint16_t Char_Value_Length,
                             uint8_t Char_Properties,
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle);
/**
 * @brief Add a characteristic descriptor to a service.
 * @param Service_Handle Handle of service to which the characteristic belongs
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Handle Handle of the characteristic to which description has to
 *        be added
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Desc_Uuid_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param Char_Desc_Uuid See @ref Char_Desc_Uuid_t
 * @param Char_Desc_Value_Max_Len The maximum length of the descriptor value
 *        Values:
 *        - 0 ... 512
 * @param Char_Desc_Value_Length Current Length of the characteristic descriptor
 *        value
 *        Values:
 *        - 0 ... 512
 * @param Char_Desc_Value Value of the characteristic description
 * @param Security_Permissions Security permission flags.
 *        Flags:
 *        - 0x00: None
 *        - 0x01: AUTHEN_READ (Need authentication to read)
 *        - 0x02: AUTHOR_READ (Need authorization to read)
 *        - 0x04: ENCRY_READ (Need encryption to read)
 *        - 0x08: AUTHEN_WRITE (need authentication to write)
 *        - 0x10: AUTHOR_WRITE (need authorization to write)
 *        - 0x20: ENCRY_WRITE (need encryption to write)
 * @param Access_Permissions Access permission
 *        Flags:
 *        - 0x00: None
 *        - 0x01: READ
 *        - 0x02: WRITE
 *        - 0x04: WRITE_WO_RESP
 *        - 0x08: SIGNED_WRITE
 * @param GATT_Evt_Mask GATT event mask.
 *        Flags:
 *        - 0x00: GATT_DONT_NOTIFY_EVENTS
 *        - 0x01: GATT_NOTIFY_ATTRIBUTE_WRITE
 *        - 0x02: GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP
 *        - 0x04: GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP
 * @param Enc_Key_Size Minimum encryption key size required to read the
 *        characteristic.
 *        Values:
 *        - 0x07 ... 0x10
 * @param Is_Variable Specify if the characteristic value has a fixed length or
 *        a variable length.
 *        Values:
 *        - 0x00: Fixed length
 *        - 0x01: Variable length
 * @param[out] Char_Desc_Handle Handle of the characteristic descriptor
 *             Values:
 *             - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_add_char_desc(uint16_t Service_Handle,
                                  uint16_t Char_Handle,
                                  uint8_t Char_Desc_Uuid_Type,
                                  Char_Desc_Uuid_t *Char_Desc_Uuid,
                                  uint8_t Char_Desc_Value_Max_Len,
                                  uint8_t Char_Desc_Value_Length,
                                  uint8_t Char_Desc_Value[],
                                  uint8_t Security_Permissions,
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle);
/**
 * @brief Update a characteristic value in a service.  If notifications (or
 *        indications) are enabled on that characteristic,  a notification (or
 *        indication) will be sent to the client after sending  this command to
 *        the BlueNRG. The command is queued into the BlueNRG command queue.  If
 *        the buffer is full, because previous commands could not be still
 *        processed, the function will return BLE_STATUS_INSUFFICIENT_RESOURCES.
 *        This will happen  if notifications (or indications) are enabled and
 *        the application calls  @ref aci_gatt_update_char_value at an higher
 *        rate than what is allowed by the link.  Throughput on BLE link depends
 *        on connection interval and connection length  parameters (decided by
 *        the master, see aci_l2cap_connection_parameter_update_request()  for
 *        more info on how to suggest new connection parameters from a slave).
 *        If the  application does not want to lose notifications because
 *        BlueNRG buffer becomes full,  it has to retry again till the function
 *        returns BLE_STATUS_SUCCESS or any other error code. DEPRECATED API
 *        (still supported but not recommended)
 * @param Service_Handle Handle of service to which the characteristic belongs
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Handle Handle of the characteristic
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset The offset from which the attribute value has to be
 *        updated.  If this is set to 0 and the attribute value is of variable
 *        length, then the length of the attribute will be set to the
 *        Char_Value_Length.  If the Val_Offset is set to a value greater than
 *        0, then the length of the attribute will be set to the maximum length
 *        as  specified for the attribute while adding the characteristic.
 *        Values:
 *        - 0 ... 511
 * @param Char_Value_Length Length of the characteristic value in octets
 * @param Char_Value Characteristic value
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[]);
/**
 * @brief Delete the specified characteristic from the service.
 * @param Serv_Handle Handle of service to which the characteristic belongs
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Handle Handle of the characteristic which has to be deleted
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_del_char(uint16_t Serv_Handle,
                             uint16_t Char_Handle);
/**
 * @brief Delete the specified service from the GATT server database.
 * @param Serv_Handle Handle of the service to be deleted
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_del_service(uint16_t Serv_Handle);
/**
 * @brief Delete the Include definition from the service.
 * @param Serv_Handle Handle of the service to which the include service belongs
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Include_Handle Handle of the included service which has to be deleted
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_del_include_service(uint16_t Serv_Handle,
                                        uint16_t Include_Handle);
/**
 * @brief Mask events from the GATT. The default configuration is all the events
 *        masked.
 * @param GATT_Evt_Mask GATT/ATT event mask.
 *        Values:
 *        - 0x00000001: ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
 *        - 0x00000002: ACI_GATT_PROC_TIMEOUT_EVENT
 *        - 0x00000004: ACI_ATT_EXCHANGE_MTU_RESP_EVENT
 *        - 0x00000008: ACI_ATT_FIND_INFO_RESP_EVENT
 *        - 0x00000010: ACI_ATT_FIND_BY_TYPE_VALUE_RESP_EVENT
 *        - 0x00000020: ACI_ATT_READ_BY_TYPE_RESP_EVENT
 *        - 0x00000040: ACI_ATT_READ_RESP_EVENT
 *        - 0x00000080: ACI_ATT_READ_BLOB_RESP_EVENT
 *        - 0x00000100: ACI_ATT_READ_MULTIPLE_RESP_EVENT
 *        - 0x00000200: ACI_ATT_READ_BY_GROUP_TYPE_RESP_EVENT
 *        - 0x00000800: ACI_ATT_PREPARE_WRITE_RESP_EVENT
 *        - 0x00001000: ACI_ATT_EXEC_WRITE_RESP_EVENT
 *        - 0x00002000: ACI_GATT_INDICATION_EVENT
 *        - 0x00004000: ACI_GATT_NOTIFICATION_EVENT
 *        - 0x00008000: ACI_GATT_ERROR_RESP_EVENT
 *        - 0x00010000: ACI_GATT_PROC_COMPLETE_EVENT
 *        - 0x00020000: ACI_GATT_DISC_READ_CHAR_BY_UUID_RESP_EVENT
 *        - 0x00040000: ACI_GATT_TX_POOL_AVAILABLE_EVENT
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_set_event_mask(uint32_t GATT_Evt_Mask);
/**
 * @brief Perform an ATT MTU exchange procedure. When the ATT MTU exchange
 *        procedure is completed, a @ref aci_att_exchange_mtu_resp_event event
 *        is generated. A @ref aci_gatt_proc_complete_event event is also
 *        generated to indicate the end of the procedure.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle);
/**
 * @brief Send a Find Information Request. This command is used to obtain the
 *        mapping of attribute handles with their associated types. The
 *        responses of the procedure are given through the  @ref
 *        aci_att_find_info_resp_event event. The end of the procedure is
 *        indicated by a @ref aci_gatt_proc_complete_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle First requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle Last requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_att_find_info_req(uint16_t Connection_Handle,
                                 uint16_t Start_Handle,
                                 uint16_t End_Handle);
/**
 * @brief Send a Find By Type Value Request The Find By Type Value Request is
 *        used to obtain the handles of attributes that have a given 16-bit UUID
 *        attribute type and a given attribute value. The responses of the
 *        procedure are given through the @ref
 *        aci_att_find_by_type_value_resp_event event. The end of the procedure
 *        is indicated by a @ref aci_gatt_proc_complete_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle First requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle Last requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param UUID 2 octet UUID to find (little-endian)
 * @param Attribute_Val_Length Length of attribute value (maximum value is
 *        ATT_MTU - 7).
 * @param Attribute_Val Attribute value to find
 * @retval Value indicating success or error code.
 */
tBleStatus aci_att_find_by_type_value_req(uint16_t Connection_Handle,
                                          uint16_t Start_Handle,
                                          uint16_t End_Handle,
                                          uint16_t UUID,
                                          uint8_t Attribute_Val_Length,
                                          uint8_t Attribute_Val[]);
/**
 * @brief Send a Read By Type Request. The Read By Type Request is used to
 *        obtain the values of attributes where the attribute type is known but
 *        the handle is not known. The responses of the procedure are given
 *        through the @ref aci_att_read_by_type_resp_event event. The end of the
 *        procedure is indicated by a @ref aci_gatt_proc_complete_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle First requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle Last requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param UUID See @ref UUID_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_att_read_by_type_req(uint16_t Connection_Handle,
                                    uint16_t Start_Handle,
                                    uint16_t End_Handle,
                                    uint8_t UUID_Type,
                                    UUID_t *UUID);
/**
 * @brief Send a Read By Group Type Request.  The Read By Group Type Request is
 *        used to obtain the values of grouping attributes where the attribute
 *        type is known but the handle is not known. Grouping attributes are
 *        defined  at GATT layer. The grouping attribute types are: "Primary
 *        Service", "Secondary Service"  and "Characteristic".  The responses of
 *        the procedure are given through the @ref
 *        aci_att_read_by_group_type_resp_event event.  The end of the procedure
 *        is indicated by a @ref aci_gatt_proc_complete_event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle First requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle Last requested handle number
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param UUID See @ref UUID_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_att_read_by_group_type_req(uint16_t Connection_Handle,
                                          uint16_t Start_Handle,
                                          uint16_t End_Handle,
                                          uint8_t UUID_Type,
                                          UUID_t *UUID);
/**
 * @brief Send a Prepare Write Request. The Prepare Write Request is used to
 *        request the server to prepare to write the value of an attribute.  The
 *        responses of the procedure are given through the @ref
 *        aci_att_prepare_write_resp_event event.  The end of the procedure is
 *        indicated by a @ref aci_gatt_proc_complete_event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset The offset of the first octet to be written
 *        Values:
 *        - 0 ... 511
 * @param Attribute_Val_Length Length of attribute value (maximum value is
 *        ATT_MTU - 5).
 * @param Attribute_Val The value of the attribute to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_att_prepare_write_req(uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint16_t Val_Offset,
                                     uint8_t Attribute_Val_Length,
                                     uint8_t Attribute_Val[]);
/**
 * @brief Send an Execute Write Request. The Execute Write Request is used to
 *        request the server to write or cancel the write  of all the prepared
 *        values currently held in the prepare queue from this client.  The
 *        result of the procedure is given through the @ref
 *        aci_att_exec_write_resp_event event.  The end of the procedure is
 *        indicated by a @ref aci_gatt_proc_complete_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Execute Execute or cancel writes.
 *        Values:
 *        - 0x00: Cancel all prepared writes
 *        - 0x01: Immediately write all pending prepared values
 * @retval Value indicating success or error code.
 */
tBleStatus aci_att_execute_write_req(uint16_t Connection_Handle,
                                     uint8_t Execute);
/**
 * @brief Start the GATT client procedure to discover all primary services on
 *        the server. The responses of the procedure are given through the @ref
 *        aci_att_read_by_group_type_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle);
/**
 * @brief Start the procedure to discover the primary services of the specified
 *        UUID on the server. The responses of the procedure are given through
 *        the @ref aci_att_find_by_type_value_resp_event event. The end of the
 *        procedure is indicated by a @ref aci_gatt_proc_complete_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param UUID See @ref UUID_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_disc_primary_service_by_uuid(uint16_t Connection_Handle,
                                                 uint8_t UUID_Type,
                                                 UUID_t *UUID);
/**
 * @brief Start the procedure to find all included services. The responses of
 *        the procedure are given through the @ref
 *        aci_att_read_by_type_resp_event event. The end of the procedure is
 *        indicated by a @ref aci_gatt_proc_complete_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle Start attribute handle of the service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle End attribute handle of the service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_find_included_services(uint16_t Connection_Handle,
                                           uint16_t Start_Handle,
                                           uint16_t End_Handle);
/**
 * @brief Start the procedure to discover all the characteristics of a given
 *        service. When the procedure is completed, a @ref
 *        aci_gatt_proc_complete_event event is generated. Before procedure
 *        completion the response packets are given through @ref
 *        aci_att_read_by_type_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle Start attribute handle of the service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle End attribute handle of the service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle);
/**
 * @brief Start the procedure to discover all the characteristics specified by a
 *        UUID. When the procedure is completed, a @ref
 *        aci_gatt_proc_complete_event event is generated. Before procedure
 *        completion the response packets are given through @ref
 *        aci_gatt_disc_read_char_by_uuid_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle Start attribute handle of the service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle End attribute handle of the service
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param UUID See @ref UUID_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID);
/**
 * @brief Start the procedure to discover all characteristic descriptors on the
 *        server. When the procedure is completed, a @ref
 *        aci_gatt_proc_complete_event event is generated. Before procedure
 *        completion the response packets are given through @ref
 *        aci_att_find_info_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Char_Handle Handle of the characteristic value
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle End handle of the characteristic
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle);
/**
 * @brief Start the procedure to read the attribute value. When the procedure is
 *        completed, a @ref aci_gatt_proc_complete_event event is generated.
 *        Before procedure completion the response packet is given through @ref
 *        aci_att_read_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be read
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_char_value(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle);
/**
 * @brief Start the procedure to read all the characteristics specified by the
 *        UUID. When the procedure is completed, a @ref
 *        aci_gatt_proc_complete_event event is generated. Before procedure
 *        completion the response packets are given through @ref
 *        aci_gatt_disc_read_char_by_uuid_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Start_Handle Starting handle of the range to be searched
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param End_Handle End handle of the range to be searched
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param UUID_Type UUID type.
 *        Values:
 *        - 0x01: 16-bit UUID
 *        - 0x02: 128-bit UUID
 * @param UUID See @ref UUID_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_using_char_uuid(uint16_t Connection_Handle,
                                         uint16_t Start_Handle,
                                         uint16_t End_Handle,
                                         uint8_t UUID_Type,
                                         UUID_t *UUID);
/**
 * @brief Start the procedure to read a long characteristic value. the procedure
 *        is completed, a @ref aci_gatt_proc_complete_event event is generated.
 *        Before procedure completion the response packets are given through
 *        @ref aci_att_read_blob_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be read
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset Offset from which the value needs to be read
 *        Values:
 *        - 0 ... 511
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_long_char_value(uint16_t Connection_Handle,
                                         uint16_t Attr_Handle,
                                         uint16_t Val_Offset);
/**
 * @brief Start a procedure to read multiple characteristic values from a
 *        server. This sub-procedure is used to read multiple Characteristic
 *        Values from a server when the client knows the Characteristic Value
 *        Handles. When the procedure is completed, a @ref
 *        aci_gatt_proc_complete_event event is generated. Before procedure
 *        completion the response packets are given through @ref
 *        aci_att_read_multiple_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Number_of_Handles The number of handles for which the value has to be
 *        read. From 2 to (ATT_MTU-1)/2
 *        Values:
 *        - 0x02 ... 0xFF
 * @param Handle_Entry See @ref Handle_Entry_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_multiple_char_value(uint16_t Connection_Handle,
                                             uint8_t Number_of_Handles,
                                             Handle_Entry_t Handle_Entry[]);
/**
 * @brief Start the procedure to write a long characteristic value. When the
 *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
 *        generated. During the procedure, @ref aci_att_prepare_write_resp_event
 *        and @ref aci_att_exec_write_resp_event events are raised.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Attribute_Val_Length Length of the value to be written
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_char_value(uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     uint8_t Attribute_Val[]);
/**
 * @brief Start the procedure to write a long characteristic value. When the
 *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
 *        generated. During the procedure, @ref aci_att_prepare_write_resp_event
 *        and @ref aci_att_exec_write_resp_event events are raised.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset Offset at which the attribute has to be written
 *        Values:
 *        - 0 ... 511
 * @param Attribute_Val_Length Length of the value to be written
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_long_char_value(uint16_t Connection_Handle,
                                          uint16_t Attr_Handle,
                                          uint16_t Val_Offset,
                                          uint8_t Attribute_Val_Length,
                                          uint8_t Attribute_Val[]);
/**
 * @brief Start the procedure to write a characteristic reliably. When the
 *        procedure is completed, a  @ref aci_gatt_proc_complete_event event is
 *        generated. During the procedure, @ref aci_att_prepare_write_resp_event
 *        and @ref aci_att_exec_write_resp_event events are raised.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset Offset at which the attribute has to be written
 *        Values:
 *        - 0 ... 511
 * @param Attribute_Val_Length Length of the value to be written
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_char_reliable(uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint16_t Val_Offset,
                                        uint8_t Attribute_Val_Length,
                                        uint8_t Attribute_Val[]);
/**
 * @brief Start the procedure to write a long characteristic descriptor. When
 *        the procedure is completed, a @ref aci_gatt_proc_complete_event event
 *        is generated. During the procedure, @ref
 *        aci_att_prepare_write_resp_event and @ref
 *        aci_att_exec_write_resp_event events are raised.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset Offset at which the attribute has to be written
 *        Values:
 *        - 0 ... 511
 * @param Attribute_Val_Length Length of the value to be written
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_long_char_desc(uint16_t Connection_Handle,
                                         uint16_t Attr_Handle,
                                         uint16_t Val_Offset,
                                         uint8_t Attribute_Val_Length,
                                         uint8_t Attribute_Val[]);
/**
 * @brief Start the procedure to read a long characteristic value. When the
 *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
 *        generated. Before procedure completion the response packets are given
 *        through @ref aci_att_read_blob_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the characteristic descriptor
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset Offset from which the value needs to be read
 *        Values:
 *        - 0 ... 511
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_long_char_desc(uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint16_t Val_Offset);
/**
 * @brief Start the procedure to write a characteristic descriptor. When the
 *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
 *        generated.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Attribute_Val_Length Length of the value to be written
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[]);
/**
 * @brief Start the procedure to read the descriptor specified. When the
 *        procedure is completed, a @ref aci_gatt_proc_complete_event event is
 *        generated. Before procedure completion the response packet is given
 *        through @ref aci_att_read_resp_event event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the descriptor to be read
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_char_desc(uint16_t Connection_Handle,
                                   uint16_t Attr_Handle);
/**
 * @brief Start the procedure to write a characteristic value without waiting
 *        for any response from the server. No events are generated after this
 *        command is executed.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Attribute_Val_Length Length of the value to be written (maximum value
 *        is ATT_MTU - 3)
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[]);
/**
 * @brief Start a signed write without response from the server. The procedure
 *        is used to write a characteristic value with an authentication
 *        signature without waiting for any response from the server. It cannot
 *        be used when the link is encrypted.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute to be written
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Attribute_Val_Length Length of the value to be written (up to ATT_MTU
 *        - 13)
 * @param Attribute_Val Value to be written
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_signed_write_without_resp(uint16_t Connection_Handle,
                                              uint16_t Attr_Handle,
                                              uint8_t Attribute_Val_Length,
                                              uint8_t Attribute_Val[]);
/**
 * @brief Allow application to confirm indication. This command has to be sent
 *        when the application receives the event @ref
 *        aci_gatt_indication_event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_confirm_indication(uint16_t Connection_Handle);
/**
 * @brief Allow or reject a write request from a client. This command has to be
 *        sent by the application when it receives the @ref
 *        aci_gatt_write_permit_req_event. If the write can be allowed, then the
 *        status and error code has to be set to 0. If the write cannot be
 *        allowed, then the status has to be set to 1 and the error code has to
 *        be set to the error code that has to be passed to the client.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Attr_Handle Handle of the attribute that was passed in the event
 *        EVT_BLUE_GATT_WRITE_PERMIT_REQ
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Write_status If the value can be written or not.
 *        Values:
 *        - 0x00: The value can be written to the attribute specified by attr_handle
 *        - 0x01: The value cannot be written to the attribute specified by the attr_handle
 * @param Error_Code The error code that has to be passed to the client in case
 *        the write has to be rejected
 *        Values:
 *        - 0x80 ... 0x9F: Application Error
 *        - 0xE0 ... 0xFF: Profile Error
 * @param Attribute_Val_Length Length of the value to be written as passed in
 *        the event EVT_BLUE_GATT_WRITE_PERMIT_REQ
 * @param Attribute_Val Value as passed in the event
 *        EVT_BLUE_GATT_WRITE_PERMIT_REQ
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_write_resp(uint16_t Connection_Handle,
                               uint16_t Attr_Handle,
                               uint8_t Write_status,
                               uint8_t Error_Code,
                               uint8_t Attribute_Val_Length,
                               uint8_t Attribute_Val[]);
/**
 * @brief Allow the GATT server to send a response to a read request from a
 *        client. The application has to send this command when it receives the
 *        @ref aci_gatt_read_permit_req_event or @ref
 *        aci_gatt_read_multi_permit_req_event. This command indicates to the
 *        stack that the response can be sent to the client. So if the
 *        application wishes to update any of the attributes before they are
 *        read by the client, it has to update the characteristic values using
 *        the @ref aci_gatt_update_char_value and then give this command. The
 *        application should perform the required operations within 30 seconds.
 *        Otherwise the GATT procedure will be timeout.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle);
/**
 * @brief This command sets the security permission for the attribute handle
 *        specified. Currently the setting of security permission is allowed
 *        only for client configuration descriptor.
 * @param Serv_Handle Handle of the service which contains the attribute whose
 *        security permission has to be modified
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Attr_Handle Handle of the attribute whose security permission has to
 *        be modified
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Security_Permissions Security permission flags.
 *        Flags:
 *        - 0x00: None
 *        - 0x01: AUTHEN_READ (Need authentication to read)
 *        - 0x02: AUTHOR_READ (Need authorization to read)
 *        - 0x04: ENCRY_READ (Need encryption to read)
 *        - 0x08: AUTHEN_WRITE (need authentication to write)
 *        - 0x10: AUTHOR_WRITE (need authorization to write)
 *        - 0x20: ENCRY_WRITE (need encryption to write)
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_set_security_permission(uint16_t Serv_Handle,
                                            uint16_t Attr_Handle,
                                            uint8_t Security_Permissions);
/**
 * @brief This command sets the value of the descriptor specified by
 *        charDescHandle.
 * @param Serv_Handle Handle of the service which contains the characteristic
 *        descriptor
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Handle Handle of the characteristic which contains the descriptor
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Desc_Handle Handle of the descriptor whose value has to be set
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Val_Offset Offset from which the descriptor value has to be updated
 *        Values:
 *        - 0 ... 511
 * @param Char_Desc_Value_Length Length of the descriptor value.
 * @param Char_Desc_Value Descriptor value
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_set_desc_value(uint16_t Serv_Handle,
                                   uint16_t Char_Handle,
                                   uint16_t Char_Desc_Handle,
                                   uint16_t Val_Offset,
                                   uint8_t Char_Desc_Value_Length,
                                   uint8_t Char_Desc_Value[]);
/**
 * @brief Reads the value of the attribute handle specified from the local GATT
 *        database.
 * @param Attr_Handle Handle of the attribute to read
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Offset Offset from which the value needs to be read
 *        Values:
 *        - 0 ... 511
 * @param Value_Length_Requested Maximum number of octets to be returned as
 *        attribute value
 *        Values:
 *        - 0 ... 512
 * @param[out] Length Length of the attribute value
 * @param[out] Value_Length Length in octets of the Value parameter
 * @param[out] Value Attribute value
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_read_handle_value(uint16_t Attr_Handle,
                                      uint16_t Offset,
                                      uint16_t Value_Length_Requested,
                                      uint16_t *Length,
                                      uint16_t *Value_Length,
                                      uint8_t Value[]);
/**
 * @brief This command is a more flexible version of @ref
 *        aci_gatt_update_char_value                       to support update of
 *        long attribute up to 512 bytes and indicate selectively the generation
 *        of Indication/Notification.
 * @param Conn_Handle_To_Notify Connection handle to notify. Notify all
 *        subscribed clients if equal to 0x0000: DEPRECATED feature (still
 *        supported but not recommended).
 * @param Service_Handle Handle of service to which the characteristic belongs
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Char_Handle Handle of the characteristic
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Update_Type Allow Notification or Indication generation, if enabled in
 *        the client characteristic configuration descriptor. If bit 3 is set,
 *        standard BLE Link Layer retransmission mechanism for notifications
 *        PDUs si disabled: PDUs will be transmitted only once, even if they
 *        have not been acknowledged.
 *        Flags:
 *        - 0x00: GATT_LOCAL_UPDATE
 *        - 0x01: GATT_NOTIFICATION
 *        - 0x02: GATT_INDICATION
 *        - 0x04: GATT_DISABLE_RETRANSMISSIONS
 * @param Char_Length Total length of the characteristic value. In case of a
 *        variable size characteristic, this field specifies the new length of
 *        the characteristic value after the update; in case of fixed length
 *        characteristic this field is ignored.
 *        Values:
 *        - 0 ... 512
 * @param Value_Offset The offset from which the attribute value has to be
 *        updated.
 *        Values:
 *        - 0 ... 511
 * @param Value_Length Length of the Value parameter in octets
 * @param Value Updated characteristic value
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_update_char_value_ext(uint16_t Conn_Handle_To_Notify,
                                          uint16_t Service_Handle,
                                          uint16_t Char_Handle,
                                          uint8_t Update_Type,
                                          uint16_t Char_Length,
                                          uint16_t Value_Offset,
                                          uint8_t Value_Length,
                                          uint8_t Value[]);
/**
 * @brief Deny the GATT server to send a response to a read request from a
 *        client. The application may send this command when it receives the
 *        @ref aci_gatt_read_permit_req_event or  @ref
 *        aci_gatt_read_multi_permit_req_event. This command indicates to the
 *        stack that the client is not allowed to read the requested
 *        characteristic due to e.g. application restrictions. The Error code
 *        shall be either 0x08 (Insufficient Authorization) or a value in the
 *        range 0x80-0x9F (Application Error). The application should issue the
 *        @ref aci_gatt_deny_read  or @ref aci_gatt_allow_read command within 30
 *        seconds from the reception of the @ref aci_gatt_read_permit_req_event
 *        or  @ref aci_gatt_read_multi_permit_req_event events otherwise the
 *        GATT procedure will issue a timeout.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Error_Code Error code for the command
 *        Values:
 *        - 0x08: Insufficient Authorization
 *        - 0x80 ... 0x9F: Application Error
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_deny_read(uint16_t Connection_Handle,
                              uint8_t Error_Code);
/**
 * @brief This command sets the access permission for the attribute handle
 *        specified.
 * @param Serv_Handle Handle of the service which contains the attribute whose
 *        access permission has to be modified
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Attr_Handle Handle of the attribute whose security permission has to
 *        be modified
 *        Values:
 *        - 0x0001 ... 0xFFFF
 * @param Access_Permissions Access permission
 *        Values:
 *        - 0x00: None
 *        - 0x01: READ
 *        - 0x02: WRITE
 *        - 0x04: WRITE_NO_RESP
 *        - 0x08: SIGNED_WRITE
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gatt_set_access_permission(uint16_t Serv_Handle,
                                          uint16_t Attr_Handle,
                                          uint8_t Access_Permissions);
/**
 * @}
 */

/**
 * @}
 */
 
/**
 * @}
 */

/**
 * @}
 */

/**
 * @}
 */

/**
 * @defgroup GATT_Events GATT events
 * The structures are the data field of @ref evt_blue_aci.
 * @{
 */

/**
 * This event (if enabled, see @ref Gatt_Event_Mask "Gatt Event Mask") is raised to the application
 * by the GATT server when a client modifies any attribute on the server, as consequence of one of
 * the following GATT procedures:
 * @li write without response
 * @li signed write without response
 * @li write characteristic value
 * @li write long characteristic value
 * @li reliable write.
 * See @ref _evt_gatt_attr_modified.
 */
#define EVT_BLUE_GATT_ATTRIBUTE_MODIFIED          (0x0C01)
typedef  struct _evt_gatt_attr_modified{
  uint16_t conn_handle; /**< The connection handle which modified the attribute. */
  uint16_t attr_handle; /**< Handle of the attribute that was modified. */
  uint8_t  data_length; /**< The length of att_data field. */
#if BLUENRG_MS
///@cond BLUENRG_MS
/**
 * Bits 0-30: offset of the reported value inside the attribute.
 * Bit 31: if the entire value of the attribute does not fit inside a single
 * EVT_BLUE_GATT_ATTRIBUTE_MODIFIED event, this bit is set to 1 to notify that other
 * EVT_BLUE_GATT_ATTRIBUTE_MODIFIED events will follow to report the remaining value.
 */
  uint16_t  offset;
///@endcond
#endif
  uint8_t  att_data[VARIABLE_SIZE]; /**< The new attribute value, starting from the given offset. */
} evt_gatt_attr_modified;

/**
 * This event is generated by the client/server to the application on a GATT timeout (30 seconds).
 * See @ref _evt_gatt_procedure_timeout.
 */
#define EVT_BLUE_GATT_PROCEDURE_TIMEOUT           (0x0C02)
typedef  struct _evt_gatt_procedure_timeout{
	uint16_t conn_handle; /**< The connection handle on which the GATT procedure has timed out */
}  evt_gatt_procedure_timeout;

/**
 * This event is generated in response to an Exchange MTU request. See aci_gatt_exchange_configuration().
 * See @ref _evt_att_exchange_mtu_resp.
 */
#define EVT_BLUE_ATT_EXCHANGE_MTU_RESP		  (0x0C03)
typedef  struct _evt_att_exchange_mtu_resp{
  uint16_t conn_handle; /**< The connection handle related to the response */
  uint8_t  event_data_length; /**< Length of following data (always 1). */
  uint16_t server_rx_mtu; /**< Attribute server receive MTU size */
}  evt_att_exchange_mtu_resp;

/**
 * This event is generated in response to a @a Find @a Information @a Request. See aci_att_find_information_req() and
 * Find Information Response in Bluetooth Core v4.0 spec. See @ref _evt_att_find_information_resp.
 */
#define EVT_BLUE_ATT_FIND_INFORMATION_RESP	  (0x0C04)
typedef  struct _evt_att_find_information_resp{
  uint16_t conn_handle;			/**< The connection handle related to the response */
  uint8_t  event_data_length;	/**< Length of following data. */
  uint8_t  format;				/**< The format of the handle_uuid_pair. @arg 1: 16-bit UUIDs @arg 2: 128-bit UUIDs */
  /**
   *  A sequence of handle-uuid pairs.\n
   *  @li if format=1, each pair is:\n
   *  [2 octets for handle, 2 octets for UUIDs] \n
   *  @li if format=2, each pair is:\n
   *  [2 octets for handle, 16 octets for UUIDs]
   */
  uint8_t  handle_uuid_pair[VARIABLE_SIZE];
}  evt_att_find_information_resp;

/**
 * This event is generated in response to a @a Find @a By @a Type @a Value @a Request. See
 * Find By Type Value Response in Bluetooth Core v4.0 spec. See @ref _evt_att_find_by_type_val_resp.
 */
#define EVT_BLUE_ATT_FIND_BY_TYPE_VAL_RESP	  (0x0C05)
typedef  struct _evt_att_find_by_type_val_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response */
  uint8_t  event_data_length;		/**< Length of following data. */
  /**
   *  Handles Information List as defined in Bluetooth Core v4.0 spec.
   *  A sequence of handle pairs: [2 octets for Found Attribute Handle, 2 octets for Group End Handle]
   */
  uint8_t  handles_info_list[VARIABLE_SIZE];
}  evt_att_find_by_type_val_resp;

/**
 * This event is generated in response to a @a Read @a By @a Type @a Request. See aci_gatt_find_included_services() and
 * aci_gatt_disc_all_charac_of_serv().
 * For more info see Read By Type Response in Bluetooth Core v4.0 spec. See @ref _evt_att_read_by_type_resp.
 */
#define EVT_BLUE_ATT_READ_BY_TYPE_RESP		  (0x0C06)
typedef  struct _evt_att_read_by_type_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response */
  uint8_t  event_data_length;		/**< Length of following data. */
  uint8_t  handle_value_pair_length; /**< The size of each attribute handle-value pair */
  /**
   *  Attribute Data List as defined in Bluetooth Core v4.0 spec.
   *  A sequence of handle-value pairs: [2 octets for Attribute Handle, (handle_value_pair_length - 2 octets) for Attribute Value]
   */
  uint8_t  handle_value_pair[VARIABLE_SIZE];
}  evt_att_read_by_type_resp;

/**
 * This event is generated in response to a @a Read @a Request. See aci_gatt_read_charac_val().
 * For more info see Read Response in Bluetooth Core v4.0 spec. See @ref _evt_att_read_resp.
 */
#define EVT_BLUE_ATT_READ_RESP			  (0x0C07)
typedef  struct _evt_att_read_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response. */
  uint8_t  event_data_length;		/**< Length of following data. */
  uint8_t  attribute_value[VARIABLE_SIZE]; /**< The value of the attribute. */
}  evt_att_read_resp;

/**
 * This event is generated in response to a @a Read @a Blob @a Request. See aci_gatt_read_long_charac_val().
 * For more info see Read Blob Response in Bluetooth Core v4.0 spec. See @ref _evt_att_read_blob_resp.
 */
#define EVT_BLUE_ATT_READ_BLOB_RESP		  (0x0C08)
typedef  struct _evt_att_read_blob_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response. */
  uint8_t  event_data_length;		/**< Length of following data. */
  uint8_t  part_attribute_value[VARIABLE_SIZE]; /**< Part of the attribute value. */
}  evt_att_read_blob_resp;

/**
 * This event is generated in response to a @a Read @a Multiple @a Request.
 * For more info see Read Multiple Response in Bluetooth Core v4.0 spec. See @ref _evt_att_read_mult_resp.
 */
#define EVT_BLUE_ATT_READ_MULTIPLE_RESP		  (0x0C09)
typedef  struct _evt_att_read_mult_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response. */
  uint8_t  event_data_length;		/**< Length of following data. */
  uint8_t  set_of_values[VARIABLE_SIZE]; /**< A set of two or more values.*/
}  evt_att_read_mult_resp;

/**
 * This event is generated in response to a @a Read @a By @a Group @a Type @a Request. See aci_gatt_disc_all_prim_services().
 * For more info see Read By Group type Response in Bluetooth Core v4.0 spec. See @ref _evt_att_read_by_group_resp.
 */
#define EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP           (0x0C0A)
typedef  struct _evt_att_read_by_group_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response. */
  uint8_t  event_data_length;		/**< Length of following data. */
  uint8_t  attribute_data_length;   /**< The size of each Attribute Data. */
  /**
   *  A list of Attribute Data where the attribute data is composed by:
   *  @li 2 octets for Attribute Handle
   *  @li 2 octets for End Group Handle
   *  @li (attribute_data_length - 4) octets for Attribute Value
   */
  uint8_t  attribute_data_list[VARIABLE_SIZE];
}  evt_att_read_by_group_resp;

/**
 * This event is generated in response to a @a Prepare @a Write @a Request.
 * For more info see Prepare Write Response in Bluetooth Core v4.0 spec. See @ref _evt_att_prepare_write_resp.
 */
#define EVT_BLUE_ATT_PREPARE_WRITE_RESP		  (0x0C0C)
typedef  struct _evt_att_prepare_write_resp{
  uint16_t conn_handle;				/**< The connection handle related to the response. */
  uint8_t  event_data_length;		/**< Length of following data. */
  uint16_t  attribute_handle;		/**< The handle of the attribute to be written. */
  uint16_t  offset;					/**< The offset of the first octet to be written. */
  uint8_t  part_attr_value[VARIABLE_SIZE]; /**< The value of the attribute to be written. */
}  evt_att_prepare_write_resp;

/**
 * This event is generated in response to an @a Execute @a Write @a Request.
 * For more info see Execute Write Response in Bluetooth Core v4.0 spec. See @ref _evt_att_exec_write_resp.
 */
#define EVT_BLUE_ATT_EXEC_WRITE_RESP		  (0x0C0D)
typedef  struct _evt_att_exec_write_resp{
  uint16_t conn_handle;			/**< The connection handle related to the response. */
  uint8_t  event_data_length; 	/**< Always 0. */
}  evt_att_exec_write_resp;

/**
 * This event is generated when an indication is received from the server.
 * For more info see Handle Value Indication in Bluetooth Core v4.0 spec. See @ref _evt_gatt_indication.
 */
#define EVT_BLUE_GATT_INDICATION		  (0x0C0E)
typedef  struct _evt_gatt_indication{
  uint16_t conn_handle;		  			/**< The connection handle related to the event. */
  uint8_t  event_data_length; 			/**< Length of following data. */
  uint16_t attr_handle;					/**< The handle of the attribute. */
  uint8_t  attr_value[VARIABLE_SIZE]; 	/**< The current value of the attribute. */
}  evt_gatt_indication;

/**
 * This event is generated when a notification is received from the server.
 * For more info see Handle Value Notification in Bluetooth Core v4.0 spec. See @ref _evt_gatt_notification.
 */
#define EVT_BLUE_GATT_NOTIFICATION		  (0x0C0F)
typedef  struct _evt_gatt_notification{
  uint16_t conn_handle;					/**< The connection handle related to the event. */
  uint8_t  event_data_length; 			/**< Length of following data. */
  uint16_t attr_handle;					/**< The handle of the attribute. */
  uint8_t  attr_value[VARIABLE_SIZE]; 	/**< The current value of the attribute. */
}  evt_gatt_attr_notification;

/**
 * This event is generated when a GATT client procedure completes either with error or successfully.
 * See @ref _evt_gatt_procedure_complete.
 */
#define EVT_BLUE_GATT_PROCEDURE_COMPLETE          (0x0C10)
typedef  struct _evt_gatt_procedure_complete{
  uint16_t conn_handle; /**< The connection handle on which the GATT procedure has completed */
  uint8_t  data_length; /**< Length of error_code field (always 1). */
  /**
   * Indicates whether the procedure completed with error (BLE_STATUS_FAILED) or was successful (BLE_STATUS_SUCCESS).
   */
  uint8_t  error_code;
}  evt_gatt_procedure_complete;

/**
 * This event is generated when an Error Response is received from the server. The error response can be given
 * by the server at the end of one of the GATT discovery procedures. This does not mean that the procedure ended
 * with an error, but this error event is part of the procedure itself. See @ref _evt_gatt_error_resp.
 */
#define EVT_BLUE_GATT_ERROR_RESP                  (0x0C11)
typedef  struct _evt_gatt_error_resp{
  uint16_t conn_handle;			/**< The connection handle related to the event. */
  uint8_t  event_data_length;	/**< Length of following data. */
  uint8_t  req_opcode;			/**< The request that generated this error response. */
  uint16_t attr_handle;			/**< The attribute handle that generated this error response. */
  uint8_t  error_code;			/**< The reason why the request has generated an error response. See Error Response in Bluetooth Core v4.0 spec.  */
}  evt_gatt_error_resp;

/**
 * This event can be generated during a "Discover Characteristics By UUID" procedure or a "Read using
 * Characteristic UUID" procedure.
 * The attribute value will be a service declaration as defined in Bluetooth Core v4.0 spec (vol.3, Part G, ch. 3.3.1),
 * when a "Discover Characteristics By UUID" has been started. It will be the value of the Characteristic if a
 * "Read using Characteristic UUID" has been performed. See @ref _evt_gatt_disc_read_char_by_uuid_resp.
 */
#define EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP (0x0C12)
typedef  struct _evt_gatt_disc_read_char_by_uuid_resp{
  uint16_t conn_handle;						/**< The connection handle related to the event. */
  uint8_t  event_data_length;				/**< Length of following data. */
  uint16_t attr_handle;						/**< The handle of the attribute. */
  /**
   * The attribute value will be a service declaration as defined in Bluetooth Core v4.0 spec (vol.3, Part G, ch. 3.3.1),
   * when a "Discover Characteristics By UUID" has been started. It will be the value of the Characteristic if a
   * "Read using Characteristic UUID" has been performed.
   */
  uint8_t  attr_value[VARIABLE_SIZE];
}  evt_gatt_disc_read_char_by_uuid_resp;

/**
 * This event is given to the application when a write request, write command or signed write command
 * is received by the server from the client. This event will be given to the application only if the
 * event bit for this event generation is set when the characteristic was added.
 * When this event is received, the application has to check whether the value being requested for write
 * is allowed to be written and respond with the command aci_gatt_write_response().
 * If the write is rejected by the application, then the value of the attribute will not be modified.
 * In case of a write request, an error response will be sent to the client, with the error code as specified by the application.
 * In case of write/signed write commands, no response is sent to the client but the attribute is not modified.
 * See @ref evt_gatt_write_permit_req.
 */
#define EVT_BLUE_GATT_WRITE_PERMIT_REQ            (0x0C13)
typedef  struct _evt_gatt_write_permit_req{
  uint16_t conn_handle; /**< Handle of the connection on which there was the request to write the attribute. */
  uint16_t attr_handle; /**< The handle of the attribute for which the write request has been made by the client */
  uint8_t  data_length; /**< Length of data field. */
  uint8_t  data[VARIABLE_SIZE]; /**< The data that the client has requested to write */
}  evt_gatt_write_permit_req;

/**
 * This event is given to the application when a read request or read blob request is received by the server
 * from the client. This event will be given to the application only if the event bit for this event generation
 * is set when the characteristic was added.
 * On receiving this event, the application can update the value of the handle if it desires and when done
 * it has to use the aci_gatt_allow_read() command to indicate to the stack that it can send the response to the client.
 * See @ref evt_gatt_read_permit_req.
 *
 */
#define EVT_BLUE_GATT_READ_PERMIT_REQ             (0x0C14)
typedef  struct _evt_gatt_read_permit_req{
  uint16_t conn_handle; /**< Handle of the connection on which there was the request to read the attribute. */
  uint16_t attr_handle; /**< The handle of the attribute for which the read request has been made by the client */
  uint8_t  data_length; /**< Length of offset field. */
  uint16_t offset;      /**< Contains the offset from which the read has been requested */
}  evt_gatt_read_permit_req;

/**
 * This event is given to the application when a read multiple request or read by type request is received
 * by the server from the client. This event will be given to the application only if the event bit for this
 * event generation is set when the characteristic was added.
 * On receiving this event, the application can update the values of the handles if it desires and when done
 * it has to send the aci_gatt_allow_read command to indicate to the stack that it can send the response to the client.
 * See @ref evt_gatt_read_multi_permit_req.
 *
 */
#define EVT_BLUE_GATT_READ_MULTI_PERMIT_REQ       (0x0C15)
typedef  struct _evt_gatt_read_multi_permit_req{
  uint16_t conn_handle; /**< Handle of the connection on which there was the request to read the attribute. */
  uint8_t  data_length; /**< Length of data field. */
  uint8_t  data[VARIABLE_SIZE]; /**< The handles of the attributes that have been requested by the client for a read. */
}  evt_gatt_read_multi_permit_req;

#endif /* _BLUENRG1_GATT_ACI_H_ */

#if BLUENRG_MS
///@cond BLUENRG_MS
/**
 * This event is raised when the number of available TX buffers is above a threshold TH (TH = 2).
 * The event will be given only if a previous ACI command returned with BLE_STATUS_INSUFFICIENT_RESOURCES.
 * On receiving this event, the application can continue to send notifications by calling aci_gatt_update_char_value().
 * See @ref evt_gatt_tx_pool_vailable.
 *
 */
#define EVT_BLUE_GATT_TX_POOL_AVAILABLE           (0x0C16)
typedef __packed struct _evt_gatt_tx_pool_available{
  uint16_t conn_handle; /**< Handle of the connection on which there was the request to read the attribute. */
  uint16_t available_buffers; /**< Length of data field. */
} PACKED evt_gatt_tx_pool_available;

/**
 * This event is raised on the server when the client confirms the reception of an indication.
 */
#define EVT_BLUE_GATT_SERVER_CONFIRMATION_EVENT    (0x0C17)
typedef __packed struct _evt_gatt_server_confirmation{
  uint16_t conn_handle; /**< Handle of the connection on which there was the request to read the attribute. */
} PACKED evt_gatt_server_confirmation;


/**
 * This event is given to the application when a prepare write request
 * is received by the server from the client. This event will be given to the application only if the
 * event bit for this event generation is set when the characteristic was added.
 * When this event is received, the application has to check whether the value being requested for write
 * is allowed to be written and respond with the command aci_gatt_write_response().
 * Based on the response from the application, the attribute value will be modified by the stack.
 * If the write is rejected by the application, then the value of the attribute will not be modified
 * and an error response will be sent to the client, with the error code as specified by the application.
 * See @ref evt_gatt_write_permit_req.
 */
#define EVT_BLUE_GATT_PREPARE_WRITE_PERMIT_REQ            (0x0C18)
typedef __packed struct _evt_gatt_prepare_write_permit_req{
  uint16_t conn_handle; /**< Handle of the connection on which there was the request to write the attribute. */
  uint16_t attr_handle; /**< The handle of the attribute for which the write request has been made by the client */
  uint16_t offset; /**< The offset from which the prepare write has been requested */
  uint8_t  data_length; /**< Length of data field. */
  uint8_t  data[VARIABLE_SIZE]; /**< The data that the client has requested to write */
} PACKED evt_gatt_prepare_write_permit_req;

#endif /* _BLUENRG1_GATT_ACI_H_ */
