
Nucleo_STM32F401_RE_BT_LCD_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000643f0  0800e868  0800e868  0001e868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08072c58  08072c58  00090234  2**0
                  CONTENTS
  4 .ARM          00000008  08072c58  08072c58  00082c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08072c60  08072c60  00090234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08072c60  08072c60  00082c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08072c64  08072c64  00082c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08072c68  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  20000234  08072e9c  00090234  2**2
                  ALLOC
 10 ._user_heap_stack 00000f04  20000bc4  08072e9c  00090bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8a3  00000000  00000000  00090264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004579  00000000  00000000  000beb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  000c3080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  000c48b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198af  00000000  00000000  000c5f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d666  00000000  00000000  000df82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009764a  00000000  00000000  000fce95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001944df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba0  00000000  00000000  00194534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0019c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0019c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e850 	.word	0x0800e850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	0800e850 	.word	0x0800e850

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8000f56:	f000 f827 	bl	8000fa8 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f005 fca6 	bl	80068ac <BSP_PB_GetState>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_BlueNRG_2_Init+0x40>)
 8000f66:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <MX_BlueNRG_2_Init+0x44>)
 8000f6c:	f00a f984 	bl	800b278 <hci_init>

  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8000f70:	f000 f82a 	bl	8000fc8 <Sensor_DeviceInit>
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <MX_BlueNRG_2_Init+0x36>
  {
    BSP_LED_On(LED2);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f005 fbbc 	bl	80066fc <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8000f84:	e7fe      	b.n	8000f84 <MX_BlueNRG_2_Init+0x34>
#endif /* STM32L476xx */

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000
 8000f94:	08002c55 	.word	0x08002c55

08000f98 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8000f9c:	f00a fae8 	bl	800b570 <hci_user_evt_proc>
  User_Process();
 8000fa0:	f000 f8ae 	bl	8001100 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fac:	2101      	movs	r1, #1
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f005 fc28 	bl	8006804 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f005 fb8f 	bl	80066d8 <BSP_LED_Init>


  send_temphumi = 0;//stop
 8000fba:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <User_Init+0x1c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]

 // BSP_COM_Init(COM2);
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000986 	.word	0x20000986

08000fc8 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <Sensor_DeviceInit+0x12c>)
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd8:	6018      	str	r0, [r3, #0]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	8019      	strh	r1, [r3, #0]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	0c0a      	lsrs	r2, r1, #16
 8000fe2:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 8000fe8:	f009 f9a2 	bl	800a330 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8000fec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff0:	f005 fd30 	bl	8006a54 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000ff4:	1d3a      	adds	r2, r7, #4
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 f8ce 	bl	800219c <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8001000:	1cf9      	adds	r1, r7, #3
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	4a3c      	ldr	r2, [pc, #240]	; (80010f8 <Sensor_DeviceInit+0x130>)
 8001006:	4618      	mov	r0, r3
 8001008:	f009 ffd0 	bl	800afac <aci_hal_read_config_data>
 800100c:	4603      	mov	r3, r0
 800100e:	75bb      	strb	r3, [r7, #22]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001010:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <Sensor_DeviceInit+0x130>)
 8001012:	795b      	ldrb	r3, [r3, #5]
 8001014:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001018:	2bc0      	cmp	r3, #192	; 0xc0
 800101a:	d000      	beq.n	800101e <Sensor_DeviceInit+0x56>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 800101c:	e7fe      	b.n	800101c <Sensor_DeviceInit+0x54>
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 800101e:	2104      	movs	r1, #4
 8001020:	2001      	movs	r0, #1
 8001022:	f00a f831 	bl	800b088 <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS)
 8001026:	7dbb      	ldrb	r3, [r7, #22]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <Sensor_DeviceInit+0x68>
  {
    PRINT_DBG("Error in aci_hal_set_tx_power_level() 0x%04x\r\n", ret);
    return ret;
 800102c:	7dbb      	ldrb	r3, [r7, #22]
 800102e:	e05d      	b.n	80010ec <Sensor_DeviceInit+0x124>
  {
    PRINT_DBG("aci_hal_set_tx_power_level() --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8001030:	f009 fcd3 	bl	800a9da <aci_gatt_init>
 8001034:	4603      	mov	r3, r0
 8001036:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001038:	7dbb      	ldrb	r3, [r7, #22]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <Sensor_DeviceInit+0x7a>
  {
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	e054      	b.n	80010ec <Sensor_DeviceInit+0x124>
  {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle, &dev_name_char_handle,
 8001042:	f107 0214 	add.w	r2, r7, #20
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 0312 	add.w	r3, r7, #18
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	2207      	movs	r2, #7
 8001056:	2100      	movs	r1, #0
 8001058:	2001      	movs	r0, #1
 800105a:	f009 fbd0 	bl	800a7fe <aci_gap_init>
 800105e:	4603      	mov	r3, r0
 8001060:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 8001062:	7dbb      	ldrb	r3, [r7, #22]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <Sensor_DeviceInit+0xa4>
  {
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	e03f      	b.n	80010ec <Sensor_DeviceInit+0x124>
  {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 800106c:	8ab8      	ldrh	r0, [r7, #20]
 800106e:	8a79      	ldrh	r1, [r7, #18]
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2307      	movs	r3, #7
 8001078:	2200      	movs	r2, #0
 800107a:	f009 fe71 	bl	800ad60 <aci_gatt_update_char_value>
 800107e:	4603      	mov	r3, r0
 8001080:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if(ret != BLE_STATUS_SUCCESS)
 8001082:	7dbb      	ldrb	r3, [r7, #22]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <Sensor_DeviceInit+0xc4>
  {
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	e02f      	b.n	80010ec <Sensor_DeviceInit+0x124>
  {
    PRINT_DBG("aci_gatt_update_char_value() --> SUCCESS\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 800108c:	2300      	movs	r3, #0
 800108e:	9304      	str	r3, [sp, #16]
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Sensor_DeviceInit+0x134>)
 8001092:	9303      	str	r3, [sp, #12]
 8001094:	2300      	movs	r3, #0
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2310      	movs	r3, #16
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2307      	movs	r3, #7
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	2201      	movs	r2, #1
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f009 fafa 	bl	800a6a0 <aci_gap_set_authentication_requirement>
 80010ac:	4603      	mov	r3, r0
 80010ae:	75bb      	strb	r3, [r7, #22]
                                               7,
                                               16,
                                               USE_FIXED_PIN_FOR_PAIRING,
                                               123456,
                                               0x00);
  if(ret != BLE_STATUS_SUCCESS)
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <Sensor_DeviceInit+0xf2>
  {
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	e018      	b.n	80010ec <Sensor_DeviceInit+0x124>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 80010ba:	f001 f8e3 	bl	8002284 <Add_HWServW2ST_Service>
 80010be:	4603      	mov	r3, r0
 80010c0:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 80010c2:	7dbb      	ldrb	r3, [r7, #22]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d000      	beq.n	80010ca <Sensor_DeviceInit+0x102>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else
  {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 80010c8:	e7fe      	b.n	80010c8 <Sensor_DeviceInit+0x100>
  //   PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
  //   while(1);
  //}

  //Temp/Humi Service
  ret =Add_TempHumi_Service();
 80010ca:	f001 f9bb 	bl	8002444 <Add_TempHumi_Service>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75bb      	strb	r3, [r7, #22]
   if(ret == BLE_STATUS_SUCCESS)
 80010d2:	7dbb      	ldrb	r3, [r7, #22]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d000      	beq.n	80010da <Sensor_DeviceInit+0x112>
     PRINT_DBG("BlueNRG2 Temp/Humi service added successfully.\r\n");
   }
   else
   {
     PRINT_DBG("Error while adding BlueNRG2 Temp/Humi service: 0x%02x\r\n", ret);
     while(1);
 80010d8:	e7fe      	b.n	80010d8 <Sensor_DeviceInit+0x110>
   }


   //Temp/Humi Service
   ret =Add_SetTime_Service();
 80010da:	f001 fa47 	bl	800256c <Add_SetTime_Service>
 80010de:	4603      	mov	r3, r0
 80010e0:	75bb      	strb	r3, [r7, #22]
    if(ret == BLE_STATUS_SUCCESS)
 80010e2:	7dbb      	ldrb	r3, [r7, #22]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <Sensor_DeviceInit+0x122>
      PRINT_DBG("BlueNRG2 SetTime service added successfully.\r\n");
    }
    else
    {
      PRINT_DBG("Error while adding BlueNRG2 SetTime service: 0x%02x\r\n", ret);
      while(1);
 80010e8:	e7fe      	b.n	80010e8 <Sensor_DeviceInit+0x120>
     PRINT_DBG("Error while adding BlueNRG2 Console service: 0x%02x\r\n", ret);
     while(1);
  }

#endif /* STM32L476xx */
  return BLE_STATUS_SUCCESS;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	0800e868 	.word	0x0800e868
 80010f8:	20000954 	.word	0x20000954
 80010fc:	0001e240 	.word	0x0001e240

08001100 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <User_Process+0x138>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001110:	f001 fd1e 	bl	8002b50 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001114:	4b48      	ldr	r3, [pc, #288]	; (8001238 <User_Process+0x138>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 800111a:	2000      	movs	r0, #0
 800111c:	f005 fb1a 	bl	8006754 <BSP_LED_Toggle>

    if (connected)
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <User_Process+0x13c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8083 	beq.w	8001230 <User_Process+0x130>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800112a:	f005 fc87 	bl	8006a3c <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	4618      	mov	r0, r3
 8001132:	f00b f867 	bl	800c204 <srand>

      if(send_temphumi)
 8001136:	4b42      	ldr	r3, [pc, #264]	; (8001240 <User_Process+0x140>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d01d      	beq.n	800117c <User_Process+0x7c>
      {
    	  //Set_Random_Environmental_Values(&data_t, &data_p);
    	  Set_TempHumi_Values(&data_t, &data_p);
 8001140:	463a      	mov	r2, r7
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f90a 	bl	8001360 <Set_TempHumi_Values>
    	  //TempHumi_Update((int32_t)(data_t *100), (int16_t)(data_p * 10));
    	  TempHumi_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800114c:	edd7 7a00 	vldr	s15, [r7]
 8001150:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001244 <User_Process+0x144>
 8001154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001158:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800115c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001160:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116c:	ee17 3a90 	vmov	r3, s15
 8001170:	b21b      	sxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	ee16 0a90 	vmov	r0, s13
 8001178:	f001 fad4 	bl	8002724 <TempHumi_Update>
      }

      if (send_env) {
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <User_Process+0x148>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d021      	beq.n	80011ca <User_Process+0xca>
        /* Update emulated Environmental data */
        Set_Random_Environmental_Values(&data_t, &data_p);
 8001186:	463a      	mov	r2, r7
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f86b 	bl	8001268 <Set_Random_Environmental_Values>
        Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001192:	edd7 7a00 	vldr	s15, [r7]
 8001196:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001244 <User_Process+0x144>
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b2:	ee17 3a90 	vmov	r3, s15
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	ee16 0a90 	vmov	r0, s13
 80011be:	f001 fa6b 	bl	8002698 <Environmental_Update>
        #if !USE_BUTTON
          HAL_Delay(1000); /* wait 1 sec before sending new data */
 80011c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c6:	f005 fc45 	bl	8006a54 <HAL_Delay>
        #endif
      }

      if ((send_mot) || (send_quat)) {
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <User_Process+0x14c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <User_Process+0xde>
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <User_Process+0x150>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d028      	beq.n	8001230 <User_Process+0x130>
        /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
        Set_Random_Motion_Values(counter);
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <User_Process+0x154>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f8d4 	bl	8001390 <Set_Random_Motion_Values>
        if (send_mot) {
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <User_Process+0x14c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <User_Process+0xfc>
          Acc_Update(&x_axes, &g_axes, &m_axes);
 80011f2:	4a19      	ldr	r2, [pc, #100]	; (8001258 <User_Process+0x158>)
 80011f4:	4919      	ldr	r1, [pc, #100]	; (800125c <User_Process+0x15c>)
 80011f6:	481a      	ldr	r0, [pc, #104]	; (8001260 <User_Process+0x160>)
 80011f8:	f001 fae4 	bl	80027c4 <Acc_Update>
        }
        if (send_quat) {
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <User_Process+0x150>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <User_Process+0x10c>
          Quat_Update(&q_axes);
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <User_Process+0x164>)
 8001208:	f001 fb66 	bl	80028d8 <Quat_Update>
        }
        counter ++;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <User_Process+0x154>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <User_Process+0x154>)
 8001214:	6013      	str	r3, [r2, #0]
        if (counter == 40) {
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <User_Process+0x154>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b28      	cmp	r3, #40	; 0x28
 800121c:	d104      	bne.n	8001228 <User_Process+0x128>
          counter = 0;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <User_Process+0x154>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
          Reset_Motion_Values();
 8001224:	f000 fed0 	bl	8001fc8 <Reset_Motion_Values>
        }
        #if !USE_BUTTON
          HAL_Delay(1000); /* wait 1 sec before sending new data */
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f005 fc12 	bl	8006a54 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000008 	.word	0x20000008
 800123c:	2000025c 	.word	0x2000025c
 8001240:	20000986 	.word	0x20000986
 8001244:	42c80000 	.word	0x42c80000
 8001248:	2000096c 	.word	0x2000096c
 800124c:	200009a4 	.word	0x200009a4
 8001250:	20000964 	.word	0x20000964
 8001254:	20000254 	.word	0x20000254
 8001258:	20000278 	.word	0x20000278
 800125c:	2000026c 	.word	0x2000026c
 8001260:	20000260 	.word	0x20000260
 8001264:	20000284 	.word	0x20000284

08001268 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8001268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8001274:	f00a fff4 	bl	800c260 <rand>
 8001278:	4603      	mov	r3, r0
 800127a:	461c      	mov	r4, r3
 800127c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001280:	4622      	mov	r2, r4
 8001282:	462b      	mov	r3, r5
 8001284:	f04f 0000 	mov.w	r0, #0
 8001288:	f04f 0100 	mov.w	r1, #0
 800128c:	0099      	lsls	r1, r3, #2
 800128e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001292:	0090      	lsls	r0, r2, #2
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	eb12 0804 	adds.w	r8, r2, r4
 800129c:	eb43 0905 	adc.w	r9, r3, r5
 80012a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	4640      	mov	r0, r8
 80012aa:	4649      	mov	r1, r9
 80012ac:	f7ff fcd4 	bl	8000c58 <__aeabi_uldivmod>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff f970 	bl	800059c <__aeabi_ul2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <Set_Random_Environmental_Values+0xf0>)
 80012c2:	f7fe ffeb 	bl	800029c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc73 	bl	8000bb8 <__aeabi_d2f>
 80012d2:	4602      	mov	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80012d8:	f00a ffc2 	bl	800c260 <rand>
 80012dc:	4603      	mov	r3, r0
 80012de:	461c      	mov	r4, r3
 80012e0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80012e4:	4622      	mov	r2, r4
 80012e6:	462b      	mov	r3, r5
 80012e8:	f04f 0000 	mov.w	r0, #0
 80012ec:	f04f 0100 	mov.w	r1, #0
 80012f0:	0099      	lsls	r1, r3, #2
 80012f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012f6:	0090      	lsls	r0, r2, #2
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	1912      	adds	r2, r2, r4
 80012fe:	eb45 0303 	adc.w	r3, r5, r3
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	0119      	lsls	r1, r3, #4
 800130c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001310:	0110      	lsls	r0, r2, #4
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	f7ff fc99 	bl	8000c58 <__aeabi_uldivmod>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff f935 	bl	800059c <__aeabi_ul2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <Set_Random_Environmental_Values+0xf4>)
 8001338:	f7fe ffb0 	bl	800029c <__adddf3>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc38 	bl	8000bb8 <__aeabi_d2f>
 8001348:	4602      	mov	r2, r0
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001358:	403b0000 	.word	0x403b0000
 800135c:	408f4000 	.word	0x408f4000

08001360 <Set_TempHumi_Values>:

static void Set_TempHumi_Values(float *data_t, float *data_h)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]

  *data_t = HDC1080_Temp;//27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <Set_TempHumi_Values+0x28>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
  *data_h = HDC1080_Humi;//1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <Set_TempHumi_Values+0x2c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000a70 	.word	0x20000a70
 800138c:	20000b3c 	.word	0x20000b3c

08001390 <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	b0e9      	sub	sp, #420	; 0x1a4
 8001396:	af00      	add	r7, sp, #0
 8001398:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 800139c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80013a0:	2b13      	cmp	r3, #19
 80013a2:	f200 82ef 	bhi.w	8001984 <Set_Random_Motion_Values+0x5f4>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80013a6:	f00a ff5b 	bl	800c260 <rand>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4618      	mov	r0, r3
 80013ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80013b6:	461a      	mov	r2, r3
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	fb02 f501 	mul.w	r5, r2, r1
 80013c0:	fb00 f403 	mul.w	r4, r0, r3
 80013c4:	442c      	add	r4, r5
 80013c6:	fba0 0102 	umull	r0, r1, r0, r2
 80013ca:	1863      	adds	r3, r4, r1
 80013cc:	4619      	mov	r1, r3
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	1894      	adds	r4, r2, r2
 80013d4:	65bc      	str	r4, [r7, #88]	; 0x58
 80013d6:	415b      	adcs	r3, r3
 80013d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013de:	eb12 0a00 	adds.w	sl, r2, r0
 80013e2:	eb43 0b01 	adc.w	fp, r3, r1
 80013e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	4650      	mov	r0, sl
 80013f0:	4659      	mov	r1, fp
 80013f2:	f7ff fc31 	bl	8000c58 <__aeabi_uldivmod>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	f112 010a 	adds.w	r1, r2, #10
 80013fe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001402:	f143 0300 	adc.w	r3, r3, #0
 8001406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800140a:	4be2      	ldr	r3, [pc, #904]	; (8001794 <Set_Random_Motion_Values+0x404>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001414:	4413      	add	r3, r2
 8001416:	461a      	mov	r2, r3
 8001418:	4bde      	ldr	r3, [pc, #888]	; (8001794 <Set_Random_Motion_Values+0x404>)
 800141a:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800141c:	f00a ff20 	bl	800c260 <rand>
 8001420:	4603      	mov	r3, r0
 8001422:	4618      	mov	r0, r3
 8001424:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001428:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800142c:	461a      	mov	r2, r3
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	fb02 f501 	mul.w	r5, r2, r1
 8001436:	fb00 f403 	mul.w	r4, r0, r3
 800143a:	442c      	add	r4, r5
 800143c:	fba0 8902 	umull	r8, r9, r0, r2
 8001440:	eb04 0309 	add.w	r3, r4, r9
 8001444:	4699      	mov	r9, r3
 8001446:	4642      	mov	r2, r8
 8001448:	464b      	mov	r3, r9
 800144a:	f04f 0000 	mov.w	r0, #0
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	0099      	lsls	r1, r3, #2
 8001454:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001458:	0090      	lsls	r0, r2, #2
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	eb12 0108 	adds.w	r1, r2, r8
 8001462:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8001466:	eb43 0309 	adc.w	r3, r3, r9
 800146a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800146e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800147a:	f7ff fbed 	bl	8000c58 <__aeabi_uldivmod>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f06f 0209 	mvn.w	r2, #9
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	1a14      	subs	r4, r2, r0
 8001490:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8001494:	eb63 0301 	sbc.w	r3, r3, r1
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800149c:	4bbd      	ldr	r3, [pc, #756]	; (8001794 <Set_Random_Motion_Values+0x404>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	461a      	mov	r2, r3
 80014a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014a6:	4413      	add	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4bba      	ldr	r3, [pc, #744]	; (8001794 <Set_Random_Motion_Values+0x404>)
 80014ac:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80014ae:	f00a fed7 	bl	800c260 <rand>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4618      	mov	r0, r3
 80014b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014be:	461a      	mov	r2, r3
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	fb02 f501 	mul.w	r5, r2, r1
 80014c8:	fb00 f403 	mul.w	r4, r0, r3
 80014cc:	442c      	add	r4, r5
 80014ce:	fba0 8902 	umull	r8, r9, r0, r2
 80014d2:	eb04 0309 	add.w	r3, r4, r9
 80014d6:	4699      	mov	r9, r3
 80014d8:	4642      	mov	r2, r8
 80014da:	464b      	mov	r3, r9
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	00d9      	lsls	r1, r3, #3
 80014e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014ea:	00d0      	lsls	r0, r2, #3
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	ebb2 0108 	subs.w	r1, r2, r8
 80014f4:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80014f8:	eb63 0309 	sbc.w	r3, r3, r9
 80014fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001500:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800150c:	f7ff fba4 	bl	8000c58 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	f112 010a 	adds.w	r1, r2, #10
 8001518:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800151c:	f143 0300 	adc.w	r3, r3, #0
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001524:	4b9b      	ldr	r3, [pc, #620]	; (8001794 <Set_Random_Motion_Values+0x404>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	461a      	mov	r2, r3
 800152a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4b98      	ldr	r3, [pc, #608]	; (8001794 <Set_Random_Motion_Values+0x404>)
 8001534:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001536:	f00a fe93 	bl	800c260 <rand>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001542:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001546:	461a      	mov	r2, r3
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	fb02 f501 	mul.w	r5, r2, r1
 8001550:	fb00 f403 	mul.w	r4, r0, r3
 8001554:	442c      	add	r4, r5
 8001556:	fba0 2302 	umull	r2, r3, r0, r2
 800155a:	18e1      	adds	r1, r4, r3
 800155c:	460b      	mov	r3, r1
 800155e:	1891      	adds	r1, r2, r2
 8001560:	6539      	str	r1, [r7, #80]	; 0x50
 8001562:	415b      	adcs	r3, r3
 8001564:	657b      	str	r3, [r7, #84]	; 0x54
 8001566:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800156a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f7ff fb71 	bl	8000c58 <__aeabi_uldivmod>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800157e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001582:	f143 0300 	adc.w	r3, r3, #0
 8001586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800158a:	4b83      	ldr	r3, [pc, #524]	; (8001798 <Set_Random_Motion_Values+0x408>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001594:	4413      	add	r3, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <Set_Random_Motion_Values+0x408>)
 800159a:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800159c:	f00a fe60 	bl	800c260 <rand>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4618      	mov	r0, r3
 80015a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80015a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80015ac:	461a      	mov	r2, r3
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	fb02 f501 	mul.w	r5, r2, r1
 80015b6:	fb00 f403 	mul.w	r4, r0, r3
 80015ba:	442c      	add	r4, r5
 80015bc:	fba0 2302 	umull	r2, r3, r0, r2
 80015c0:	18e1      	adds	r1, r4, r3
 80015c2:	460b      	mov	r3, r1
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0099      	lsls	r1, r3, #2
 80015ce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80015d2:	0090      	lsls	r0, r2, #2
 80015d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	f7ff fb3c 	bl	8000c58 <__aeabi_uldivmod>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	1a14      	subs	r4, r2, r0
 80015f2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80015f6:	eb63 0301 	sbc.w	r3, r3, r1
 80015fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80015fe:	4b66      	ldr	r3, [pc, #408]	; (8001798 <Set_Random_Motion_Values+0x408>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	461a      	mov	r2, r3
 8001604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001608:	4413      	add	r3, r2
 800160a:	461a      	mov	r2, r3
 800160c:	4b62      	ldr	r3, [pc, #392]	; (8001798 <Set_Random_Motion_Values+0x408>)
 800160e:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001610:	f00a fe26 	bl	800c260 <rand>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800161c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001620:	461a      	mov	r2, r3
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	fb02 f501 	mul.w	r5, r2, r1
 800162a:	fb00 f403 	mul.w	r4, r0, r3
 800162e:	442c      	add	r4, r5
 8001630:	fba0 0102 	umull	r0, r1, r0, r2
 8001634:	1863      	adds	r3, r4, r1
 8001636:	4619      	mov	r1, r3
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	1894      	adds	r4, r2, r2
 800163e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001640:	415b      	adcs	r3, r3
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001648:	1812      	adds	r2, r2, r0
 800164a:	eb41 0303 	adc.w	r3, r1, r3
 800164e:	1891      	adds	r1, r2, r2
 8001650:	6439      	str	r1, [r7, #64]	; 0x40
 8001652:	415b      	adcs	r3, r3
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
 8001656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	f7ff faf7 	bl	8000c58 <__aeabi_uldivmod>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001672:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001676:	f143 0300 	adc.w	r3, r3, #0
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800167e:	4b46      	ldr	r3, [pc, #280]	; (8001798 <Set_Random_Motion_Values+0x408>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	461a      	mov	r2, r3
 8001684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001688:	4413      	add	r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <Set_Random_Motion_Values+0x408>)
 800168e:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001690:	f00a fde6 	bl	800c260 <rand>
 8001694:	4603      	mov	r3, r0
 8001696:	4618      	mov	r0, r3
 8001698:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800169c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80016a0:	461a      	mov	r2, r3
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	fb02 f501 	mul.w	r5, r2, r1
 80016aa:	fb00 f403 	mul.w	r4, r0, r3
 80016ae:	442c      	add	r4, r5
 80016b0:	fba0 0102 	umull	r0, r1, r0, r2
 80016b4:	1863      	adds	r3, r4, r1
 80016b6:	4619      	mov	r1, r3
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	1894      	adds	r4, r2, r2
 80016be:	63bc      	str	r4, [r7, #56]	; 0x38
 80016c0:	415b      	adcs	r3, r3
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016c8:	1814      	adds	r4, r2, r0
 80016ca:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 80016ce:	414b      	adcs	r3, r1
 80016d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80016e0:	f7ff faba 	bl	8000c58 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	1cd1      	adds	r1, r2, #3
 80016ea:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <Set_Random_Motion_Values+0x40c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001700:	4413      	add	r3, r2
 8001702:	461a      	mov	r2, r3
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <Set_Random_Motion_Values+0x40c>)
 8001706:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001708:	f00a fdaa 	bl	800c260 <rand>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001714:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001718:	461a      	mov	r2, r3
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	fb02 f501 	mul.w	r5, r2, r1
 8001722:	fb00 f403 	mul.w	r4, r0, r3
 8001726:	442c      	add	r4, r5
 8001728:	fba0 2302 	umull	r2, r3, r0, r2
 800172c:	18e1      	adds	r1, r4, r3
 800172e:	460b      	mov	r3, r1
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0099      	lsls	r1, r3, #2
 800173a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800173e:	0090      	lsls	r0, r2, #2
 8001740:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	f7ff fa86 	bl	8000c58 <__aeabi_uldivmod>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f06f 0202 	mvn.w	r2, #2
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	1a14      	subs	r4, r2, r0
 800175e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8001762:	eb63 0301 	sbc.w	r3, r3, r1
 8001766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Set_Random_Motion_Values+0x40c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001774:	4413      	add	r3, r2
 8001776:	461a      	mov	r2, r3
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <Set_Random_Motion_Values+0x40c>)
 800177a:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800177c:	f00a fd70 	bl	800c260 <rand>
 8001780:	4603      	mov	r3, r0
 8001782:	4618      	mov	r0, r3
 8001784:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001788:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800178c:	461a      	mov	r2, r3
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e005      	b.n	80017a0 <Set_Random_Motion_Values+0x410>
 8001794:	20000260 	.word	0x20000260
 8001798:	2000026c 	.word	0x2000026c
 800179c:	20000278 	.word	0x20000278
 80017a0:	fb02 f501 	mul.w	r5, r2, r1
 80017a4:	fb00 f403 	mul.w	r4, r0, r3
 80017a8:	442c      	add	r4, r5
 80017aa:	fba0 8902 	umull	r8, r9, r0, r2
 80017ae:	eb04 0309 	add.w	r3, r4, r9
 80017b2:	4699      	mov	r9, r3
 80017b4:	4642      	mov	r2, r8
 80017b6:	464b      	mov	r3, r9
 80017b8:	f04f 0000 	mov.w	r0, #0
 80017bc:	f04f 0100 	mov.w	r1, #0
 80017c0:	0099      	lsls	r1, r3, #2
 80017c2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017c6:	0090      	lsls	r0, r2, #2
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	eb12 0108 	adds.w	r1, r2, r8
 80017d0:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 80017d4:	eb43 0309 	adc.w	r3, r3, r9
 80017d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80017e8:	f7ff fa36 	bl	8000c58 <__aeabi_uldivmod>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	1cd1      	adds	r1, r2, #3
 80017f2:	67b9      	str	r1, [r7, #120]	; 0x78
 80017f4:	f143 0300 	adc.w	r3, r3, #0
 80017f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <Set_Random_Motion_Values+0x5ec>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	461a      	mov	r2, r3
 8001800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <Set_Random_Motion_Values+0x5ec>)
 8001808:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800180a:	f00a fd29 	bl	800c260 <rand>
 800180e:	4603      	mov	r3, r0
 8001810:	4618      	mov	r0, r3
 8001812:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001816:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800181a:	461a      	mov	r2, r3
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	fb02 f501 	mul.w	r5, r2, r1
 8001824:	fb00 f403 	mul.w	r4, r0, r3
 8001828:	442c      	add	r4, r5
 800182a:	fba0 0102 	umull	r0, r1, r0, r2
 800182e:	1863      	adds	r3, r4, r1
 8001830:	4619      	mov	r1, r3
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	1894      	adds	r4, r2, r2
 8001838:	633c      	str	r4, [r7, #48]	; 0x30
 800183a:	415b      	adcs	r3, r3
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
 800183e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001842:	1814      	adds	r4, r2, r0
 8001844:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8001848:	414b      	adcs	r3, r1
 800184a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800184e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800185a:	f7ff f9fd 	bl	8000c58 <__aeabi_uldivmod>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001866:	6739      	str	r1, [r7, #112]	; 0x70
 8001868:	f143 0300 	adc.w	r3, r3, #0
 800186c:	677b      	str	r3, [r7, #116]	; 0x74
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <Set_Random_Motion_Values+0x5f0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <Set_Random_Motion_Values+0x5f0>)
 800187c:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800187e:	f00a fcef 	bl	800c260 <rand>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800188a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800188e:	461a      	mov	r2, r3
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	fb02 f501 	mul.w	r5, r2, r1
 8001898:	fb00 f403 	mul.w	r4, r0, r3
 800189c:	192e      	adds	r6, r5, r4
 800189e:	fba0 4502 	umull	r4, r5, r0, r2
 80018a2:	1973      	adds	r3, r6, r5
 80018a4:	461d      	mov	r5, r3
 80018a6:	4622      	mov	r2, r4
 80018a8:	462b      	mov	r3, r5
 80018aa:	f04f 0000 	mov.w	r0, #0
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	0099      	lsls	r1, r3, #2
 80018b4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80018b8:	0090      	lsls	r0, r2, #2
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	1911      	adds	r1, r2, r4
 80018c0:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 80018c4:	416b      	adcs	r3, r5
 80018c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80018ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80018d6:	f7ff f9bf 	bl	8000c58 <__aeabi_uldivmod>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80018e2:	66b9      	str	r1, [r7, #104]	; 0x68
 80018e4:	f143 0300 	adc.w	r3, r3, #0
 80018e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <Set_Random_Motion_Values+0x5f0>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	461a      	mov	r2, r3
 80018f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018f2:	4413      	add	r3, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <Set_Random_Motion_Values+0x5f0>)
 80018f8:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80018fa:	f00a fcb1 	bl	800c260 <rand>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001906:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800190a:	461a      	mov	r2, r3
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	fb02 f501 	mul.w	r5, r2, r1
 8001914:	fb00 f403 	mul.w	r4, r0, r3
 8001918:	192e      	adds	r6, r5, r4
 800191a:	fba0 4502 	umull	r4, r5, r0, r2
 800191e:	1973      	adds	r3, r6, r5
 8001920:	461d      	mov	r5, r3
 8001922:	4622      	mov	r2, r4
 8001924:	462b      	mov	r3, r5
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	00d9      	lsls	r1, r3, #3
 8001930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001934:	00d0      	lsls	r0, r2, #3
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	1b11      	subs	r1, r2, r4
 800193c:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8001940:	eb63 0305 	sbc.w	r3, r3, r5
 8001944:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001948:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001954:	f7ff f980 	bl	8000c58 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001960:	6639      	str	r1, [r7, #96]	; 0x60
 8001962:	f143 0300 	adc.w	r3, r3, #0
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <Set_Random_Motion_Values+0x5f0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	461a      	mov	r2, r3
 800196e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	461a      	mov	r2, r3
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <Set_Random_Motion_Values+0x5f0>)
 8001976:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8001978:	e31b      	b.n	8001fb2 <Set_Random_Motion_Values+0xc22>
 800197a:	bf00      	nop
 800197c:	20000278 	.word	0x20000278
 8001980:	20000284 	.word	0x20000284
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001984:	f00a fc6c 	bl	800c260 <rand>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001990:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001994:	461a      	mov	r2, r3
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	fb02 f501 	mul.w	r5, r2, r1
 800199e:	fb00 f403 	mul.w	r4, r0, r3
 80019a2:	442c      	add	r4, r5
 80019a4:	fba0 0102 	umull	r0, r1, r0, r2
 80019a8:	1863      	adds	r3, r4, r1
 80019aa:	4619      	mov	r1, r3
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	1894      	adds	r4, r2, r2
 80019b2:	62bc      	str	r4, [r7, #40]	; 0x28
 80019b4:	415b      	adcs	r3, r3
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019bc:	eb12 0800 	adds.w	r8, r2, r0
 80019c0:	eb43 0901 	adc.w	r9, r3, r1
 80019c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	4640      	mov	r0, r8
 80019ce:	4649      	mov	r1, r9
 80019d0:	f7ff f942 	bl	8000c58 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f06f 0209 	mvn.w	r2, #9
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	1a14      	subs	r4, r2, r0
 80019e6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80019ea:	eb63 0301 	sbc.w	r3, r3, r1
 80019ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80019f2:	4be6      	ldr	r3, [pc, #920]	; (8001d8c <Set_Random_Motion_Values+0x9fc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019fc:	4413      	add	r3, r2
 80019fe:	461a      	mov	r2, r3
 8001a00:	4be2      	ldr	r3, [pc, #904]	; (8001d8c <Set_Random_Motion_Values+0x9fc>)
 8001a02:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001a04:	f00a fc2c 	bl	800c260 <rand>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001a10:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001a14:	461a      	mov	r2, r3
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	fb02 f501 	mul.w	r5, r2, r1
 8001a1e:	fb00 f403 	mul.w	r4, r0, r3
 8001a22:	442c      	add	r4, r5
 8001a24:	fba0 8902 	umull	r8, r9, r0, r2
 8001a28:	eb04 0309 	add.w	r3, r4, r9
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	4642      	mov	r2, r8
 8001a30:	464b      	mov	r3, r9
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001a40:	0090      	lsls	r0, r2, #2
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	eb12 0108 	adds.w	r1, r2, r8
 8001a4a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8001a4e:	eb43 0309 	adc.w	r3, r3, r9
 8001a52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001a56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001a62:	f7ff f8f9 	bl	8000c58 <__aeabi_uldivmod>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	f112 010a 	adds.w	r1, r2, #10
 8001a6e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001a72:	f143 0300 	adc.w	r3, r3, #0
 8001a76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a7a:	4bc4      	ldr	r3, [pc, #784]	; (8001d8c <Set_Random_Motion_Values+0x9fc>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a84:	4413      	add	r3, r2
 8001a86:	461a      	mov	r2, r3
 8001a88:	4bc0      	ldr	r3, [pc, #768]	; (8001d8c <Set_Random_Motion_Values+0x9fc>)
 8001a8a:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001a8c:	f00a fbe8 	bl	800c260 <rand>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001a98:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	fb02 f501 	mul.w	r5, r2, r1
 8001aa6:	fb00 f403 	mul.w	r4, r0, r3
 8001aaa:	442c      	add	r4, r5
 8001aac:	fba0 8902 	umull	r8, r9, r0, r2
 8001ab0:	eb04 0309 	add.w	r3, r4, r9
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	464b      	mov	r3, r9
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	00d9      	lsls	r1, r3, #3
 8001ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac8:	00d0      	lsls	r0, r2, #3
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	ebb2 0108 	subs.w	r1, r2, r8
 8001ad2:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8001ad6:	eb63 0309 	sbc.w	r3, r3, r9
 8001ada:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ade:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001aea:	f7ff f8b5 	bl	8000c58 <__aeabi_uldivmod>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f06f 0209 	mvn.w	r2, #9
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	1a14      	subs	r4, r2, r0
 8001b00:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8001b04:	eb63 0301 	sbc.w	r3, r3, r1
 8001b08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001b0c:	4b9f      	ldr	r3, [pc, #636]	; (8001d8c <Set_Random_Motion_Values+0x9fc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	461a      	mov	r2, r3
 8001b12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b16:	4413      	add	r3, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b9c      	ldr	r3, [pc, #624]	; (8001d8c <Set_Random_Motion_Values+0x9fc>)
 8001b1c:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001b1e:	f00a fb9f 	bl	800c260 <rand>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4618      	mov	r0, r3
 8001b26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b2a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	fb02 f501 	mul.w	r5, r2, r1
 8001b38:	fb00 f403 	mul.w	r4, r0, r3
 8001b3c:	442c      	add	r4, r5
 8001b3e:	fba0 2302 	umull	r2, r3, r0, r2
 8001b42:	18e1      	adds	r1, r4, r3
 8001b44:	460b      	mov	r3, r1
 8001b46:	1891      	adds	r1, r2, r2
 8001b48:	6239      	str	r1, [r7, #32]
 8001b4a:	415b      	adcs	r3, r3
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	f7ff f87d 	bl	8000c58 <__aeabi_uldivmod>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	1a14      	subs	r4, r2, r0
 8001b70:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8001b74:	eb63 0301 	sbc.w	r3, r3, r1
 8001b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <Set_Random_Motion_Values+0xa00>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b86:	4413      	add	r3, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <Set_Random_Motion_Values+0xa00>)
 8001b8c:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001b8e:	f00a fb67 	bl	800c260 <rand>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4618      	mov	r0, r3
 8001b96:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	fb02 f501 	mul.w	r5, r2, r1
 8001ba8:	fb00 f403 	mul.w	r4, r0, r3
 8001bac:	442c      	add	r4, r5
 8001bae:	fba0 2302 	umull	r2, r3, r0, r2
 8001bb2:	18e1      	adds	r1, r4, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	0099      	lsls	r1, r3, #2
 8001bc0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bc4:	0090      	lsls	r0, r2, #2
 8001bc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f7ff f843 	bl	8000c58 <__aeabi_uldivmod>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001bda:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001bde:	f143 0300 	adc.w	r3, r3, #0
 8001be2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001be6:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <Set_Random_Motion_Values+0xa00>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bf0:	4413      	add	r3, r2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <Set_Random_Motion_Values+0xa00>)
 8001bf6:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001bf8:	f00a fb32 	bl	800c260 <rand>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c04:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	fb02 f501 	mul.w	r5, r2, r1
 8001c12:	fb00 f403 	mul.w	r4, r0, r3
 8001c16:	442c      	add	r4, r5
 8001c18:	fba0 0102 	umull	r0, r1, r0, r2
 8001c1c:	1863      	adds	r3, r4, r1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	1894      	adds	r4, r2, r2
 8001c26:	61bc      	str	r4, [r7, #24]
 8001c28:	415b      	adcs	r3, r3
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c30:	1812      	adds	r2, r2, r0
 8001c32:	eb41 0303 	adc.w	r3, r1, r3
 8001c36:	1891      	adds	r1, r2, r2
 8001c38:	6139      	str	r1, [r7, #16]
 8001c3a:	415b      	adcs	r3, r3
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	f7ff f803 	bl	8000c58 <__aeabi_uldivmod>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	1a14      	subs	r4, r2, r0
 8001c64:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8001c68:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <Set_Random_Motion_Values+0xa00>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	461a      	mov	r2, r3
 8001c76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c7a:	4413      	add	r3, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <Set_Random_Motion_Values+0xa00>)
 8001c80:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c82:	f00a faed 	bl	800c260 <rand>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c8e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c92:	461a      	mov	r2, r3
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	fb02 f501 	mul.w	r5, r2, r1
 8001c9c:	fb00 f403 	mul.w	r4, r0, r3
 8001ca0:	442c      	add	r4, r5
 8001ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8001ca6:	eb04 0309 	add.w	r3, r4, r9
 8001caa:	4699      	mov	r9, r3
 8001cac:	4642      	mov	r2, r8
 8001cae:	464b      	mov	r3, r9
 8001cb0:	f04f 0000 	mov.w	r0, #0
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	00d9      	lsls	r1, r3, #3
 8001cba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cbe:	00d0      	lsls	r0, r2, #3
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	ebb2 0108 	subs.w	r1, r2, r8
 8001cc8:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8001ccc:	eb63 0309 	sbc.w	r3, r3, r9
 8001cd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cd4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001ce0:	f7fe ffba 	bl	8000c58 <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	1a14      	subs	r4, r2, r0
 8001cf6:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <Set_Random_Motion_Values+0xa04>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d0c:	4413      	add	r3, r2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <Set_Random_Motion_Values+0xa04>)
 8001d12:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001d14:	f00a faa4 	bl	800c260 <rand>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001d24:	461a      	mov	r2, r3
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	fb02 f501 	mul.w	r5, r2, r1
 8001d2e:	fb00 f403 	mul.w	r4, r0, r3
 8001d32:	442c      	add	r4, r5
 8001d34:	fba0 8902 	umull	r8, r9, r0, r2
 8001d38:	eb04 0309 	add.w	r3, r4, r9
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	4642      	mov	r2, r8
 8001d40:	464b      	mov	r3, r9
 8001d42:	f04f 0000 	mov.w	r0, #0
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	00d9      	lsls	r1, r3, #3
 8001d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d50:	00d0      	lsls	r0, r2, #3
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	eb12 0108 	adds.w	r1, r2, r8
 8001d5a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8001d5e:	eb43 0309 	adc.w	r3, r3, r9
 8001d62:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001d66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001d72:	f7fe ff71 	bl	8000c58 <__aeabi_uldivmod>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	1cd1      	adds	r1, r2, #3
 8001d7c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8001d80:	f143 0300 	adc.w	r3, r3, #0
 8001d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d88:	e006      	b.n	8001d98 <Set_Random_Motion_Values+0xa08>
 8001d8a:	bf00      	nop
 8001d8c:	20000260 	.word	0x20000260
 8001d90:	2000026c 	.word	0x2000026c
 8001d94:	20000278 	.word	0x20000278
 8001d98:	4b89      	ldr	r3, [pc, #548]	; (8001fc0 <Set_Random_Motion_Values+0xc30>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001da2:	4413      	add	r3, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b86      	ldr	r3, [pc, #536]	; (8001fc0 <Set_Random_Motion_Values+0xc30>)
 8001da8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001daa:	f00a fa59 	bl	800c260 <rand>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4618      	mov	r0, r3
 8001db2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001db6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	fb02 f501 	mul.w	r5, r2, r1
 8001dc4:	fb00 f403 	mul.w	r4, r0, r3
 8001dc8:	442c      	add	r4, r5
 8001dca:	fba0 0102 	umull	r0, r1, r0, r2
 8001dce:	1863      	adds	r3, r4, r1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	1894      	adds	r4, r2, r2
 8001dd8:	60bc      	str	r4, [r7, #8]
 8001dda:	415b      	adcs	r3, r3
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de2:	1814      	adds	r4, r2, r0
 8001de4:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8001de8:	414b      	adcs	r3, r1
 8001dea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001dee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001dfa:	f7fe ff2d 	bl	8000c58 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f06f 0202 	mvn.w	r2, #2
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	1a14      	subs	r4, r2, r0
 8001e10:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8001e14:	eb63 0301 	sbc.w	r3, r3, r1
 8001e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <Set_Random_Motion_Values+0xc30>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	461a      	mov	r2, r3
 8001e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e26:	4413      	add	r3, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <Set_Random_Motion_Values+0xc30>)
 8001e2c:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001e2e:	f00a fa17 	bl	800c260 <rand>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4618      	mov	r0, r3
 8001e36:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	fb02 f501 	mul.w	r5, r2, r1
 8001e48:	fb00 f403 	mul.w	r4, r0, r3
 8001e4c:	442c      	add	r4, r5
 8001e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8001e52:	eb04 0309 	add.w	r3, r4, r9
 8001e56:	4699      	mov	r9, r3
 8001e58:	4642      	mov	r2, r8
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	00d9      	lsls	r1, r3, #3
 8001e66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e6a:	00d0      	lsls	r0, r2, #3
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	ebb2 0108 	subs.w	r1, r2, r8
 8001e74:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8001e78:	eb63 0309 	sbc.w	r3, r3, r9
 8001e7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001e80:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001e8c:	f7fe fee4 	bl	8000c58 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 8001e98:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001e9c:	f143 0300 	adc.w	r3, r3, #0
 8001ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <Set_Random_Motion_Values+0xc34>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eae:	4413      	add	r3, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <Set_Random_Motion_Values+0xc34>)
 8001eb4:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001eb6:	f00a f9d3 	bl	800c260 <rand>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ec2:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	fb00 f503 	mul.w	r5, r0, r3
 8001ed0:	fb02 f401 	mul.w	r4, r2, r1
 8001ed4:	442c      	add	r4, r5
 8001ed6:	fba2 0100 	umull	r0, r1, r2, r0
 8001eda:	1863      	adds	r3, r4, r1
 8001edc:	4619      	mov	r1, r3
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	1894      	adds	r4, r2, r2
 8001ee4:	603c      	str	r4, [r7, #0]
 8001ee6:	415b      	adcs	r3, r3
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eee:	1814      	adds	r4, r2, r0
 8001ef0:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8001ef4:	414b      	adcs	r3, r1
 8001ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001efa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001f06:	f7fe fea7 	bl	8000c58 <__aeabi_uldivmod>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 8001f12:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001f16:	f143 0300 	adc.w	r3, r3, #0
 8001f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <Set_Random_Motion_Values+0xc34>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <Set_Random_Motion_Values+0xc34>)
 8001f2e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001f30:	f00a f996 	bl	800c260 <rand>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001f40:	461a      	mov	r2, r3
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	fb02 f501 	mul.w	r5, r2, r1
 8001f4a:	fb00 f403 	mul.w	r4, r0, r3
 8001f4e:	192e      	adds	r6, r5, r4
 8001f50:	fba0 4502 	umull	r4, r5, r0, r2
 8001f54:	1973      	adds	r3, r6, r5
 8001f56:	461d      	mov	r5, r3
 8001f58:	4622      	mov	r2, r4
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	0099      	lsls	r1, r3, #2
 8001f66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f6a:	0090      	lsls	r0, r2, #2
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	1911      	adds	r1, r2, r4
 8001f72:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8001f76:	416b      	adcs	r3, r5
 8001f78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001f88:	f7fe fe66 	bl	8000c58 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	f112 010a 	adds.w	r1, r2, #10
 8001f94:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001f98:	f143 0300 	adc.w	r3, r3, #0
 8001f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <Set_Random_Motion_Values+0xc34>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <Set_Random_Motion_Values+0xc34>)
 8001fb0:	609a      	str	r2, [r3, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000278 	.word	0x20000278
 8001fc4:	20000284 	.word	0x20000284

08001fc8 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001fcc:	4b6e      	ldr	r3, [pc, #440]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b6e      	ldr	r3, [pc, #440]	; (800218c <Reset_Motion_Values+0x1c4>)
 8001fd2:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd6:	11d9      	asrs	r1, r3, #7
 8001fd8:	17d3      	asrs	r3, r2, #31
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <Reset_Motion_Values+0x2a>
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	425b      	negs	r3, r3
 8001ff0:	e000      	b.n	8001ff4 <Reset_Motion_Values+0x2c>
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	4a64      	ldr	r2, [pc, #400]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8001ff6:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4b63      	ldr	r3, [pc, #396]	; (800218c <Reset_Motion_Values+0x1c4>)
 8001ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8002002:	11d9      	asrs	r1, r3, #7
 8002004:	17d3      	asrs	r3, r2, #31
 8002006:	1acb      	subs	r3, r1, r3
 8002008:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <Reset_Motion_Values+0x56>
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	425b      	negs	r3, r3
 800201c:	e001      	b.n	8002022 <Reset_Motion_Values+0x5a>
 800201e:	f06f 0309 	mvn.w	r3, #9
 8002022:	4a59      	ldr	r2, [pc, #356]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8002024:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8002026:	4b58      	ldr	r3, [pc, #352]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <Reset_Motion_Values+0x1c4>)
 800202c:	fb83 1302 	smull	r1, r3, r3, r2
 8002030:	11d9      	asrs	r1, r3, #7
 8002032:	17d3      	asrs	r3, r2, #31
 8002034:	1acb      	subs	r3, r1, r3
 8002036:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <Reset_Motion_Values+0x84>
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	425b      	negs	r3, r3
 800204a:	e000      	b.n	800204e <Reset_Motion_Values+0x86>
 800204c:	230a      	movs	r3, #10
 800204e:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <Reset_Motion_Values+0x1c0>)
 8002050:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8002052:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <Reset_Motion_Values+0x1c8>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b4d      	ldr	r3, [pc, #308]	; (800218c <Reset_Motion_Values+0x1c4>)
 8002058:	fb83 1302 	smull	r1, r3, r3, r2
 800205c:	11d9      	asrs	r1, r3, #7
 800205e:	17d3      	asrs	r3, r2, #31
 8002060:	1acb      	subs	r3, r1, r3
 8002062:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <Reset_Motion_Values+0xb0>
 8002070:	4b47      	ldr	r3, [pc, #284]	; (8002190 <Reset_Motion_Values+0x1c8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	425b      	negs	r3, r3
 8002076:	e000      	b.n	800207a <Reset_Motion_Values+0xb2>
 8002078:	2364      	movs	r3, #100	; 0x64
 800207a:	4a45      	ldr	r2, [pc, #276]	; (8002190 <Reset_Motion_Values+0x1c8>)
 800207c:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800207e:	4b44      	ldr	r3, [pc, #272]	; (8002190 <Reset_Motion_Values+0x1c8>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4b42      	ldr	r3, [pc, #264]	; (800218c <Reset_Motion_Values+0x1c4>)
 8002084:	fb83 1302 	smull	r1, r3, r3, r2
 8002088:	11d9      	asrs	r1, r3, #7
 800208a:	17d3      	asrs	r3, r2, #31
 800208c:	1acb      	subs	r3, r1, r3
 800208e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <Reset_Motion_Values+0xdc>
 800209c:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <Reset_Motion_Values+0x1c8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	425b      	negs	r3, r3
 80020a2:	e001      	b.n	80020a8 <Reset_Motion_Values+0xe0>
 80020a4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80020a8:	4a39      	ldr	r2, [pc, #228]	; (8002190 <Reset_Motion_Values+0x1c8>)
 80020aa:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <Reset_Motion_Values+0x1c8>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <Reset_Motion_Values+0x1c4>)
 80020b2:	fb83 1302 	smull	r1, r3, r3, r2
 80020b6:	11d9      	asrs	r1, r3, #7
 80020b8:	17d3      	asrs	r3, r2, #31
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <Reset_Motion_Values+0x10a>
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <Reset_Motion_Values+0x1c8>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	425b      	negs	r3, r3
 80020d0:	e000      	b.n	80020d4 <Reset_Motion_Values+0x10c>
 80020d2:	2364      	movs	r3, #100	; 0x64
 80020d4:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <Reset_Motion_Values+0x1c8>)
 80020d6:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <Reset_Motion_Values+0x1c8>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <Reset_Motion_Values+0x1c4>)
 80020de:	fb83 1302 	smull	r1, r3, r3, r2
 80020e2:	11d9      	asrs	r1, r3, #7
 80020e4:	17d3      	asrs	r3, r2, #31
 80020e6:	1acb      	subs	r3, r1, r3
 80020e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <Reset_Motion_Values+0x136>
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <Reset_Motion_Values+0x1cc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	425b      	negs	r3, r3
 80020fc:	e000      	b.n	8002100 <Reset_Motion_Values+0x138>
 80020fe:	2303      	movs	r3, #3
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <Reset_Motion_Values+0x1cc>)
 8002102:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <Reset_Motion_Values+0x1c8>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <Reset_Motion_Values+0x1c4>)
 800210a:	fb83 1302 	smull	r1, r3, r3, r2
 800210e:	11d9      	asrs	r1, r3, #7
 8002110:	17d3      	asrs	r3, r2, #31
 8002112:	1acb      	subs	r3, r1, r3
 8002114:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <Reset_Motion_Values+0x162>
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <Reset_Motion_Values+0x1cc>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	425b      	negs	r3, r3
 8002128:	e001      	b.n	800212e <Reset_Motion_Values+0x166>
 800212a:	f06f 0302 	mvn.w	r3, #2
 800212e:	4a19      	ldr	r2, [pc, #100]	; (8002194 <Reset_Motion_Values+0x1cc>)
 8002130:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <Reset_Motion_Values+0x1c8>)
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <Reset_Motion_Values+0x1c4>)
 8002138:	fb83 1302 	smull	r1, r3, r3, r2
 800213c:	11d9      	asrs	r1, r3, #7
 800213e:	17d3      	asrs	r3, r2, #31
 8002140:	1acb      	subs	r3, r1, r3
 8002142:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <Reset_Motion_Values+0x190>
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <Reset_Motion_Values+0x1cc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	425b      	negs	r3, r3
 8002156:	e000      	b.n	800215a <Reset_Motion_Values+0x192>
 8002158:	2303      	movs	r3, #3
 800215a:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <Reset_Motion_Values+0x1cc>)
 800215c:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <Reset_Motion_Values+0x1d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	425b      	negs	r3, r3
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <Reset_Motion_Values+0x1d0>)
 8002166:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <Reset_Motion_Values+0x1d0>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	425b      	negs	r3, r3
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <Reset_Motion_Values+0x1d0>)
 8002170:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <Reset_Motion_Values+0x1d0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	425b      	negs	r3, r3
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <Reset_Motion_Values+0x1d0>)
 800217a:	6093      	str	r3, [r2, #8]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000260 	.word	0x20000260
 800218c:	10624dd3 	.word	0x10624dd3
 8002190:	2000026c 	.word	0x2000026c
 8002194:	20000278 	.word	0x20000278
 8002198:	20000284 	.word	0x20000284

0800219c <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 80021a6:	f107 0410 	add.w	r4, r7, #16
 80021aa:	f107 0215 	add.w	r2, r7, #21
 80021ae:	f107 0112 	add.w	r1, r7, #18
 80021b2:	f107 0016 	add.w	r0, r7, #22
 80021b6:	f107 030e 	add.w	r3, r7, #14
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4623      	mov	r3, r4
 80021be:	f008 f8e0 	bl	800a382 <hci_read_local_version_information>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d126      	bne.n	800221a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80021cc:	8a7b      	ldrh	r3, [r7, #18]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80021d8:	8a7b      	ldrh	r3, [r7, #18]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b29a      	uxth	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b21a      	sxth	r2, r3
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	b21b      	sxth	r3, r3
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21b      	sxth	r3, r3
 8002214:	b29a      	uxth	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <BSP_PB_Callback+0x1c>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	20000250 	.word	0x20000250

08002244 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4604      	mov	r4, r0
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4623      	mov	r3, r4
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	4603      	mov	r3, r0
 8002258:	80bb      	strh	r3, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	71bb      	strb	r3, [r7, #6]
 800225e:	4613      	mov	r3, r2
 8002260:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <hci_le_connection_complete_event+0x38>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  connection_handle = Connection_Handle;
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <hci_le_connection_complete_event+0x3c>)
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	8013      	strh	r3, [r2, #0]

  BSP_LED_Off(LED2); //activity led
 800226e:	2000      	movs	r0, #0
 8002270:	f004 fa5a 	bl	8006728 <BSP_LED_Off>
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	2000025c 	.word	0x2000025c
 8002280:	20000258 	.word	0x20000258

08002284 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 3;
 800228a:	2303      	movs	r3, #3
 800228c:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	461a      	mov	r2, r3
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	4413      	add	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800229c:	231b      	movs	r3, #27
 800229e:	713b      	strb	r3, [r7, #4]
 80022a0:	23c5      	movs	r3, #197	; 0xc5
 80022a2:	717b      	strb	r3, [r7, #5]
 80022a4:	23d5      	movs	r3, #213	; 0xd5
 80022a6:	71bb      	strb	r3, [r7, #6]
 80022a8:	23a5      	movs	r3, #165	; 0xa5
 80022aa:	71fb      	strb	r3, [r7, #7]
 80022ac:	2302      	movs	r3, #2
 80022ae:	723b      	strb	r3, [r7, #8]
 80022b0:	2300      	movs	r3, #0
 80022b2:	727b      	strb	r3, [r7, #9]
 80022b4:	23b4      	movs	r3, #180	; 0xb4
 80022b6:	72bb      	strb	r3, [r7, #10]
 80022b8:	239a      	movs	r3, #154	; 0x9a
 80022ba:	72fb      	strb	r3, [r7, #11]
 80022bc:	23e1      	movs	r3, #225	; 0xe1
 80022be:	733b      	strb	r3, [r7, #12]
 80022c0:	2311      	movs	r3, #17
 80022c2:	737b      	strb	r3, [r7, #13]
 80022c4:	2301      	movs	r3, #1
 80022c6:	73bb      	strb	r3, [r7, #14]
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	2300      	movs	r3, #0
 80022ce:	743b      	strb	r3, [r7, #16]
 80022d0:	2300      	movs	r3, #0
 80022d2:	747b      	strb	r3, [r7, #17]
 80022d4:	2300      	movs	r3, #0
 80022d6:	74bb      	strb	r3, [r7, #18]
 80022d8:	2300      	movs	r3, #0
 80022da:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80022dc:	4b54      	ldr	r3, [pc, #336]	; (8002430 <Add_HWServW2ST_Service+0x1ac>)
 80022de:	461d      	mov	r5, r3
 80022e0:	1d3c      	adds	r4, r7, #4
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	6028      	str	r0, [r5, #0]
 80022e6:	6069      	str	r1, [r5, #4]
 80022e8:	60aa      	str	r2, [r5, #8]
 80022ea:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80022ec:	7dbb      	ldrb	r3, [r7, #22]
 80022ee:	4a51      	ldr	r2, [pc, #324]	; (8002434 <Add_HWServW2ST_Service+0x1b0>)
 80022f0:	9200      	str	r2, [sp, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	494e      	ldr	r1, [pc, #312]	; (8002430 <Add_HWServW2ST_Service+0x1ac>)
 80022f6:	2002      	movs	r0, #2
 80022f8:	f008 fb99 	bl	800aa2e <aci_gatt_add_service>
 80022fc:	4603      	mov	r3, r0
 80022fe:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002300:	7d7b      	ldrb	r3, [r7, #21]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <Add_HWServW2ST_Service+0x86>
    return BLE_STATUS_ERROR;
 8002306:	2347      	movs	r3, #71	; 0x47
 8002308:	e08e      	b.n	8002428 <Add_HWServW2ST_Service+0x1a4>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 800230a:	231b      	movs	r3, #27
 800230c:	713b      	strb	r3, [r7, #4]
 800230e:	23c5      	movs	r3, #197	; 0xc5
 8002310:	717b      	strb	r3, [r7, #5]
 8002312:	23d5      	movs	r3, #213	; 0xd5
 8002314:	71bb      	strb	r3, [r7, #6]
 8002316:	23a5      	movs	r3, #165	; 0xa5
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	2302      	movs	r3, #2
 800231c:	723b      	strb	r3, [r7, #8]
 800231e:	2300      	movs	r3, #0
 8002320:	727b      	strb	r3, [r7, #9]
 8002322:	2336      	movs	r3, #54	; 0x36
 8002324:	72bb      	strb	r3, [r7, #10]
 8002326:	23ac      	movs	r3, #172	; 0xac
 8002328:	72fb      	strb	r3, [r7, #11]
 800232a:	23e1      	movs	r3, #225	; 0xe1
 800232c:	733b      	strb	r3, [r7, #12]
 800232e:	2311      	movs	r3, #17
 8002330:	737b      	strb	r3, [r7, #13]
 8002332:	2301      	movs	r3, #1
 8002334:	73bb      	strb	r3, [r7, #14]
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	2300      	movs	r3, #0
 800233c:	743b      	strb	r3, [r7, #16]
 800233e:	2300      	movs	r3, #0
 8002340:	747b      	strb	r3, [r7, #17]
 8002342:	2300      	movs	r3, #0
 8002344:	74bb      	strb	r3, [r7, #18]
 8002346:	2300      	movs	r3, #0
 8002348:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 800234a:	7cbb      	ldrb	r3, [r7, #18]
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	b2db      	uxtb	r3, r3
 8002352:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002354:	7cbb      	ldrb	r3, [r7, #18]
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	b2db      	uxtb	r3, r3
 800235c:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <Add_HWServW2ST_Service+0x1b4>)
 8002360:	461d      	mov	r5, r3
 8002362:	1d3c      	adds	r4, r7, #4
 8002364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002366:	6028      	str	r0, [r5, #0]
 8002368:	6069      	str	r1, [r5, #4]
 800236a:	60aa      	str	r2, [r5, #8]
 800236c:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <Add_HWServW2ST_Service+0x1b0>)
 8002370:	8818      	ldrh	r0, [r3, #0]
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <Add_HWServW2ST_Service+0x1b8>)
 8002374:	9305      	str	r3, [sp, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	9304      	str	r3, [sp, #16]
 800237a:	2310      	movs	r3, #16
 800237c:	9303      	str	r3, [sp, #12]
 800237e:	2302      	movs	r3, #2
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	2300      	movs	r3, #0
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	2310      	movs	r3, #16
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2308      	movs	r3, #8
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <Add_HWServW2ST_Service+0x1b4>)
 800238e:	2102      	movs	r1, #2
 8002390:	f008 fbfc 	bl	800ab8c <aci_gatt_add_char>
 8002394:	4603      	mov	r3, r0
 8002396:	757b      	strb	r3, [r7, #21]
                           2+2+4,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
						   GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002398:	7d7b      	ldrb	r3, [r7, #21]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <Add_HWServW2ST_Service+0x11e>
    return BLE_STATUS_ERROR;
 800239e:	2347      	movs	r3, #71	; 0x47
 80023a0:	e042      	b.n	8002428 <Add_HWServW2ST_Service+0x1a4>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80023a2:	231b      	movs	r3, #27
 80023a4:	713b      	strb	r3, [r7, #4]
 80023a6:	23c5      	movs	r3, #197	; 0xc5
 80023a8:	717b      	strb	r3, [r7, #5]
 80023aa:	23d5      	movs	r3, #213	; 0xd5
 80023ac:	71bb      	strb	r3, [r7, #6]
 80023ae:	23a5      	movs	r3, #165	; 0xa5
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	2302      	movs	r3, #2
 80023b4:	723b      	strb	r3, [r7, #8]
 80023b6:	2300      	movs	r3, #0
 80023b8:	727b      	strb	r3, [r7, #9]
 80023ba:	2336      	movs	r3, #54	; 0x36
 80023bc:	72bb      	strb	r3, [r7, #10]
 80023be:	23ac      	movs	r3, #172	; 0xac
 80023c0:	72fb      	strb	r3, [r7, #11]
 80023c2:	23e1      	movs	r3, #225	; 0xe1
 80023c4:	733b      	strb	r3, [r7, #12]
 80023c6:	2311      	movs	r3, #17
 80023c8:	737b      	strb	r3, [r7, #13]
 80023ca:	2301      	movs	r3, #1
 80023cc:	73bb      	strb	r3, [r7, #14]
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	2300      	movs	r3, #0
 80023d4:	743b      	strb	r3, [r7, #16]
 80023d6:	2300      	movs	r3, #0
 80023d8:	747b      	strb	r3, [r7, #17]
 80023da:	23e0      	movs	r3, #224	; 0xe0
 80023dc:	74bb      	strb	r3, [r7, #18]
 80023de:	2300      	movs	r3, #0
 80023e0:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <Add_HWServW2ST_Service+0x1b4>)
 80023e4:	461d      	mov	r5, r3
 80023e6:	1d3c      	adds	r4, r7, #4
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	6028      	str	r0, [r5, #0]
 80023ec:	6069      	str	r1, [r5, #4]
 80023ee:	60aa      	str	r2, [r5, #8]
 80023f0:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <Add_HWServW2ST_Service+0x1b0>)
 80023f4:	8818      	ldrh	r0, [r3, #0]
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <Add_HWServW2ST_Service+0x1bc>)
 80023f8:	9305      	str	r3, [sp, #20]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9304      	str	r3, [sp, #16]
 80023fe:	2310      	movs	r3, #16
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	2304      	movs	r3, #4
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2300      	movs	r3, #0
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2310      	movs	r3, #16
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2314      	movs	r3, #20
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <Add_HWServW2ST_Service+0x1b4>)
 8002412:	2102      	movs	r1, #2
 8002414:	f008 fbba 	bl	800ab8c <aci_gatt_add_char>
 8002418:	4603      	mov	r3, r0
 800241a:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800241c:	7d7b      	ldrb	r3, [r7, #21]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <Add_HWServW2ST_Service+0x1a2>
    return BLE_STATUS_ERROR;
 8002422:	2347      	movs	r3, #71	; 0x47
 8002424:	e000      	b.n	8002428 <Add_HWServW2ST_Service+0x1a4>


  return BLE_STATUS_SUCCESS;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bdb0      	pop	{r4, r5, r7, pc}
 8002430:	20000994 	.word	0x20000994
 8002434:	2000098c 	.word	0x2000098c
 8002438:	20000974 	.word	0x20000974
 800243c:	20000966 	.word	0x20000966
 8002440:	2000098e 	.word	0x2000098e

08002444 <Add_TempHumi_Service>:
 *  CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 1, &RXCharHandle);
 *
 */
tBleStatus Add_TempHumi_Service(void)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	461a      	mov	r2, r3
 8002452:	0052      	lsls	r2, r2, #1
 8002454:	4413      	add	r3, r2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	75bb      	strb	r3, [r7, #22]

  /* add TEMP_HUMI_W2ST service */
  COPY_TEMP_HUMI_W2ST_SERVICE_UUID(uuid);
 800245c:	23fb      	movs	r3, #251	; 0xfb
 800245e:	713b      	strb	r3, [r7, #4]
 8002460:	2334      	movs	r3, #52	; 0x34
 8002462:	717b      	strb	r3, [r7, #5]
 8002464:	239b      	movs	r3, #155	; 0x9b
 8002466:	71bb      	strb	r3, [r7, #6]
 8002468:	235f      	movs	r3, #95	; 0x5f
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	723b      	strb	r3, [r7, #8]
 8002470:	2300      	movs	r3, #0
 8002472:	727b      	strb	r3, [r7, #9]
 8002474:	2300      	movs	r3, #0
 8002476:	72bb      	strb	r3, [r7, #10]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	72fb      	strb	r3, [r7, #11]
 800247c:	2300      	movs	r3, #0
 800247e:	733b      	strb	r3, [r7, #12]
 8002480:	2310      	movs	r3, #16
 8002482:	737b      	strb	r3, [r7, #13]
 8002484:	2300      	movs	r3, #0
 8002486:	73bb      	strb	r3, [r7, #14]
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	2302      	movs	r3, #2
 800248e:	743b      	strb	r3, [r7, #16]
 8002490:	232a      	movs	r3, #42	; 0x2a
 8002492:	747b      	strb	r3, [r7, #17]
 8002494:	2300      	movs	r3, #0
 8002496:	74bb      	strb	r3, [r7, #18]
 8002498:	2300      	movs	r3, #0
 800249a:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <Add_TempHumi_Service+0x118>)
 800249e:	461d      	mov	r5, r3
 80024a0:	1d3c      	adds	r4, r7, #4
 80024a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a4:	6028      	str	r0, [r5, #0]
 80024a6:	6069      	str	r1, [r5, #4]
 80024a8:	60aa      	str	r2, [r5, #8]
 80024aa:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80024ac:	7dbb      	ldrb	r3, [r7, #22]
 80024ae:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <Add_TempHumi_Service+0x11c>)
 80024b0:	9200      	str	r2, [sp, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4929      	ldr	r1, [pc, #164]	; (800255c <Add_TempHumi_Service+0x118>)
 80024b6:	2002      	movs	r0, #2
 80024b8:	f008 fab9 	bl	800aa2e <aci_gatt_add_service>
 80024bc:	4603      	mov	r3, r0
 80024be:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &TempHumServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80024c0:	7d7b      	ldrb	r3, [r7, #21]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d141      	bne.n	800254a <Add_TempHumi_Service+0x106>
    goto fail;
  }

  COPY_TEMP_HUMI_W2ST_CHAR_UUID(uuid);
 80024c6:	23fb      	movs	r3, #251	; 0xfb
 80024c8:	713b      	strb	r3, [r7, #4]
 80024ca:	2334      	movs	r3, #52	; 0x34
 80024cc:	717b      	strb	r3, [r7, #5]
 80024ce:	239b      	movs	r3, #155	; 0x9b
 80024d0:	71bb      	strb	r3, [r7, #6]
 80024d2:	235f      	movs	r3, #95	; 0x5f
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	723b      	strb	r3, [r7, #8]
 80024da:	2300      	movs	r3, #0
 80024dc:	727b      	strb	r3, [r7, #9]
 80024de:	2300      	movs	r3, #0
 80024e0:	72bb      	strb	r3, [r7, #10]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	72fb      	strb	r3, [r7, #11]
 80024e6:	2300      	movs	r3, #0
 80024e8:	733b      	strb	r3, [r7, #12]
 80024ea:	2310      	movs	r3, #16
 80024ec:	737b      	strb	r3, [r7, #13]
 80024ee:	2300      	movs	r3, #0
 80024f0:	73bb      	strb	r3, [r7, #14]
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	2303      	movs	r3, #3
 80024f8:	743b      	strb	r3, [r7, #16]
 80024fa:	232a      	movs	r3, #42	; 0x2a
 80024fc:	747b      	strb	r3, [r7, #17]
 80024fe:	2300      	movs	r3, #0
 8002500:	74bb      	strb	r3, [r7, #18]
 8002502:	2300      	movs	r3, #0
 8002504:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <Add_TempHumi_Service+0x120>)
 8002508:	461d      	mov	r5, r3
 800250a:	1d3c      	adds	r4, r7, #4
 800250c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250e:	6028      	str	r0, [r5, #0]
 8002510:	6069      	str	r1, [r5, #4]
 8002512:	60aa      	str	r2, [r5, #8]
 8002514:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(TempHumServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <Add_TempHumi_Service+0x11c>)
 8002518:	8818      	ldrh	r0, [r3, #0]
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <Add_TempHumi_Service+0x124>)
 800251c:	9305      	str	r3, [sp, #20]
 800251e:	2300      	movs	r3, #0
 8002520:	9304      	str	r3, [sp, #16]
 8002522:	2310      	movs	r3, #16
 8002524:	9303      	str	r3, [sp, #12]
 8002526:	2304      	movs	r3, #4
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	231a      	movs	r3, #26
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2308      	movs	r3, #8
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <Add_TempHumi_Service+0x120>)
 8002536:	2102      	movs	r1, #2
 8002538:	f008 fb28 	bl	800ab8c <aci_gatt_add_char>
 800253c:	4603      	mov	r3, r0
 800253e:	757b      	strb	r3, [r7, #21]
		   CHAR_PROP_NOTIFY|CHAR_PROP_WRITE|CHAR_PROP_READ,
		   ATTR_PERMISSION_NONE,
		   GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
		   16, 0,  &TempHumCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002540:	7d7b      	ldrb	r3, [r7, #21]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <Add_TempHumi_Service+0x10a>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002546:	2300      	movs	r3, #0
 8002548:	e003      	b.n	8002552 <Add_TempHumi_Service+0x10e>
    goto fail;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <Add_TempHumi_Service+0x10c>
    goto fail;
 800254e:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002550:	2347      	movs	r3, #71	; 0x47
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bdb0      	pop	{r4, r5, r7, pc}
 800255a:	bf00      	nop
 800255c:	20000994 	.word	0x20000994
 8002560:	2000096e 	.word	0x2000096e
 8002564:	20000974 	.word	0x20000974
 8002568:	20000970 	.word	0x20000970

0800256c <Add_SetTime_Service>:
 *  CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 1, &RXCharHandle);
 *
 */
tBleStatus Add_SetTime_Service(void)
{
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af06      	add	r7, sp, #24
 // uint8_t uuid[16];
  uint16_t uuid16;

  charactFormat charFormat;
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	77fb      	strb	r3, [r7, #31]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	461a      	mov	r2, r3
 800257a:	0052      	lsls	r2, r2, #1
 800257c:	4413      	add	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	77bb      	strb	r3, [r7, #30]

  /* add TEMP_HUMI_W2ST service */
  COPY_SET_TIME_W2ST_SERVICE_UUID(uuid);
 8002584:	23fb      	movs	r3, #251	; 0xfb
 8002586:	733b      	strb	r3, [r7, #12]
 8002588:	2334      	movs	r3, #52	; 0x34
 800258a:	737b      	strb	r3, [r7, #13]
 800258c:	239b      	movs	r3, #155	; 0x9b
 800258e:	73bb      	strb	r3, [r7, #14]
 8002590:	235f      	movs	r3, #95	; 0x5f
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	743b      	strb	r3, [r7, #16]
 8002598:	2300      	movs	r3, #0
 800259a:	747b      	strb	r3, [r7, #17]
 800259c:	2300      	movs	r3, #0
 800259e:	74bb      	strb	r3, [r7, #18]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	74fb      	strb	r3, [r7, #19]
 80025a4:	2300      	movs	r3, #0
 80025a6:	753b      	strb	r3, [r7, #20]
 80025a8:	2310      	movs	r3, #16
 80025aa:	757b      	strb	r3, [r7, #21]
 80025ac:	2300      	movs	r3, #0
 80025ae:	75bb      	strb	r3, [r7, #22]
 80025b0:	2300      	movs	r3, #0
 80025b2:	75fb      	strb	r3, [r7, #23]
 80025b4:	2300      	movs	r3, #0
 80025b6:	763b      	strb	r3, [r7, #24]
 80025b8:	23ff      	movs	r3, #255	; 0xff
 80025ba:	767b      	strb	r3, [r7, #25]
 80025bc:	2300      	movs	r3, #0
 80025be:	76bb      	strb	r3, [r7, #26]
 80025c0:	2300      	movs	r3, #0
 80025c2:	76fb      	strb	r3, [r7, #27]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <Add_SetTime_Service+0x11c>)
 80025c6:	461d      	mov	r5, r3
 80025c8:	f107 040c 	add.w	r4, r7, #12
 80025cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ce:	6028      	str	r0, [r5, #0]
 80025d0:	6069      	str	r1, [r5, #4]
 80025d2:	60aa      	str	r2, [r5, #8]
 80025d4:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80025d6:	7fbb      	ldrb	r3, [r7, #30]
 80025d8:	4a2c      	ldr	r2, [pc, #176]	; (800268c <Add_SetTime_Service+0x120>)
 80025da:	9200      	str	r2, [sp, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	492a      	ldr	r1, [pc, #168]	; (8002688 <Add_SetTime_Service+0x11c>)
 80025e0:	2002      	movs	r0, #2
 80025e2:	f008 fa24 	bl	800aa2e <aci_gatt_add_service>
 80025e6:	4603      	mov	r3, r0
 80025e8:	777b      	strb	r3, [r7, #29]
                             max_attribute_records, &SetTimeServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80025ea:	7f7b      	ldrb	r3, [r7, #29]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d142      	bne.n	8002676 <Add_SetTime_Service+0x10a>
    goto fail;
  }

  COPY_SET_TIME_W2ST_CHAR_UUID(uuid);
 80025f0:	23fb      	movs	r3, #251	; 0xfb
 80025f2:	733b      	strb	r3, [r7, #12]
 80025f4:	2334      	movs	r3, #52	; 0x34
 80025f6:	737b      	strb	r3, [r7, #13]
 80025f8:	239b      	movs	r3, #155	; 0x9b
 80025fa:	73bb      	strb	r3, [r7, #14]
 80025fc:	235f      	movs	r3, #95	; 0x5f
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	743b      	strb	r3, [r7, #16]
 8002604:	2300      	movs	r3, #0
 8002606:	747b      	strb	r3, [r7, #17]
 8002608:	2300      	movs	r3, #0
 800260a:	74bb      	strb	r3, [r7, #18]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	74fb      	strb	r3, [r7, #19]
 8002610:	2300      	movs	r3, #0
 8002612:	753b      	strb	r3, [r7, #20]
 8002614:	2310      	movs	r3, #16
 8002616:	757b      	strb	r3, [r7, #21]
 8002618:	2300      	movs	r3, #0
 800261a:	75bb      	strb	r3, [r7, #22]
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]
 8002620:	2301      	movs	r3, #1
 8002622:	763b      	strb	r3, [r7, #24]
 8002624:	23ff      	movs	r3, #255	; 0xff
 8002626:	767b      	strb	r3, [r7, #25]
 8002628:	2300      	movs	r3, #0
 800262a:	76bb      	strb	r3, [r7, #26]
 800262c:	2300      	movs	r3, #0
 800262e:	76fb      	strb	r3, [r7, #27]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <Add_SetTime_Service+0x124>)
 8002632:	461d      	mov	r5, r3
 8002634:	f107 040c 	add.w	r4, r7, #12
 8002638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800263a:	6028      	str	r0, [r5, #0]
 800263c:	6069      	str	r1, [r5, #4]
 800263e:	60aa      	str	r2, [r5, #8]
 8002640:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SetTimeServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <Add_SetTime_Service+0x120>)
 8002644:	8818      	ldrh	r0, [r3, #0]
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <Add_SetTime_Service+0x128>)
 8002648:	9305      	str	r3, [sp, #20]
 800264a:	2300      	movs	r3, #0
 800264c:	9304      	str	r3, [sp, #16]
 800264e:	2310      	movs	r3, #16
 8002650:	9303      	str	r3, [sp, #12]
 8002652:	2302      	movs	r3, #2
 8002654:	9302      	str	r3, [sp, #8]
 8002656:	2300      	movs	r3, #0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	231a      	movs	r3, #26
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2308      	movs	r3, #8
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <Add_SetTime_Service+0x124>)
 8002662:	2102      	movs	r1, #2
 8002664:	f008 fa92 	bl	800ab8c <aci_gatt_add_char>
 8002668:	4603      	mov	r3, r0
 800266a:	777b      	strb	r3, [r7, #29]
		   ATTR_PERMISSION_NONE,
		   GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,

		   16, 0,  &SetTimeCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800266c:	7f7b      	ldrb	r3, [r7, #29]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <Add_SetTime_Service+0x10e>
  if (ret != BLE_STATUS_SUCCESS) {
      goto fail;
    }
*/

  return BLE_STATUS_SUCCESS;
 8002672:	2300      	movs	r3, #0
 8002674:	e003      	b.n	800267e <Add_SetTime_Service+0x112>
    goto fail;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <Add_SetTime_Service+0x110>
    goto fail;
 800267a:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 800267c:	2347      	movs	r3, #71	; 0x47
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bdb0      	pop	{r4, r5, r7, pc}
 8002686:	bf00      	nop
 8002688:	20000994 	.word	0x20000994
 800268c:	20000972 	.word	0x20000972
 8002690:	20000974 	.word	0x20000974
 8002694:	20000984 	.word	0x20000984

08002698 <Environmental_Update>:
 * @param  int32_t pressure value
 * @param  int16_t temperature value
 * @retval tBleStatus Status
 */
tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80026a4:	f004 f9ca 	bl	8006a3c <HAL_GetTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	733b      	strb	r3, [r7, #12]
 80026b0:	f004 f9c4 	bl	8006a3c <HAL_GetTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	73bb      	strb	r3, [r7, #14]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	121b      	asrs	r3, r3, #8
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	141b      	asrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	743b      	strb	r3, [r7, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	161b      	asrs	r3, r3, #24
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	74bb      	strb	r3, [r7, #18]
 80026e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026e4:	121b      	asrs	r3, r3, #8
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <Environmental_Update+0x84>)
 80026ee:	8818      	ldrh	r0, [r3, #0]
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <Environmental_Update+0x88>)
 80026f2:	8819      	ldrh	r1, [r3, #0]
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2308      	movs	r3, #8
 80026fc:	2200      	movs	r2, #0
 80026fe:	f008 fb2f 	bl	800ad60 <aci_gatt_update_char_value>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <Environmental_Update+0x78>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 800270c:	2347      	movs	r3, #71	; 0x47
 800270e:	e000      	b.n	8002712 <Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000098c 	.word	0x2000098c
 8002720:	20000966 	.word	0x20000966

08002724 <TempHumi_Update>:
 * @param  int32_t pressure value
 * @param  int16_t temperature value
 * @retval tBleStatus Status
 */
tBleStatus TempHumi_Update(int32_t temp, int16_t humi)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  uint16_t data_humi ;
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002730:	f004 f984 	bl	8006a3c <HAL_GetTick>
 8002734:	4603      	mov	r3, r0
 8002736:	08db      	lsrs	r3, r3, #3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	733b      	strb	r3, [r7, #12]
 800273c:	f004 f97e 	bl	8006a3c <HAL_GetTick>
 8002740:	4603      	mov	r3, r0
 8002742:	0adb      	lsrs	r3, r3, #11
 8002744:	b2db      	uxtb	r3, r3
 8002746:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,temp);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	73bb      	strb	r3, [r7, #14]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	121b      	asrs	r3, r3, #8
 8002752:	b2db      	uxtb	r3, r3
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	141b      	asrs	r3, r3, #16
 800275a:	b2db      	uxtb	r3, r3
 800275c:	743b      	strb	r3, [r7, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	161b      	asrs	r3, r3, #24
 8002762:	b2db      	uxtb	r3, r3
 8002764:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,humi);
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	74bb      	strb	r3, [r7, #18]
 800276c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002770:	121b      	asrs	r3, r3, #8
 8002772:	b21b      	sxth	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	74fb      	strb	r3, [r7, #19]

  data_humi = humi;
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	82fb      	strh	r3, [r7, #22]
  buff[6] = (uint8_t)data_humi;
 800277c:	8afb      	ldrh	r3, [r7, #22]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	74bb      	strb	r3, [r7, #18]
  buff[7] = (uint8_t)(data_humi>>8);
 8002782:	8afb      	ldrh	r3, [r7, #22]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	b29b      	uxth	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	74fb      	strb	r3, [r7, #19]


  ret = aci_gatt_update_char_value(TempHumServW2STHandle, TempHumCharHandle,
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <TempHumi_Update+0x98>)
 800278e:	8818      	ldrh	r0, [r3, #0]
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <TempHumi_Update+0x9c>)
 8002792:	8819      	ldrh	r1, [r3, #0]
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2308      	movs	r3, #8
 800279c:	2200      	movs	r2, #0
 800279e:	f008 fadf 	bl	800ad60 <aci_gatt_update_char_value>
 80027a2:	4603      	mov	r3, r0
 80027a4:	757b      	strb	r3, [r7, #21]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80027a6:	7d7b      	ldrb	r3, [r7, #21]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <TempHumi_Update+0x8c>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 80027ac:	2347      	movs	r3, #71	; 0x47
 80027ae:	e000      	b.n	80027b2 <TempHumi_Update+0x8e>
  }

  return BLE_STATUS_SUCCESS;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000096e 	.word	0x2000096e
 80027c0:	20000970 	.word	0x20000970

080027c4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80027d0:	f004 f934 	bl	8006a3c <HAL_GetTick>
 80027d4:	4603      	mov	r3, r0
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	743b      	strb	r3, [r7, #16]
 80027dc:	f004 f92e 	bl	8006a3c <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	0adb      	lsrs	r3, r3, #11
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	425b      	negs	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	74bb      	strb	r3, [r7, #18]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	425b      	negs	r3, r3
 80027fa:	121b      	asrs	r3, r3, #8
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	753b      	strb	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	121b      	asrs	r3, r3, #8
 800280e:	b2db      	uxtb	r3, r3
 8002810:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	425b      	negs	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	75bb      	strb	r3, [r7, #22]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	425b      	negs	r3, r3
 8002824:	121b      	asrs	r3, r3, #8
 8002826:	b2db      	uxtb	r3, r3
 8002828:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	763b      	strb	r3, [r7, #24]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	121b      	asrs	r3, r3, #8
 8002838:	b2db      	uxtb	r3, r3
 800283a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	76bb      	strb	r3, [r7, #26]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	121b      	asrs	r3, r3, #8
 800284a:	b2db      	uxtb	r3, r3
 800284c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	773b      	strb	r3, [r7, #28]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	121b      	asrs	r3, r3, #8
 800285c:	b2db      	uxtb	r3, r3
 800285e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	77bb      	strb	r3, [r7, #30]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	121b      	asrs	r3, r3, #8
 800286e:	b2db      	uxtb	r3, r3
 8002870:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f887 3020 	strb.w	r3, [r7, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	121b      	asrs	r3, r3, #8
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	121b      	asrs	r3, r3, #8
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <Acc_Update+0x10c>)
 80028a0:	8818      	ldrh	r0, [r3, #0]
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <Acc_Update+0x110>)
 80028a4:	8819      	ldrh	r1, [r3, #0]
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2314      	movs	r3, #20
 80028ae:	2200      	movs	r2, #0
 80028b0:	f008 fa56 	bl	800ad60 <aci_gatt_update_char_value>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80028ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <Acc_Update+0x102>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 80028c2:	2347      	movs	r3, #71	; 0x47
 80028c4:	e000      	b.n	80028c8 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3728      	adds	r7, #40	; 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000098c 	.word	0x2000098c
 80028d4:	2000098e 	.word	0x2000098e

080028d8 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80028e0:	f004 f8ac 	bl	8006a3c <HAL_GetTick>
 80028e4:	4603      	mov	r3, r0
 80028e6:	08db      	lsrs	r3, r3, #3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	733b      	strb	r3, [r7, #12]
 80028ec:	f004 f8a6 	bl	8006a3c <HAL_GetTick>
 80028f0:	4603      	mov	r3, r0
 80028f2:	0adb      	lsrs	r3, r3, #11
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	73bb      	strb	r3, [r7, #14]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	121b      	asrs	r3, r3, #8
 8002906:	b2db      	uxtb	r3, r3
 8002908:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	743b      	strb	r3, [r7, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	121b      	asrs	r3, r3, #8
 8002918:	b2db      	uxtb	r3, r3
 800291a:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	74bb      	strb	r3, [r7, #18]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	121b      	asrs	r3, r3, #8
 800292a:	b2db      	uxtb	r3, r3
 800292c:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <Quat_Update+0x84>)
 8002930:	8818      	ldrh	r0, [r3, #0]
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <Quat_Update+0x88>)
 8002934:	8819      	ldrh	r1, [r3, #0]
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2308      	movs	r3, #8
 800293e:	2200      	movs	r2, #0
 8002940:	f008 fa0e 	bl	800ad60 <aci_gatt_update_char_value>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <Quat_Update+0x7a>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 800294e:	2347      	movs	r3, #71	; 0x47
 8002950:	e000      	b.n	8002954 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000988 	.word	0x20000988
 8002960:	20000968 	.word	0x20000968

08002964 <SetTime_Request_CB>:
}
#endif /* STM32L476xx */

//add
int SetTime_Request_CB(uint16_t handle, uint16_t attr_handle,uint8_t data_length, uint8_t *data)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	4603      	mov	r3, r0
 800296e:	81fb      	strh	r3, [r7, #14]
 8002970:	460b      	mov	r3, r1
 8002972:	81bb      	strh	r3, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	72fb      	strb	r3, [r7, #11]
	 if(attr_handle == SetTimeCharHandle + 1)
 8002978:	89ba      	ldrh	r2, [r7, #12]
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <SetTime_Request_CB+0x90>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	429a      	cmp	r2, r3
 8002982:	d130      	bne.n	80029e6 <SetTime_Request_CB+0x82>
	{


	  uint8_t datalen = data_length;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	77fb      	strb	r3, [r7, #31]
	  uint8_t data1 = data[0];//year
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	77bb      	strb	r3, [r7, #30]
	  uint8_t data2 = data[1];//month
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	777b      	strb	r3, [r7, #29]
	  uint8_t data3 = data[2];//day
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	789b      	ldrb	r3, [r3, #2]
 8002998:	773b      	strb	r3, [r7, #28]
	  uint8_t data4 = data[3]; //day of week (1 ~ 7 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	78db      	ldrb	r3, [r3, #3]
 800299e:	76fb      	strb	r3, [r7, #27]
	  uint8_t data5 = data[4];//hour
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	76bb      	strb	r3, [r7, #26]
	  uint8_t data6 = data[5];//minute
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	795b      	ldrb	r3, [r3, #5]
 80029aa:	767b      	strb	r3, [r7, #25]
	  uint8_t data7 = data[6];//second
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	799b      	ldrb	r3, [r3, #6]
 80029b0:	763b      	strb	r3, [r7, #24]
	  uint8_t data8 = data[7];
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	79db      	ldrb	r3, [r3, #7]
 80029b6:	75fb      	strb	r3, [r7, #23]

	  time.year = data1;
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029ba:	7fbb      	ldrb	r3, [r7, #30]
 80029bc:	7193      	strb	r3, [r2, #6]
	  time.month = data2;
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029c0:	7f7b      	ldrb	r3, [r7, #29]
 80029c2:	7153      	strb	r3, [r2, #5]
	  time.dayofmonth = data3;
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029c6:	7f3b      	ldrb	r3, [r7, #28]
 80029c8:	7113      	strb	r3, [r2, #4]
	  time.dayofweek = data4;
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029cc:	7efb      	ldrb	r3, [r7, #27]
 80029ce:	70d3      	strb	r3, [r2, #3]
	  time.hour = data5;
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029d2:	7ebb      	ldrb	r3, [r7, #26]
 80029d4:	7093      	strb	r3, [r2, #2]
	  time.minutes = data6;
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029d8:	7e7b      	ldrb	r3, [r7, #25]
 80029da:	7053      	strb	r3, [r2, #1]
	  time.seconds = data7;
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <SetTime_Request_CB+0x94>)
 80029de:	7e3b      	ldrb	r3, [r7, #24]
 80029e0:	7013      	strb	r3, [r2, #0]

	  return 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <SetTime_Request_CB+0x84>

	}

	 return 0;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	20000984 	.word	0x20000984
 80029f8:	2000095c 	.word	0x2000095c

080029fc <Write_Request_CB>:

//add
void Write_Request_CB(uint16_t handle, uint16_t attr_handle,uint8_t data_length, uint8_t *data)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	4603      	mov	r3, r0
 8002a06:	81fb      	strh	r3, [r7, #14]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	81bb      	strh	r3, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	72fb      	strb	r3, [r7, #11]
	 tBleStatus ret;
	 // reply to the shield
	 ret = aci_gatt_write_resp(
 8002a10:	89b9      	ldrh	r1, [r7, #12]
 8002a12:	89f8      	ldrh	r0, [r7, #14]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f008 fa2c 	bl	800ae7c <aci_gatt_write_resp>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]

	 if (ret == BLE_STATUS_SUCCESS) {

		 PRINT_DBG("Error= %x \r\n", status);
	 }
}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	603a      	str	r2, [r7, #0]
 8002a3a:	80fb      	strh	r3, [r7, #6]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <Attribute_Modified_CB+0x108>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d111      	bne.n	8002a70 <Attribute_Modified_CB+0x40>
    for(int i = 0; i < data_length; i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e009      	b.n	8002a66 <Attribute_Modified_CB+0x36>
      printf("%c", att_data[i]);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f009 fbbc 	bl	800c1d8 <putchar>
    for(int i = 0; i < data_length; i++)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	797b      	ldrb	r3, [r7, #5]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	dbf1      	blt.n	8002a52 <Attribute_Modified_CB+0x22>
 8002a6e:	e00f      	b.n	8002a90 <Attribute_Modified_CB+0x60>
  }
  else if(handle == TXCharHandle + 2){
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <Attribute_Modified_CB+0x10c>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	3302      	adds	r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d109      	bne.n	8002a90 <Attribute_Modified_CB+0x60>
    if(att_data[0] == 0x01)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <Attribute_Modified_CB+0x60>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <Attribute_Modified_CB+0x110>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <Attribute_Modified_CB+0x110>)
 8002a8e:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE BEGIN PM */

  //TEMP + HUMI DISPLAY
  if(att_data[3] == 0x01)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3303      	adds	r3, #3
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <Attribute_Modified_CB+0x70>
  {
	  setDisplayModeCmd  = 0;
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <Attribute_Modified_CB+0x114>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]


  }

  //TIME DIPLAY
  if(att_data[3] == 0x02)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d102      	bne.n	8002ab0 <Attribute_Modified_CB+0x80>
  {
	  setDisplayModeCmd = 1;
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <Attribute_Modified_CB+0x114>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

 }

  //TIME  + CAR DIPLAY
  if(att_data[3] == 0x03)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3303      	adds	r3, #3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d102      	bne.n	8002ac0 <Attribute_Modified_CB+0x90>
  {
	  setDisplayModeCmd = 2;
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <Attribute_Modified_CB+0x114>)
 8002abc:	2202      	movs	r2, #2
 8002abe:	601a      	str	r2, [r3, #0]

  }

  //TIME  + CAR F14
  if(att_data[3] == 0x04)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3303      	adds	r3, #3
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d102      	bne.n	8002ad0 <Attribute_Modified_CB+0xa0>
  {
  	  setDisplayModeCmd = 3;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <Attribute_Modified_CB+0x114>)
 8002acc:	2203      	movs	r2, #3
 8002ace:	601a      	str	r2, [r3, #0]

  }

  //3D IMG
   if(att_data[3] == 0x05)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3303      	adds	r3, #3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d102      	bne.n	8002ae0 <Attribute_Modified_CB+0xb0>
  {
  	  setDisplayModeCmd = 4;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <Attribute_Modified_CB+0x114>)
 8002adc:	2204      	movs	r2, #4
 8002ade:	601a      	str	r2, [r3, #0]

  }


  //LED ON
  if(att_data[3] == 0x20)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3303      	adds	r3, #3
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d102      	bne.n	8002af0 <Attribute_Modified_CB+0xc0>
   {
	  setLEDControl = 1;
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <Attribute_Modified_CB+0x118>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
  }

  //LED OFF
  if(att_data[3] == 0x21)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3303      	adds	r3, #3
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b21      	cmp	r3, #33	; 0x21
 8002af8:	d102      	bne.n	8002b00 <Attribute_Modified_CB+0xd0>
    {
	  setLEDControl = 0;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <Attribute_Modified_CB+0x118>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
   }

  //SET TIME
   if(att_data[3] == 0x30)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	3303      	adds	r3, #3
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b30      	cmp	r3, #48	; 0x30
 8002b08:	d102      	bne.n	8002b10 <Attribute_Modified_CB+0xe0>
    {
  	  setDisplayModeCmd = 1;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <Attribute_Modified_CB+0x114>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

   }

  /////////////////////////////////////////////////////////////////////////

  if(att_data[3] == 0x10)//CMD =>  START (Temp/Hum)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3303      	adds	r3, #3
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d102      	bne.n	8002b20 <Attribute_Modified_CB+0xf0>
  {
	  send_temphumi = 1;//start
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <Attribute_Modified_CB+0x11c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
  }

  if(att_data[3] == 0x11)//CMD =>  STOP (Temp/Hum)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3303      	adds	r3, #3
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b11      	cmp	r3, #17
 8002b28:	d102      	bne.n	8002b30 <Attribute_Modified_CB+0x100>
  {
	  send_temphumi = 0;//stop
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <Attribute_Modified_CB+0x11c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END PM */
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000992 	.word	0x20000992
 8002b3c:	20000990 	.word	0x20000990
 8002b40:	20000004 	.word	0x20000004
 8002b44:	2000039c 	.word	0x2000039c
 8002b48:	200003a0 	.word	0x200003a0
 8002b4c:	20000986 	.word	0x20000986

08002b50 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b092      	sub	sp, #72	; 0x48
 8002b54:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002b56:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <Set_DeviceConnectable+0xe0>)
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b60:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002b64:	2302      	movs	r3, #2
 8002b66:	703b      	strb	r3, [r7, #0]
 8002b68:	230a      	movs	r3, #10
 8002b6a:	707b      	strb	r3, [r7, #1]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	70bb      	strb	r3, [r7, #2]
 8002b70:	2308      	movs	r3, #8
 8002b72:	70fb      	strb	r3, [r7, #3]
 8002b74:	2309      	movs	r3, #9
 8002b76:	713b      	strb	r3, [r7, #4]
 8002b78:	2342      	movs	r3, #66	; 0x42
 8002b7a:	717b      	strb	r3, [r7, #5]
 8002b7c:	236c      	movs	r3, #108	; 0x6c
 8002b7e:	71bb      	strb	r3, [r7, #6]
 8002b80:	2375      	movs	r3, #117	; 0x75
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	2365      	movs	r3, #101	; 0x65
 8002b86:	723b      	strb	r3, [r7, #8]
 8002b88:	234e      	movs	r3, #78	; 0x4e
 8002b8a:	727b      	strb	r3, [r7, #9]
 8002b8c:	2352      	movs	r3, #82	; 0x52
 8002b8e:	72bb      	strb	r3, [r7, #10]
 8002b90:	2347      	movs	r3, #71	; 0x47
 8002b92:	72fb      	strb	r3, [r7, #11]
 8002b94:	230d      	movs	r3, #13
 8002b96:	733b      	strb	r3, [r7, #12]
 8002b98:	23ff      	movs	r3, #255	; 0xff
 8002b9a:	737b      	strb	r3, [r7, #13]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73bb      	strb	r3, [r7, #14]
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	743b      	strb	r3, [r7, #16]
 8002ba8:	23f4      	movs	r3, #244	; 0xf4
 8002baa:	747b      	strb	r3, [r7, #17]
 8002bac:	2300      	movs	r3, #0
 8002bae:	74bb      	strb	r3, [r7, #18]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <Set_DeviceConnectable+0xe4>)
 8002bb6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002bb8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <Set_DeviceConnectable+0xe4>)
 8002bbc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002bbe:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <Set_DeviceConnectable+0xe4>)
 8002bc2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002bc4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <Set_DeviceConnectable+0xe4>)
 8002bc8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8002bca:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <Set_DeviceConnectable+0xe4>)
 8002bce:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002bd0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <Set_DeviceConnectable+0xe4>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002bd6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002bd8:	7cbb      	ldrb	r3, [r7, #18]
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f007 fc12 	bl	800a40e <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002bea:	2300      	movs	r3, #0
 8002bec:	9306      	str	r3, [sp, #24]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9305      	str	r3, [sp, #20]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9304      	str	r3, [sp, #16]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9303      	str	r3, [sp, #12]
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	2308      	movs	r3, #8
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c12:	2000      	movs	r0, #0
 8002c14:	f007 fc5f 	bl	800a4d6 <aci_gap_set_discoverable>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002c1e:	463b      	mov	r3, r7
 8002c20:	4619      	mov	r1, r3
 8002c22:	201a      	movs	r0, #26
 8002c24:	f007 fe76 	bl	800a914 <aci_gap_update_adv_data>
  {
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0800e870 	.word	0x0800e870
 8002c34:	20000954 	.word	0x20000954

08002c38 <GATT_Notification_CB>:
  * @param  attr_len    Length of attribute value in the notification
  * @param  attr_value  Attribute value in the notification
  * @retval None
  */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	603a      	str	r2, [r7, #0]
 8002c42:	80fb      	strh	r3, [r7, #6]
 8002c44:	460b      	mov	r3, r1
 8002c46:	717b      	strb	r3, [r7, #5]
    if(attr_handle == tx_handle+1){
      for(int i = 0; i < attr_len; i++)
          printf("%c", attr_value[i]);
    }
#endif
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b090      	sub	sp, #64	; 0x40
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38

  if(hci_pckt->type == HCI_EVENT_PKT)
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	f040 80b0 	bne.w	8002dca <APP_UserEvtRx+0x176>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b3e      	cmp	r3, #62	; 0x3e
 8002c76:	d11e      	bne.n	8002cb6 <APP_UserEvtRx+0x62>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	60bb      	str	r3, [r7, #8]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c82:	e014      	b.n	8002cae <APP_UserEvtRx+0x5a>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4952      	ldr	r1, [pc, #328]	; (8002dd4 <APP_UserEvtRx+0x180>)
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d108      	bne.n	8002ca8 <APP_UserEvtRx+0x54>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8002c96:	4a4f      	ldr	r2, [pc, #316]	; (8002dd4 <APP_UserEvtRx+0x180>)
 8002c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	3201      	adds	r2, #1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002caa:	3301      	adds	r3, #1
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d9e7      	bls.n	8002c84 <APP_UserEvtRx+0x30>
         // hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8002cb4:	e089      	b.n	8002dca <APP_UserEvtRx+0x176>
    else if(event_pckt->evt == EVT_VENDOR)
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2bff      	cmp	r3, #255	; 0xff
 8002cbc:	d17c      	bne.n	8002db8 <APP_UserEvtRx+0x164>
		  evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
		              switch(blue_evt->ecode){
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f640 4213 	movw	r2, #3091	; 0xc13
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00c      	beq.n	8002cec <APP_UserEvtRx+0x98>
 8002cd2:	f640 4213 	movw	r2, #3091	; 0xc13
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	dc62      	bgt.n	8002da0 <APP_UserEvtRx+0x14c>
 8002cda:	f640 4201 	movw	r2, #3073	; 0xc01
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d034      	beq.n	8002d4c <APP_UserEvtRx+0xf8>
 8002ce2:	f640 420f 	movw	r2, #3087	; 0xc0f
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04b      	beq.n	8002d82 <APP_UserEvtRx+0x12e>
 8002cea:	e059      	b.n	8002da0 <APP_UserEvtRx+0x14c>
						  	  evt_gatt_write_permit_req *evt = (evt_gatt_write_permit_req *)blue_evt->data;
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	3302      	adds	r3, #2
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
							  int ret = SetTime_Request_CB(evt->conn_handle,evt->attr_handle,evt->data_length, evt->data);
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	885b      	ldrh	r3, [r3, #2]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	461a      	mov	r2, r3
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	3305      	adds	r3, #5
 8002d08:	f7ff fe2c 	bl	8002964 <SetTime_Request_CB>
 8002d0c:	62b8      	str	r0, [r7, #40]	; 0x28
							  if(ret == 1)
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d11b      	bne.n	8002d4c <APP_UserEvtRx+0xf8>
								  uint8_t err_code = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								  uint8_t write_status = err_code == 0 ? 0 : 1;
 8002d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								  Write_Request_CB(evt->conn_handle,evt->attr_handle,evt->data_length, evt->data);
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	885b      	ldrh	r3, [r3, #2]
 8002d36:	4619      	mov	r1, r3
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	3305      	adds	r3, #5
 8002d42:	f7ff fe5b 	bl	80029fc <Write_Request_CB>
								  nSetTime = 1; //Time Set
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <APP_UserEvtRx+0x184>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
		                      evt_gatt_attr_modified *evt = (evt_gatt_attr_modified *)blue_evt->data;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	3302      	adds	r3, #2
 8002d50:	61fb      	str	r3, [r7, #28]
		                      Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	885b      	ldrh	r3, [r3, #2]
 8002d56:	4618      	mov	r0, r3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3305      	adds	r3, #5
 8002d62:	461a      	mov	r2, r3
 8002d64:	f7ff fe64 	bl	8002a30 <Attribute_Modified_CB>
		                      evt_att_find_information_resp *pr = (evt_att_find_information_resp*)blue_evt->data;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
		                      format_lenofuuid = pr->format;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	78db      	ldrb	r3, [r3, #3]
 8002d72:	75fb      	strb	r3, [r7, #23]
		                      uint8_t * uuid_1 = pr->handle_uuid_pair;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	3304      	adds	r3, #4
 8002d78:	613b      	str	r3, [r7, #16]
		                      uint8_t * uuid_2 = pr->handle_uuid_pair;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
		                  break;
 8002d80:	e00e      	b.n	8002da0 <APP_UserEvtRx+0x14c>
		                      evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	3302      	adds	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
		                      GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	8898      	ldrh	r0, [r3, #4]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	789b      	ldrb	r3, [r3, #2]
 8002d90:	3b02      	subs	r3, #2
 8002d92:	b2d9      	uxtb	r1, r3
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	3306      	adds	r3, #6
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f7ff ff4d 	bl	8002c38 <GATT_Notification_CB>
		                  break;
 8002d9e:	bf00      	nop
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da4:	e004      	b.n	8002db0 <APP_UserEvtRx+0x15c>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	881b      	ldrh	r3, [r3, #0]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	3301      	adds	r3, #1
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db2:	2b2a      	cmp	r3, #42	; 0x2a
 8002db4:	d9f7      	bls.n	8002da6 <APP_UserEvtRx+0x152>
}
 8002db6:	e008      	b.n	8002dca <APP_UserEvtRx+0x176>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbc:	e002      	b.n	8002dc4 <APP_UserEvtRx+0x170>
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d9f9      	bls.n	8002dbe <APP_UserEvtRx+0x16a>
}
 8002dca:	bf00      	nop
 8002dcc:	3740      	adds	r7, #64	; 0x40
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	080727c8 	.word	0x080727c8
 8002dd8:	20000390 	.word	0x20000390

08002ddc <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8002de0:	2006      	movs	r0, #6
 8002de2:	f003 ff76 	bl	8006cd2 <HAL_NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8002dee:	2006      	movs	r0, #6
 8002df0:	f003 ff7d 	bl	8006cee <HAL_NVIC_DisableIRQ>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HCI_TL_SPI_Init+0x90>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <HCI_TL_SPI_Init+0x90>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HCI_TL_SPI_Init+0x90>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <HCI_TL_SPI_Init+0x94>)
 8002e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4818      	ldr	r0, [pc, #96]	; (8002e90 <HCI_TL_SPI_Init+0x98>)
 8002e30:	f003 ffca 	bl	8006dc8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4810      	ldr	r0, [pc, #64]	; (8002e90 <HCI_TL_SPI_Init+0x98>)
 8002e4e:	f003 ffbb 	bl	8006dc8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002e52:	2302      	movs	r3, #2
 8002e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e56:	2301      	movs	r3, #1
 8002e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	4619      	mov	r1, r3
 8002e68:	4809      	ldr	r0, [pc, #36]	; (8002e90 <HCI_TL_SPI_Init+0x98>)
 8002e6a:	f003 ffad 	bl	8006dc8 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002e6e:	2201      	movs	r2, #1
 8002e70:	2102      	movs	r1, #2
 8002e72:	4807      	ldr	r0, [pc, #28]	; (8002e90 <HCI_TL_SPI_Init+0x98>)
 8002e74:	f004 fa28 	bl	80072c8 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8002e78:	f003 faf6 	bl	8006468 <BSP_SPI1_Init>
 8002e7c:	4603      	mov	r3, r0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	10110000 	.word	0x10110000
 8002e90:	40020000 	.word	0x40020000

08002e94 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4807      	ldr	r0, [pc, #28]	; (8002eb8 <HCI_TL_SPI_DeInit+0x24>)
 8002e9c:	f004 f918 	bl	80070d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HCI_TL_SPI_DeInit+0x24>)
 8002ea4:	f004 f914 	bl	80070d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <HCI_TL_SPI_DeInit+0x24>)
 8002eae:	f004 f90f 	bl	80070d0 <HAL_GPIO_DeInit>
  return 0;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <HCI_TL_SPI_Reset+0x38>)
 8002ec6:	f004 f9ff 	bl	80072c8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ed0:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <HCI_TL_SPI_Reset+0x38>)
 8002ed2:	f004 f9f9 	bl	80072c8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002ed6:	2005      	movs	r0, #5
 8002ed8:	f003 fdbc 	bl	8006a54 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002edc:	2201      	movs	r2, #1
 8002ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee2:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <HCI_TL_SPI_Reset+0x38>)
 8002ee4:	f004 f9f0 	bl	80072c8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002ee8:	2005      	movs	r0, #5
 8002eea:	f003 fdb3 	bl	8006a54 <HAL_Delay>
  return 0;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <HCI_TL_SPI_Receive+0xb0>)
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f16:	6018      	str	r0, [r3, #0]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8002f1c:	f7ff ff65 	bl	8002dea <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2102      	movs	r1, #2
 8002f24:	4821      	ldr	r0, [pc, #132]	; (8002fac <HCI_TL_SPI_Receive+0xb4>)
 8002f26:	f004 f9cf 	bl	80072c8 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002f2a:	f107 010c 	add.w	r1, r7, #12
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	2205      	movs	r2, #5
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fac7 	bl	80064c8 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8002f3a:	7c3b      	ldrb	r3, [r7, #16]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8002f4a:	8bfb      	ldrh	r3, [r7, #30]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01e      	beq.n	8002f8e <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8002f50:	8bfa      	ldrh	r2, [r7, #30]
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d901      	bls.n	8002f5c <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	777b      	strb	r3, [r7, #29]
 8002f60:	e010      	b.n	8002f84 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8002f62:	f107 011b 	add.w	r1, r7, #27
 8002f66:	f107 031c 	add.w	r3, r7, #28
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 faab 	bl	80064c8 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8002f72:	7f7b      	ldrb	r3, [r7, #29]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	7efa      	ldrb	r2, [r7, #27]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8002f7e:	7f7b      	ldrb	r3, [r7, #29]
 8002f80:	3301      	adds	r3, #1
 8002f82:	777b      	strb	r3, [r7, #29]
 8002f84:	7f7b      	ldrb	r3, [r7, #29]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	8bfa      	ldrh	r2, [r7, #30]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d8e9      	bhi.n	8002f62 <HCI_TL_SPI_Receive+0x6a>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2102      	movs	r1, #2
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <HCI_TL_SPI_Receive+0xb4>)
 8002f94:	f004 f998 	bl	80072c8 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8002f98:	f7ff ff20 	bl	8002ddc <HCI_TL_SPI_Enable_IRQ>

  return len;
 8002f9c:	7f7b      	ldrb	r3, [r7, #29]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	0800e878 	.word	0x0800e878
 8002fac:	40020000 	.word	0x40020000

08002fb0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002fbc:	4a34      	ldr	r2, [pc, #208]	; (8003090 <HCI_TL_SPI_Send+0xe0>)
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc6:	6018      	str	r0, [r3, #0]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f003 fd36 	bl	8006a3c <HAL_GetTick>
 8002fd0:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8002fd2:	f7ff ff0a 	bl	8002dea <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8002fd6:	f003 fd31 	bl	8006a3c <HAL_GetTick>
 8002fda:	61f8      	str	r0, [r7, #28]

    result = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	482b      	ldr	r0, [pc, #172]	; (8003094 <HCI_TL_SPI_Send+0xe4>)
 8002fe6:	f004 f96f 	bl	80072c8 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8002fea:	e00a      	b.n	8003002 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8002fec:	f003 fd26 	bl	8006a3c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	d903      	bls.n	8003002 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8002ffa:	f06f 0302 	mvn.w	r3, #2
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003000:	e004      	b.n	800300c <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 8003002:	f000 f84b 	bl	800309c <IsDataAvailable>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ef      	beq.n	8002fec <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f113 0f03 	cmn.w	r3, #3
 8003012:	d105      	bne.n	8003020 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003014:	2201      	movs	r2, #1
 8003016:	2102      	movs	r1, #2
 8003018:	481e      	ldr	r0, [pc, #120]	; (8003094 <HCI_TL_SPI_Send+0xe4>)
 800301a:	f004 f955 	bl	80072c8 <HAL_GPIO_WritePin>
      break;
 800301e:	e030      	b.n	8003082 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003020:	f107 010c 	add.w	r1, r7, #12
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2205      	movs	r2, #5
 800302a:	4618      	mov	r0, r3
 800302c:	f003 fa4c 	bl	80064c8 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8003030:	7bbb      	ldrb	r3, [r7, #14]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	b21a      	sxth	r2, r3
 8003036:	7b7b      	ldrb	r3, [r7, #13]
 8003038:	b21b      	sxth	r3, r3
 800303a:	4313      	orrs	r3, r2
 800303c:	b21b      	sxth	r3, r3
 800303e:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8003040:	8b7a      	ldrh	r2, [r7, #26]
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	429a      	cmp	r2, r3
 8003046:	d306      	bcc.n	8003056 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	461a      	mov	r2, r3
 800304c:	4912      	ldr	r1, [pc, #72]	; (8003098 <HCI_TL_SPI_Send+0xe8>)
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f003 fa3a 	bl	80064c8 <BSP_SPI1_SendRecv>
 8003054:	e002      	b.n	800305c <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8003056:	f06f 0301 	mvn.w	r3, #1
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800305c:	2201      	movs	r2, #1
 800305e:	2102      	movs	r1, #2
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <HCI_TL_SPI_Send+0xe4>)
 8003062:	f004 f931 	bl	80072c8 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003066:	f003 fce9 	bl	8006a3c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d903      	bls.n	800307c <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8003074:	f06f 0302 	mvn.w	r3, #2
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800307a:	e002      	b.n	8003082 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	dba9      	blt.n	8002fd6 <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 8003082:	f7ff feab 	bl	8002ddc <HCI_TL_SPI_Enable_IRQ>

  return result;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003088:	4618      	mov	r0, r3
 800308a:	3728      	adds	r7, #40	; 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	0800e880 	.word	0x0800e880
 8003094:	40020000 	.word	0x40020000
 8003098:	20000290 	.word	0x20000290

0800309c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80030a0:	2101      	movs	r1, #1
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <IsDataAvailable+0x1c>)
 80030a4:	f004 f8f8 	bl	8007298 <HAL_GPIO_ReadPin>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40020000 	.word	0x40020000

080030bc <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <hci_tl_lowlevel_init+0x54>)
 80030c4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <hci_tl_lowlevel_init+0x58>)
 80030c8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <hci_tl_lowlevel_init+0x5c>)
 80030cc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <hci_tl_lowlevel_init+0x60>)
 80030d0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <hci_tl_lowlevel_init+0x64>)
 80030d4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <hci_tl_lowlevel_init+0x68>)
 80030d8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	4618      	mov	r0, r3
 80030de:	f008 f90d 	bl	800b2fc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80030e2:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80030e6:	4810      	ldr	r0, [pc, #64]	; (8003128 <hci_tl_lowlevel_init+0x6c>)
 80030e8:	f003 fe35 	bl	8006d56 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80030ec:	4a0f      	ldr	r2, [pc, #60]	; (800312c <hci_tl_lowlevel_init+0x70>)
 80030ee:	2100      	movs	r1, #0
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <hci_tl_lowlevel_init+0x6c>)
 80030f2:	f003 fe16 	bl	8006d22 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	2006      	movs	r0, #6
 80030fc:	f003 fdcd 	bl	8006c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003100:	2006      	movs	r0, #6
 8003102:	f003 fde6 	bl	8006cd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8003106:	bf00      	nop
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	08002df9 	.word	0x08002df9
 8003114:	08002e95 	.word	0x08002e95
 8003118:	08002fb1 	.word	0x08002fb1
 800311c:	08002ef9 	.word	0x08002ef9
 8003120:	08002ebd 	.word	0x08002ebd
 8003124:	08006509 	.word	0x08006509
 8003128:	200009a8 	.word	0x200009a8
 800312c:	08003131 	.word	0x08003131

08003130 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8003134:	e005      	b.n	8003142 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8003136:	2000      	movs	r0, #0
 8003138:	f008 fa46 	bl	800b5c8 <hci_notify_asynch_evt>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8003142:	f7ff ffab 	bl	800309c <IsDataAvailable>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f4      	bne.n	8003136 <hci_tl_lowlevel_isr+0x6>
 800314c:	e000      	b.n	8003150 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800314e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <TFT_reset>:
//Текущий размер шрифта
uint8_t currentFontSize = 1;
//Цвет фона текста
uint16_t textBackColor = TFT_COLOR_none; //По умолчанию фон выключен
//Аппаратная перезагрузка дисплея
void TFT_reset(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
    TFT_RESET_Reset;
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315e:	4808      	ldr	r0, [pc, #32]	; (8003180 <TFT_reset+0x2c>)
 8003160:	f004 f8b2 	bl	80072c8 <HAL_GPIO_WritePin>
    delay_ms(1);
 8003164:	2001      	movs	r0, #1
 8003166:	f003 fc75 	bl	8006a54 <HAL_Delay>
    TFT_RESET_Set;
 800316a:	2201      	movs	r2, #1
 800316c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003170:	4803      	ldr	r0, [pc, #12]	; (8003180 <TFT_reset+0x2c>)
 8003172:	f004 f8a9 	bl	80072c8 <HAL_GPIO_WritePin>
    delay_ms(1);
 8003176:	2001      	movs	r0, #1
 8003178:	f003 fc6c 	bl	8006a54 <HAL_Delay>
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40020800 	.word	0x40020800

08003184 <TFT_init>:
//Инициализация дисплея
#ifndef TFT_SOFTSPI
void TFT_init(uint8_t orientation, SPI_HandleTypeDef *displaySPI) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
    _displaySPI = displaySPI;
 8003190:	4a9b      	ldr	r2, [pc, #620]	; (8003400 <TFT_init+0x27c>)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6013      	str	r3, [r2, #0]
#endif
#ifdef TFT_SOFTSPI
void TFT_init(uint8_t orientation) {
#endif
    TFT_CS_Set;
 8003196:	2201      	movs	r2, #1
 8003198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800319c:	4899      	ldr	r0, [pc, #612]	; (8003404 <TFT_init+0x280>)
 800319e:	f004 f893 	bl	80072c8 <HAL_GPIO_WritePin>
    //Аппаратная перезагрузка дисплея
    TFT_reset();
 80031a2:	f7ff ffd7 	bl	8003154 <TFT_reset>
    //Общение на шине именно с дисплеем
    TFT_CS_Reset;
 80031a6:	2200      	movs	r2, #0
 80031a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ac:	4895      	ldr	r0, [pc, #596]	; (8003404 <TFT_init+0x280>)
 80031ae:	f004 f88b 	bl	80072c8 <HAL_GPIO_WritePin>
    
    TFT_sendCmd(0x000,0x0001); //Запуск осциллятора
 80031b2:	2101      	movs	r1, #1
 80031b4:	2000      	movs	r0, #0
 80031b6:	f000 f989 	bl	80034cc <TFT_sendCmd>
    delay_ms(10);
 80031ba:	200a      	movs	r0, #10
 80031bc:	f003 fc4a 	bl	8006a54 <HAL_Delay>
    /* Настройки питания */      
    TFT_sendCmd(0x100, 0x0000);         //Дисплей выключен
 80031c0:	2100      	movs	r1, #0
 80031c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031c6:	f000 f981 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x101, 0x0000);         //Тактирование выключено 
 80031ca:	2100      	movs	r1, #0
 80031cc:	f240 1001 	movw	r0, #257	; 0x101
 80031d0:	f000 f97c 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x102, 0x3100);         //Настройка частот преобразователей
 80031d4:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 80031d8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80031dc:	f000 f976 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x103, 0xe200);         //Настройка напряжений
 80031e0:	f44f 4162 	mov.w	r1, #57856	; 0xe200
 80031e4:	f240 1003 	movw	r0, #259	; 0x103
 80031e8:	f000 f970 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x110, 0x009d);         //Настройка апмлитуд переменного напряжения матрицы 
 80031ec:	219d      	movs	r1, #157	; 0x9d
 80031ee:	f44f 7088 	mov.w	r0, #272	; 0x110
 80031f2:	f000 f96b 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x111, 0x0022);         //Настройка тока 
 80031f6:	2122      	movs	r1, #34	; 0x22
 80031f8:	f240 1011 	movw	r0, #273	; 0x111
 80031fc:	f000 f966 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x100, 0x0120);         //Включение операционных усилителей и запуск генератора градационного напряжения
 8003200:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003204:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003208:	f000 f960 	bl	80034cc <TFT_sendCmd>
    delay_ms(20);
 800320c:	2014      	movs	r0, #20
 800320e:	f003 fc21 	bl	8006a54 <HAL_Delay>
    TFT_sendCmd(0x100, 0x3120);         //Включение питания матрицы и всего остального
 8003212:	f243 1120 	movw	r1, #12576	; 0x3120
 8003216:	f44f 7080 	mov.w	r0, #256	; 0x100
 800321a:	f000 f957 	bl	80034cc <TFT_sendCmd>
    delay_ms(80);
 800321e:	2050      	movs	r0, #80	; 0x50
 8003220:	f003 fc18 	bl	8006a54 <HAL_Delay>
    /* Управление дисплеем */   
    TFT_sendCmd(0x001, 0x0100);         //Ориентация дисплея: 0x0100 - сверху вниз, 0x0000 - снизу вверх. Можно отзеркалить изображение     
 8003224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003228:	2001      	movs	r0, #1
 800322a:	f000 f94f 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x002, 0x0000);         //Установка формы сигнала драйвера
 800322e:	2100      	movs	r1, #0
 8003230:	2002      	movs	r0, #2
 8003232:	f000 f94b 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x003, 0x1230);         //Режим ввода
 8003236:	f241 2130 	movw	r1, #4656	; 0x1230
 800323a:	2003      	movs	r0, #3
 800323c:	f000 f946 	bl	80034cc <TFT_sendCmd>
    //0xXXX0 - ввод по короткой стороне (по ширине), 0xXXX8 - по длинной (по длине)
    //0xXXnX - инкремент/декремент по длине и ширине
    TFT_sendCmd(0x006, 0x0000);         //Контроль движения изображения
 8003240:	2100      	movs	r1, #0
 8003242:	2006      	movs	r0, #6
 8003244:	f000 f942 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x007, 0x0101);         //Выключение дисплея как такогого
 8003248:	f240 1101 	movw	r1, #257	; 0x101
 800324c:	2007      	movs	r0, #7
 800324e:	f000 f93d 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x008, 0x0808);         //Настройка рамок (?)
 8003252:	f640 0108 	movw	r1, #2056	; 0x808
 8003256:	2008      	movs	r0, #8
 8003258:	f000 f938 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x009, 0x0000);         //Настройка сканирования (?)
 800325c:	2100      	movs	r1, #0
 800325e:	2009      	movs	r0, #9
 8003260:	f000 f934 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x00b, 0x0000);         //Настройка количества цветов дисплея. Переключение между 8 цветами и 262k
 8003264:	2100      	movs	r1, #0
 8003266:	200b      	movs	r0, #11
 8003268:	f000 f930 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x00c, 0x0000);         //Настройка интерфейса RGB 
 800326c:	2100      	movs	r1, #0
 800326e:	200c      	movs	r0, #12
 8003270:	f000 f92c 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x00d, 0x0010);         //Настройка частоты обновления кадров. 0xXX10 - максимальная, 0xXX1F - минимальная частота
 8003274:	2110      	movs	r1, #16
 8003276:	200d      	movs	r0, #13
 8003278:	f000 f928 	bl	80034cc <TFT_sendCmd>
    /* LTPS control settings */   
    TFT_sendCmd(0x012, 0x0000);
 800327c:	2100      	movs	r1, #0
 800327e:	2012      	movs	r0, #18
 8003280:	f000 f924 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x013, 0x0000);    
 8003284:	2100      	movs	r1, #0
 8003286:	2013      	movs	r0, #19
 8003288:	f000 f920 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x018, 0x0000);
 800328c:	2100      	movs	r1, #0
 800328e:	2018      	movs	r0, #24
 8003290:	f000 f91c 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x019, 0x0000);
 8003294:	2100      	movs	r1, #0
 8003296:	2019      	movs	r0, #25
 8003298:	f000 f918 	bl	80034cc <TFT_sendCmd>

    TFT_sendCmd(0x203, 0x0000);         //Маска записи в GRAM
 800329c:	2100      	movs	r1, #0
 800329e:	f240 2003 	movw	r0, #515	; 0x203
 80032a2:	f000 f913 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x204, 0x0000);         //Маска записи в GRAM
 80032a6:	2100      	movs	r1, #0
 80032a8:	f44f 7001 	mov.w	r0, #516	; 0x204
 80032ac:	f000 f90e 	bl	80034cc <TFT_sendCmd>
    /* Выделение активной области дисплея, в которую будут отправляться данные */
    TFT_sendCmd(0x210, 0x0000);         //Начало по горизонтали
 80032b0:	2100      	movs	r1, #0
 80032b2:	f44f 7004 	mov.w	r0, #528	; 0x210
 80032b6:	f000 f909 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x211, 0x00ef);         //Конец по горизонтали
 80032ba:	21ef      	movs	r1, #239	; 0xef
 80032bc:	f240 2011 	movw	r0, #529	; 0x211
 80032c0:	f000 f904 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x212, 0x0000);         //Начало по вертикали
 80032c4:	2100      	movs	r1, #0
 80032c6:	f240 2012 	movw	r0, #530	; 0x212
 80032ca:	f000 f8ff 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x213, 0x013f);         //Конец по вертикали
 80032ce:	f240 113f 	movw	r1, #319	; 0x13f
 80032d2:	f240 2013 	movw	r0, #531	; 0x213
 80032d6:	f000 f8f9 	bl	80034cc <TFT_sendCmd>
    /* Выделение активной области дисплея для движущегося изображения */
    TFT_sendCmd(0x214, 0x0000);         //Начало по горизонтали
 80032da:	2100      	movs	r1, #0
 80032dc:	f44f 7005 	mov.w	r0, #532	; 0x214
 80032e0:	f000 f8f4 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x215, 0x0000);         //Конец по горизонтали
 80032e4:	2100      	movs	r1, #0
 80032e6:	f240 2015 	movw	r0, #533	; 0x215
 80032ea:	f000 f8ef 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x216, 0x0000);         //Начало по вертикали
 80032ee:	2100      	movs	r1, #0
 80032f0:	f240 2016 	movw	r0, #534	; 0x216
 80032f4:	f000 f8ea 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x217, 0x0000);         //Конец по вертикали
 80032f8:	2100      	movs	r1, #0
 80032fa:	f240 2017 	movw	r0, #535	; 0x217
 80032fe:	f000 f8e5 	bl	80034cc <TFT_sendCmd>
    /* Настройка градации серого */
    TFT_sendCmd(0x300, 0x5343);
 8003302:	f245 3143 	movw	r1, #21315	; 0x5343
 8003306:	f44f 7040 	mov.w	r0, #768	; 0x300
 800330a:	f000 f8df 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x301, 0x1021);
 800330e:	f241 0121 	movw	r1, #4129	; 0x1021
 8003312:	f240 3001 	movw	r0, #769	; 0x301
 8003316:	f000 f8d9 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x302, 0x0003);
 800331a:	2103      	movs	r1, #3
 800331c:	f240 3002 	movw	r0, #770	; 0x302
 8003320:	f000 f8d4 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x303, 0x0011);
 8003324:	2111      	movs	r1, #17
 8003326:	f240 3003 	movw	r0, #771	; 0x303
 800332a:	f000 f8cf 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x304, 0x050a);
 800332e:	f240 510a 	movw	r1, #1290	; 0x50a
 8003332:	f44f 7041 	mov.w	r0, #772	; 0x304
 8003336:	f000 f8c9 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x305, 0x4342);
 800333a:	f244 3142 	movw	r1, #17218	; 0x4342
 800333e:	f240 3005 	movw	r0, #773	; 0x305
 8003342:	f000 f8c3 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x306, 0x1100);
 8003346:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800334a:	f240 3006 	movw	r0, #774	; 0x306
 800334e:	f000 f8bd 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x307, 0x0003);
 8003352:	2103      	movs	r1, #3
 8003354:	f240 3007 	movw	r0, #775	; 0x307
 8003358:	f000 f8b8 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x308, 0x1201);
 800335c:	f241 2101 	movw	r1, #4609	; 0x1201
 8003360:	f44f 7042 	mov.w	r0, #776	; 0x308
 8003364:	f000 f8b2 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x309, 0x050a);
 8003368:	f240 510a 	movw	r1, #1290	; 0x50a
 800336c:	f240 3009 	movw	r0, #777	; 0x309
 8003370:	f000 f8ac 	bl	80034cc <TFT_sendCmd>
    /* Настройка доступа к RAM */ 
    TFT_sendCmd(0x400, 0x4027);
 8003374:	f244 0127 	movw	r1, #16423	; 0x4027
 8003378:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800337c:	f000 f8a6 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x401, 0x0000);
 8003380:	2100      	movs	r1, #0
 8003382:	f240 4001 	movw	r0, #1025	; 0x401
 8003386:	f000 f8a1 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x402, 0x0000);         /* First screen drive position (1) */       
 800338a:	2100      	movs	r1, #0
 800338c:	f240 4002 	movw	r0, #1026	; 0x402
 8003390:	f000 f89c 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x403, 0x013f);         /* First screen drive position (2) */       
 8003394:	f240 113f 	movw	r1, #319	; 0x13f
 8003398:	f240 4003 	movw	r0, #1027	; 0x403
 800339c:	f000 f896 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x404, 0x0000);
 80033a0:	2100      	movs	r1, #0
 80033a2:	f240 4004 	movw	r0, #1028	; 0x404
 80033a6:	f000 f891 	bl	80034cc <TFT_sendCmd>
    //Установка ориентации дисплея
    TFT_setOrientation(orientation);
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f8ad 	bl	800350c <TFT_setOrientation>
    /* Установка текущего пикселя */
    TFT_sendCmd(0x200, 0x0000);         //По горизонтали
 80033b2:	2100      	movs	r1, #0
 80033b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033b8:	f000 f888 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x201, 0x0000);         //По вертикали
 80033bc:	2100      	movs	r1, #0
 80033be:	f240 2001 	movw	r0, #513	; 0x201
 80033c2:	f000 f883 	bl	80034cc <TFT_sendCmd>
    
    TFT_sendCmd(0x100, 0x7120);         //Включение питания дисплея
 80033c6:	f247 1120 	movw	r1, #28960	; 0x7120
 80033ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033ce:	f000 f87d 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x007, 0x0103);         //Разрешение изображения
 80033d2:	f240 1103 	movw	r1, #259	; 0x103
 80033d6:	2007      	movs	r0, #7
 80033d8:	f000 f878 	bl	80034cc <TFT_sendCmd>
    delay_ms(10);
 80033dc:	200a      	movs	r0, #10
 80033de:	f003 fb39 	bl	8006a54 <HAL_Delay>
    TFT_sendCmd(0x007, 0x0113);         //Включение ключей
 80033e2:	f240 1113 	movw	r1, #275	; 0x113
 80033e6:	2007      	movs	r0, #7
 80033e8:	f000 f870 	bl	80034cc <TFT_sendCmd>

    TFT_CS_Set;                         //Поднятие CS, т.к. общение с дисплеем закончено
 80033ec:	2201      	movs	r2, #1
 80033ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f2:	4804      	ldr	r0, [pc, #16]	; (8003404 <TFT_init+0x280>)
 80033f4:	f003 ff68 	bl	80072c8 <HAL_GPIO_WritePin>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200009b0 	.word	0x200009b0
 8003404:	40020400 	.word	0x40020400

08003408 <TFT_fillDisplay>:
//Залитие дисплея указанным цветом
void TFT_fillDisplay(uint16_t color) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
    TFT_CS_Reset;    //Общение на шине именно с дисплеем
 8003412:	2200      	movs	r2, #0
 8003414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003418:	481b      	ldr	r0, [pc, #108]	; (8003488 <TFT_fillDisplay+0x80>)
 800341a:	f003 ff55 	bl	80072c8 <HAL_GPIO_WritePin>
    
    TFT_setWindow(0,0, TFT_Width-1, TFT_Height-1);
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <TFT_fillDisplay+0x84>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <TFT_fillDisplay+0x88>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	3b01      	subs	r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	2100      	movs	r1, #0
 8003430:	2000      	movs	r0, #0
 8003432:	f000 f8e3 	bl	80035fc <TFT_setWindow>
    
    TFT_data;
 8003436:	2201      	movs	r2, #1
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	4816      	ldr	r0, [pc, #88]	; (8003494 <TFT_fillDisplay+0x8c>)
 800343c:	f003 ff44 	bl	80072c8 <HAL_GPIO_WritePin>
    
    for (uint32_t i = TFT_Width*TFT_Height; i != 0; i--) {
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <TFT_fillDisplay+0x84>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <TFT_fillDisplay+0x88>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	fb03 f302 	mul.w	r3, r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e006      	b.n	8003460 <TFT_fillDisplay+0x58>
        TFT_sendData(color);
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f823 	bl	80034a0 <TFT_sendData>
    for (uint32_t i = TFT_Width*TFT_Height; i != 0; i--) {
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3b01      	subs	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f5      	bne.n	8003452 <TFT_fillDisplay+0x4a>
    }
    TFT_CS_Set; //Поднятие CS, т.к. общение с дисплеем закончено
 8003466:	2201      	movs	r2, #1
 8003468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <TFT_fillDisplay+0x80>)
 800346e:	f003 ff2b 	bl	80072c8 <HAL_GPIO_WritePin>
    //Обновление положения курсора
    TFT_cursorX = 0;
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <TFT_fillDisplay+0x90>)
 8003474:	2200      	movs	r2, #0
 8003476:	801a      	strh	r2, [r3, #0]
    TFT_cursorY = 0;
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <TFT_fillDisplay+0x94>)
 800347a:	2200      	movs	r2, #0
 800347c:	801a      	strh	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40020400 	.word	0x40020400
 800348c:	200009be 	.word	0x200009be
 8003490:	200009b6 	.word	0x200009b6
 8003494:	40020800 	.word	0x40020800
 8003498:	200009c0 	.word	0x200009c0
 800349c:	200009b8 	.word	0x200009b8

080034a0 <TFT_sendData>:

//Функция отправки 16 бит данных
void TFT_sendData(uint16_t data) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
    //Отправка данных по SPI
    #ifndef TFT_SOFTSPI
    //Буффер данных для отправки
    uint16_t buff[1] = {data};
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(_displaySPI, (uint8_t *)buff, 1, 0xFF);
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <TFT_sendData+0x28>)
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	f107 010c 	add.w	r1, r7, #12
 80034b6:	23ff      	movs	r3, #255	; 0xff
 80034b8:	2201      	movs	r2, #1
 80034ba:	f006 f856 	bl	800956a <HAL_SPI_Transmit>
        TFT_SCK_Set;
        TFT_SCK_Reset;
        mask >>= 1;
    }
    #endif
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200009b0 	.word	0x200009b0

080034cc <TFT_sendCmd>:
        mask >>= 1;
    }
    #endif
}
//Функция отправки команды
void TFT_sendCmd(uint16_t cmd, uint16_t data) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	460a      	mov	r2, r1
 80034d6:	80fb      	strh	r3, [r7, #6]
 80034d8:	4613      	mov	r3, r2
 80034da:	80bb      	strh	r3, [r7, #4]
    //Установка RS в режим отправки команд
    TFT_index;
 80034dc:	2200      	movs	r2, #0
 80034de:	2140      	movs	r1, #64	; 0x40
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <TFT_sendCmd+0x3c>)
 80034e2:	f003 fef1 	bl	80072c8 <HAL_GPIO_WritePin>
    //Отправка команды
    TFT_sendData(cmd);
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ffd9 	bl	80034a0 <TFT_sendData>
    //Установка RS в режим отправки данных
    TFT_data;
 80034ee:	2201      	movs	r2, #1
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <TFT_sendCmd+0x3c>)
 80034f4:	f003 fee8 	bl	80072c8 <HAL_GPIO_WritePin>
    //Отправка данных
    TFT_sendData(data);
 80034f8:	88bb      	ldrh	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ffd0 	bl	80034a0 <TFT_sendData>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40020800 	.word	0x40020800

0800350c <TFT_setOrientation>:

//Установка текущей ориентации
void TFT_setOrientation(uint8_t orientation) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
    TFT_currentOrientation = orientation;
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <TFT_setOrientation+0xdc>)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	7013      	strb	r3, [r2, #0]
    switch(orientation) {
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d85e      	bhi.n	80035e0 <TFT_setOrientation+0xd4>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <TFT_setOrientation+0x1c>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	08003563 	.word	0x08003563
 8003530:	0800358d 	.word	0x0800358d
 8003534:	080035b7 	.word	0x080035b7
        //Портретная ориентация (верх со стороны 1-го пина)
        case 0:
            TFT_sendCmd(0x003, 0x10A0);
 8003538:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
 800353c:	2003      	movs	r0, #3
 800353e:	f7ff ffc5 	bl	80034cc <TFT_sendCmd>
            lcdWidth = TFT_Width = 240;
 8003542:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <TFT_setOrientation+0xe0>)
 8003544:	22f0      	movs	r2, #240	; 0xf0
 8003546:	801a      	strh	r2, [r3, #0]
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <TFT_setOrientation+0xe0>)
 800354a:	881a      	ldrh	r2, [r3, #0]
 800354c:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <TFT_setOrientation+0xe4>)
 800354e:	801a      	strh	r2, [r3, #0]
            lcdHeight = TFT_Height = 320;
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <TFT_setOrientation+0xe8>)
 8003552:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <TFT_setOrientation+0xe8>)
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <TFT_setOrientation+0xec>)
 800355e:	801a      	strh	r2, [r3, #0]
            break;
 8003560:	e03e      	b.n	80035e0 <TFT_setOrientation+0xd4>
        //Альбомная ориентация (левый верхний угол со стороны шлейфа тачскрина)
        case 1:
            TFT_sendCmd(0x003, 0x1098);
 8003562:	f241 0198 	movw	r1, #4248	; 0x1098
 8003566:	2003      	movs	r0, #3
 8003568:	f7ff ffb0 	bl	80034cc <TFT_sendCmd>
            lcdWidth = TFT_Width = 320;
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <TFT_setOrientation+0xe0>)
 800356e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <TFT_setOrientation+0xe0>)
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <TFT_setOrientation+0xe4>)
 800357a:	801a      	strh	r2, [r3, #0]
            TFT_Height = TFT_Height= 240;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <TFT_setOrientation+0xe8>)
 800357e:	22f0      	movs	r2, #240	; 0xf0
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <TFT_setOrientation+0xe8>)
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <TFT_setOrientation+0xe8>)
 8003588:	801a      	strh	r2, [r3, #0]
            break;
 800358a:	e029      	b.n	80035e0 <TFT_setOrientation+0xd4>
        //Портретная ориентация (верх со стороны 40-го пина)
        case 2:
            TFT_sendCmd(0x003, 0x1080);
 800358c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8003590:	2003      	movs	r0, #3
 8003592:	f7ff ff9b 	bl	80034cc <TFT_sendCmd>
            lcdWidth = TFT_Width = 240;
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <TFT_setOrientation+0xe0>)
 8003598:	22f0      	movs	r2, #240	; 0xf0
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <TFT_setOrientation+0xe0>)
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <TFT_setOrientation+0xe4>)
 80035a2:	801a      	strh	r2, [r3, #0]
            lcdHeight = TFT_Height = 320;
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <TFT_setOrientation+0xe8>)
 80035a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <TFT_setOrientation+0xe8>)
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <TFT_setOrientation+0xec>)
 80035b2:	801a      	strh	r2, [r3, #0]
            break;
 80035b4:	e014      	b.n	80035e0 <TFT_setOrientation+0xd4>
        //Альбомная ориентация (левый верхний угол со стороны вывода №1)
        case 3:
            TFT_sendCmd(0x003, 0x10A8);
 80035b6:	f241 01a8 	movw	r1, #4264	; 0x10a8
 80035ba:	2003      	movs	r0, #3
 80035bc:	f7ff ff86 	bl	80034cc <TFT_sendCmd>
            lcdWidth = TFT_Width = 320;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <TFT_setOrientation+0xe0>)
 80035c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <TFT_setOrientation+0xe0>)
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <TFT_setOrientation+0xe4>)
 80035ce:	801a      	strh	r2, [r3, #0]
            lcdHeight =TFT_Height = 240;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <TFT_setOrientation+0xe8>)
 80035d2:	22f0      	movs	r2, #240	; 0xf0
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <TFT_setOrientation+0xe8>)
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <TFT_setOrientation+0xec>)
 80035dc:	801a      	strh	r2, [r3, #0]
            break;
 80035de:	bf00      	nop
    }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200009b4 	.word	0x200009b4
 80035ec:	200009be 	.word	0x200009be
 80035f0:	200009bc 	.word	0x200009bc
 80035f4:	200009b6 	.word	0x200009b6
 80035f8:	200009ba 	.word	0x200009ba

080035fc <TFT_setWindow>:
//Включить дисплей
void TFT_On(void) {
    TFT_init(TFT_currentOrientation, _displaySPI);
}
//Установить рабочую область от точки (x0,y0) до (x1, y1)
void TFT_setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	4604      	mov	r4, r0
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4623      	mov	r3, r4
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	4603      	mov	r3, r0
 8003610:	80bb      	strh	r3, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	807b      	strh	r3, [r7, #2]
 8003616:	4613      	mov	r3, r2
 8003618:	803b      	strh	r3, [r7, #0]
    uint16_t x0a, x1a, y0a, y1a;

    switch(TFT_currentOrientation) {
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <TFT_setWindow+0x14c>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d046      	beq.n	80036b0 <TFT_setWindow+0xb4>
 8003622:	2b03      	cmp	r3, #3
 8003624:	dc5f      	bgt.n	80036e6 <TFT_setWindow+0xea>
 8003626:	2b01      	cmp	r3, #1
 8003628:	d002      	beq.n	8003630 <TFT_setWindow+0x34>
 800362a:	2b02      	cmp	r3, #2
 800362c:	d01b      	beq.n	8003666 <TFT_setWindow+0x6a>
 800362e:	e05a      	b.n	80036e6 <TFT_setWindow+0xea>
        case 1:
            x0a = x0;
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	81fb      	strh	r3, [r7, #14]
            x1a = x1;
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	81bb      	strh	r3, [r7, #12]
            y0a = y0;
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	817b      	strh	r3, [r7, #10]
            y1a = y1;
 800363c:	883b      	ldrh	r3, [r7, #0]
 800363e:	813b      	strh	r3, [r7, #8]

            x0 = y0a;
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	80fb      	strh	r3, [r7, #6]
            x1 = y1a;
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	807b      	strh	r3, [r7, #2]
            y0 = TFT_Width - 1 - x1a;
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <TFT_setWindow+0x150>)
 800364a:	881a      	ldrh	r2, [r3, #0]
 800364c:	89bb      	ldrh	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	80bb      	strh	r3, [r7, #4]
            y1 = TFT_Width - 1 - x0a;
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <TFT_setWindow+0x150>)
 8003658:	881a      	ldrh	r2, [r3, #0]
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	803b      	strh	r3, [r7, #0]
            break;
 8003664:	e03f      	b.n	80036e6 <TFT_setWindow+0xea>
        case 2:
            x0a = x0;
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	81fb      	strh	r3, [r7, #14]
            x1a = x1;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	81bb      	strh	r3, [r7, #12]
            y0a = y0;
 800366e:	88bb      	ldrh	r3, [r7, #4]
 8003670:	817b      	strh	r3, [r7, #10]
            y1a = y1;
 8003672:	883b      	ldrh	r3, [r7, #0]
 8003674:	813b      	strh	r3, [r7, #8]

            x0 = TFT_Width - 1 - x1a;
 8003676:	4b35      	ldr	r3, [pc, #212]	; (800374c <TFT_setWindow+0x150>)
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	89bb      	ldrh	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	80fb      	strh	r3, [r7, #6]
            x1 = TFT_Width - 1 - x0a;
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <TFT_setWindow+0x150>)
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	807b      	strh	r3, [r7, #2]
            y0 = TFT_Height - 1 - y1a;
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <TFT_setWindow+0x154>)
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	80bb      	strh	r3, [r7, #4]
            y1 = TFT_Height - 1 - y0a;
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <TFT_setWindow+0x154>)
 80036a2:	881a      	ldrh	r2, [r3, #0]
 80036a4:	897b      	ldrh	r3, [r7, #10]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	803b      	strh	r3, [r7, #0]
            break;
 80036ae:	e01a      	b.n	80036e6 <TFT_setWindow+0xea>
        case 3:
            x0a = x0;
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	81fb      	strh	r3, [r7, #14]
            x1a = x1;
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	81bb      	strh	r3, [r7, #12]
            y0a = y0;
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	817b      	strh	r3, [r7, #10]
            y1a = y1;
 80036bc:	883b      	ldrh	r3, [r7, #0]
 80036be:	813b      	strh	r3, [r7, #8]

            x0 = TFT_Height - 1 - y1a;
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <TFT_setWindow+0x154>)
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	80fb      	strh	r3, [r7, #6]
            x1 = TFT_Height - 1 - y0a;
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <TFT_setWindow+0x154>)
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	807b      	strh	r3, [r7, #2]
            y0 = x0a;
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	80bb      	strh	r3, [r7, #4]
            y1 = x1a;
 80036e0:	89bb      	ldrh	r3, [r7, #12]
 80036e2:	803b      	strh	r3, [r7, #0]
            break;
 80036e4:	bf00      	nop
    }
    TFT_sendCmd(0x0210, x0);
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 7004 	mov.w	r0, #528	; 0x210
 80036ee:	f7ff feed 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x0211, x1);
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f240 2011 	movw	r0, #529	; 0x211
 80036fa:	f7ff fee7 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x0212, y0);
 80036fe:	88bb      	ldrh	r3, [r7, #4]
 8003700:	4619      	mov	r1, r3
 8003702:	f240 2012 	movw	r0, #530	; 0x212
 8003706:	f7ff fee1 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x0213, y1);
 800370a:	883b      	ldrh	r3, [r7, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f240 2013 	movw	r0, #531	; 0x213
 8003712:	f7ff fedb 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x0200, x0);
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800371e:	f7ff fed5 	bl	80034cc <TFT_sendCmd>
    TFT_sendCmd(0x0201, y0);
 8003722:	88bb      	ldrh	r3, [r7, #4]
 8003724:	4619      	mov	r1, r3
 8003726:	f240 2001 	movw	r0, #513	; 0x201
 800372a:	f7ff fecf 	bl	80034cc <TFT_sendCmd>
    TFT_index;                   //Отправка команды
 800372e:	2200      	movs	r2, #0
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	4808      	ldr	r0, [pc, #32]	; (8003754 <TFT_setWindow+0x158>)
 8003734:	f003 fdc8 	bl	80072c8 <HAL_GPIO_WritePin>
    TFT_sendData(0x202);         //Команда, значащая что дальше начнётся запись в буфер кадра
 8003738:	f240 2002 	movw	r0, #514	; 0x202
 800373c:	f7ff feb0 	bl	80034a0 <TFT_sendData>

}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}
 8003748:	200009b4 	.word	0x200009b4
 800374c:	200009be 	.word	0x200009be
 8003750:	200009b6 	.word	0x200009b6
 8003754:	40020800 	.word	0x40020800

08003758 <TFT_setColor>:
//Установить текущий цвет кисти
void TFT_setColor(uint16_t color) {
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
    currentColor = color;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <TFT_setColor+0x1c>)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	8013      	strh	r3, [r2, #0]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	200009c2 	.word	0x200009c2

08003778 <TFT_setCursor>:
//Получить текущий цвет кисти
uint16_t TFT_getColor(void) {
    return currentColor;
}
//Установить координаты курсора по X и Y
void TFT_setCursor(uint16_t X, uint16_t Y) {
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	460a      	mov	r2, r1
 8003782:	80fb      	strh	r3, [r7, #6]
 8003784:	4613      	mov	r3, r2
 8003786:	80bb      	strh	r3, [r7, #4]
    TFT_cursorX = X;
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <TFT_setCursor+0x28>)
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	8013      	strh	r3, [r2, #0]
    TFT_cursorY = Y;
 800378e:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <TFT_setCursor+0x2c>)
 8003790:	88bb      	ldrh	r3, [r7, #4]
 8003792:	8013      	strh	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	200009c0 	.word	0x200009c0
 80037a4:	200009b8 	.word	0x200009b8

080037a8 <TFT_drawPixel>:
uint16_t TFT_getCursorY(void) {
    return TFT_cursorY;
}

//Закрасить пиксель по координатам X,Y указанным цветом
void TFT_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
 80037b2:	460b      	mov	r3, r1
 80037b4:	80bb      	strh	r3, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	807b      	strh	r3, [r7, #2]

	//if ((x >= TFT_Width) || (y >= TFT_Height)) return;

    TFT_CS_Reset;                   //Обращение к дисплею
 80037ba:	2200      	movs	r2, #0
 80037bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037c0:	4811      	ldr	r0, [pc, #68]	; (8003808 <TFT_drawPixel+0x60>)
 80037c2:	f003 fd81 	bl	80072c8 <HAL_GPIO_WritePin>
    TFT_setWindow(x,y,x,y);
 80037c6:	88bb      	ldrh	r3, [r7, #4]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	88b9      	ldrh	r1, [r7, #4]
 80037cc:	88f8      	ldrh	r0, [r7, #6]
 80037ce:	f7ff ff15 	bl	80035fc <TFT_setWindow>
    TFT_data;                       //Отправка данных
 80037d2:	2201      	movs	r2, #1
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <TFT_drawPixel+0x64>)
 80037d8:	f003 fd76 	bl	80072c8 <HAL_GPIO_WritePin>
    TFT_sendData(color);            //Указание цвета закрашивания пикселя
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fe5e 	bl	80034a0 <TFT_sendData>
    TFT_CS_Set;                     //Окончание общения с дисплеем
 80037e4:	2201      	movs	r2, #1
 80037e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037ea:	4807      	ldr	r0, [pc, #28]	; (8003808 <TFT_drawPixel+0x60>)
 80037ec:	f003 fd6c 	bl	80072c8 <HAL_GPIO_WritePin>
    //Обновление положения курсора
    TFT_cursorX = x+1;
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	3301      	adds	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <TFT_drawPixel+0x68>)
 80037f8:	801a      	strh	r2, [r3, #0]
    TFT_cursorY = y;
 80037fa:	4a06      	ldr	r2, [pc, #24]	; (8003814 <TFT_drawPixel+0x6c>)
 80037fc:	88bb      	ldrh	r3, [r7, #4]
 80037fe:	8013      	strh	r3, [r2, #0]
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	200009c0 	.word	0x200009c0
 8003814:	200009b8 	.word	0x200009b8

08003818 <TFT_drawLine>:
    TFT_cursorX = x+1;
    TFT_cursorY = y;
}

//Нарисовать линию начиная с x0,y0, заканчивая x1,y1 указанным цветом
void TFT_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t size, uint16_t color) {
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af02      	add	r7, sp, #8
 800381e:	4604      	mov	r4, r0
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4623      	mov	r3, r4
 8003828:	80fb      	strh	r3, [r7, #6]
 800382a:	4603      	mov	r3, r0
 800382c:	80bb      	strh	r3, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	807b      	strh	r3, [r7, #2]
 8003832:	4613      	mov	r3, r2
 8003834:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1-x0);
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bfb8      	it	lt
 8003840:	425b      	neglt	r3, r3
 8003842:	82bb      	strh	r3, [r7, #20]
    int16_t sx = x0 < x1 ? 1 : -1;
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	429a      	cmp	r2, r3
 800384a:	d201      	bcs.n	8003850 <TFT_drawLine+0x38>
 800384c:	2301      	movs	r3, #1
 800384e:	e001      	b.n	8003854 <TFT_drawLine+0x3c>
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	827b      	strh	r3, [r7, #18]
    int16_t dy = -abs(y1-y0), sy = y0 < y1 ? 1 : -1;
 8003856:	883a      	ldrh	r2, [r7, #0]
 8003858:	88bb      	ldrh	r3, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfb8      	it	lt
 8003860:	425b      	neglt	r3, r3
 8003862:	b29b      	uxth	r3, r3
 8003864:	425b      	negs	r3, r3
 8003866:	b29b      	uxth	r3, r3
 8003868:	823b      	strh	r3, [r7, #16]
 800386a:	88ba      	ldrh	r2, [r7, #4]
 800386c:	883b      	ldrh	r3, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d201      	bcs.n	8003876 <TFT_drawLine+0x5e>
 8003872:	2301      	movs	r3, #1
 8003874:	e001      	b.n	800387a <TFT_drawLine+0x62>
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx+dy, e2;
 800387c:	8aba      	ldrh	r2, [r7, #20]
 800387e:	8a3b      	ldrh	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	82fb      	strh	r3, [r7, #22]
    for (;;){
        TFT_fillRectangle(x0,y0,size, size, color);
 8003886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800388a:	b29a      	uxth	r2, r3
 800388c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003890:	b29c      	uxth	r4, r3
 8003892:	88b9      	ldrh	r1, [r7, #4]
 8003894:	88f8      	ldrh	r0, [r7, #6]
 8003896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	4623      	mov	r3, r4
 800389c:	f000 f92c 	bl	8003af8 <TFT_fillRectangle>
        e2 = 2*err;
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	81bb      	strh	r3, [r7, #12]
        if (e2 >= dy) {
 80038a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80038ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	db0c      	blt.n	80038ce <TFT_drawLine+0xb6>
            if (x0 == x1) break;
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d01c      	beq.n	80038f6 <TFT_drawLine+0xde>
            err += dy; x0 += sx;
 80038bc:	8afa      	ldrh	r2, [r7, #22]
 80038be:	8a3b      	ldrh	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	82fb      	strh	r3, [r7, #22]
 80038c6:	8a7a      	ldrh	r2, [r7, #18]
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	4413      	add	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {
 80038ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80038d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	dcd5      	bgt.n	8003886 <TFT_drawLine+0x6e>
            if (y0 == y1) break;
 80038da:	88ba      	ldrh	r2, [r7, #4]
 80038dc:	883b      	ldrh	r3, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d00b      	beq.n	80038fa <TFT_drawLine+0xe2>
            err += dx; y0 += sy;
 80038e2:	8afa      	ldrh	r2, [r7, #22]
 80038e4:	8abb      	ldrh	r3, [r7, #20]
 80038e6:	4413      	add	r3, r2
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	82fb      	strh	r3, [r7, #22]
 80038ec:	89fa      	ldrh	r2, [r7, #14]
 80038ee:	88bb      	ldrh	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	80bb      	strh	r3, [r7, #4]
        TFT_fillRectangle(x0,y0,size, size, color);
 80038f4:	e7c7      	b.n	8003886 <TFT_drawLine+0x6e>
            if (x0 == x1) break;
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <TFT_drawLine+0xe4>
            if (y0 == y1) break;
 80038fa:	bf00      	nop
        }
    }
    //Обновление положения курсора
    TFT_cursorX = x1+1;
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	3301      	adds	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	4b04      	ldr	r3, [pc, #16]	; (8003914 <TFT_drawLine+0xfc>)
 8003904:	801a      	strh	r2, [r3, #0]
    TFT_cursorY = y1;
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <TFT_drawLine+0x100>)
 8003908:	883b      	ldrh	r3, [r7, #0]
 800390a:	8013      	strh	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	200009c0 	.word	0x200009c0
 8003918:	200009b8 	.word	0x200009b8

0800391c <TFT_drawLineHorizontal>:
//Нарисовать горизонтальную линию начиная с точки (x:y) длиной len указанным цветом
void TFT_drawLineHorizontal(uint16_t x, uint16_t y, uint16_t len, uint8_t size, uint16_t color) {
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4623      	mov	r3, r4
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	4603      	mov	r3, r0
 8003930:	80bb      	strh	r3, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
 8003936:	4613      	mov	r3, r2
 8003938:	707b      	strb	r3, [r7, #1]
    TFT_CS_Reset;                            //Обращение к дисплею
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003940:	4820      	ldr	r0, [pc, #128]	; (80039c4 <TFT_drawLineHorizontal+0xa8>)
 8003942:	f003 fcc1 	bl	80072c8 <HAL_GPIO_WritePin>
    TFT_setWindow(x,y,x+len-1,y+size-1);
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	4413      	add	r3, r2
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29c      	uxth	r4, r3
 8003952:	787b      	ldrb	r3, [r7, #1]
 8003954:	b29a      	uxth	r2, r3
 8003956:	88bb      	ldrh	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29b      	uxth	r3, r3
 8003960:	88b9      	ldrh	r1, [r7, #4]
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	4622      	mov	r2, r4
 8003966:	f7ff fe49 	bl	80035fc <TFT_setWindow>
    TFT_data;                                //Отправка данных
 800396a:	2201      	movs	r2, #1
 800396c:	2140      	movs	r1, #64	; 0x40
 800396e:	4816      	ldr	r0, [pc, #88]	; (80039c8 <TFT_drawLineHorizontal+0xac>)
 8003970:	f003 fcaa 	bl	80072c8 <HAL_GPIO_WritePin>
    for(uint16_t i = 0; i < len*size; i++) TFT_sendData(color); //Рисование линии указанным цветом
 8003974:	2300      	movs	r3, #0
 8003976:	81fb      	strh	r3, [r7, #14]
 8003978:	e006      	b.n	8003988 <TFT_drawLineHorizontal+0x6c>
 800397a:	8c3b      	ldrh	r3, [r7, #32]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fd8f 	bl	80034a0 <TFT_sendData>
 8003982:	89fb      	ldrh	r3, [r7, #14]
 8003984:	3301      	adds	r3, #1
 8003986:	81fb      	strh	r3, [r7, #14]
 8003988:	89fa      	ldrh	r2, [r7, #14]
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	7879      	ldrb	r1, [r7, #1]
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	429a      	cmp	r2, r3
 8003994:	dbf1      	blt.n	800397a <TFT_drawLineHorizontal+0x5e>
    TFT_CS_Set;                              //Окончание общения с дисплеем
 8003996:	2201      	movs	r2, #1
 8003998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800399c:	4809      	ldr	r0, [pc, #36]	; (80039c4 <TFT_drawLineHorizontal+0xa8>)
 800399e:	f003 fc93 	bl	80072c8 <HAL_GPIO_WritePin>
    //Обновление положения курсора
    TFT_cursorX = x+size+1;
 80039a2:	787b      	ldrb	r3, [r7, #1]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	4413      	add	r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <TFT_drawLineHorizontal+0xb0>)
 80039b2:	801a      	strh	r2, [r3, #0]
    TFT_cursorY = y;
 80039b4:	4a06      	ldr	r2, [pc, #24]	; (80039d0 <TFT_drawLineHorizontal+0xb4>)
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	8013      	strh	r3, [r2, #0]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40020800 	.word	0x40020800
 80039cc:	200009c0 	.word	0x200009c0
 80039d0:	200009b8 	.word	0x200009b8

080039d4 <TFT_drawLineVertical>:
//Нарисовать вертикальную линию начиная с точки (x:y) длиной len указанным цветом
void TFT_drawLineVertical(uint16_t x, uint16_t y, uint16_t len, uint8_t size, uint16_t color) {
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4623      	mov	r3, r4
 80039e4:	80fb      	strh	r3, [r7, #6]
 80039e6:	4603      	mov	r3, r0
 80039e8:	80bb      	strh	r3, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	807b      	strh	r3, [r7, #2]
 80039ee:	4613      	mov	r3, r2
 80039f0:	707b      	strb	r3, [r7, #1]
    TFT_CS_Reset;                            //Обращение к дисплею
 80039f2:	2200      	movs	r2, #0
 80039f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039f8:	481f      	ldr	r0, [pc, #124]	; (8003a78 <TFT_drawLineVertical+0xa4>)
 80039fa:	f003 fc65 	bl	80072c8 <HAL_GPIO_WritePin>
    TFT_setWindow(x,y,x+size-1,y+len-1);
 80039fe:	787b      	ldrb	r3, [r7, #1]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	4413      	add	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29c      	uxth	r4, r3
 8003a0c:	88ba      	ldrh	r2, [r7, #4]
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	4413      	add	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	88b9      	ldrh	r1, [r7, #4]
 8003a1a:	88f8      	ldrh	r0, [r7, #6]
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	f7ff fded 	bl	80035fc <TFT_setWindow>
    TFT_data;                                //Отправка данных
 8003a22:	2201      	movs	r2, #1
 8003a24:	2140      	movs	r1, #64	; 0x40
 8003a26:	4815      	ldr	r0, [pc, #84]	; (8003a7c <TFT_drawLineVertical+0xa8>)
 8003a28:	f003 fc4e 	bl	80072c8 <HAL_GPIO_WritePin>
    for(uint16_t i = 0; i < len*size; i++) TFT_sendData(color); //Рисование линии указанным цветом
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	81fb      	strh	r3, [r7, #14]
 8003a30:	e006      	b.n	8003a40 <TFT_drawLineVertical+0x6c>
 8003a32:	8c3b      	ldrh	r3, [r7, #32]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fd33 	bl	80034a0 <TFT_sendData>
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	81fb      	strh	r3, [r7, #14]
 8003a40:	89fa      	ldrh	r2, [r7, #14]
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	7879      	ldrb	r1, [r7, #1]
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dbf1      	blt.n	8003a32 <TFT_drawLineVertical+0x5e>
    TFT_CS_Set;                              //Окончание общения с дисплеем
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a54:	4808      	ldr	r0, [pc, #32]	; (8003a78 <TFT_drawLineVertical+0xa4>)
 8003a56:	f003 fc37 	bl	80072c8 <HAL_GPIO_WritePin>
    //Обновление положения курсора
    TFT_cursorX = x+1;
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <TFT_drawLineVertical+0xac>)
 8003a62:	801a      	strh	r2, [r3, #0]
    TFT_cursorY = y+len;
 8003a64:	88ba      	ldrh	r2, [r7, #4]
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	4413      	add	r3, r2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <TFT_drawLineVertical+0xb0>)
 8003a6e:	801a      	strh	r2, [r3, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	200009c0 	.word	0x200009c0
 8003a84:	200009b8 	.word	0x200009b8

08003a88 <TFT_drawTriangle>:
    TFT_drawLineHorizontal(x, y+height-size, width, size, color);
    TFT_drawLineVertical(x, y, height, size, color);
    TFT_drawLineVertical(x+width-size, y, height, size, color);
}
//Нарисовать треугольник по координатам вершин и указанным цветом
void TFT_drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint16_t color) {
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	80fb      	strh	r3, [r7, #6]
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	80bb      	strh	r3, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	803b      	strh	r3, [r7, #0]
    TFT_drawLine(x0, y0, x1, y1, size, color);
 8003aa6:	883c      	ldrh	r4, [r7, #0]
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	88b9      	ldrh	r1, [r7, #4]
 8003aac:	88f8      	ldrh	r0, [r7, #6]
 8003aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4623      	mov	r3, r4
 8003aba:	f7ff fead 	bl	8003818 <TFT_drawLine>
    TFT_drawLine(x1, y1, x2, y2, size, color);
 8003abe:	8bbc      	ldrh	r4, [r7, #28]
 8003ac0:	8b3a      	ldrh	r2, [r7, #24]
 8003ac2:	8839      	ldrh	r1, [r7, #0]
 8003ac4:	8878      	ldrh	r0, [r7, #2]
 8003ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7ff fea1 	bl	8003818 <TFT_drawLine>
    TFT_drawLine(x2, y2, x0, y0, size, color);
 8003ad6:	88bc      	ldrh	r4, [r7, #4]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	8bb9      	ldrh	r1, [r7, #28]
 8003adc:	8b38      	ldrh	r0, [r7, #24]
 8003ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4623      	mov	r3, r4
 8003aea:	f7ff fe95 	bl	8003818 <TFT_drawLine>
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd90      	pop	{r4, r7, pc}
	...

08003af8 <TFT_fillRectangle>:
//Залить прямоугольник начиная с точки (x:y), с указанной длиной, шириной и цветом
void TFT_fillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	80fb      	strh	r3, [r7, #6]
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	80bb      	strh	r3, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	807b      	strh	r3, [r7, #2]
 8003b12:	4613      	mov	r3, r2
 8003b14:	803b      	strh	r3, [r7, #0]
    TFT_CS_Reset;                                   //Обращение к дисплею
 8003b16:	2200      	movs	r2, #0
 8003b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b1c:	4819      	ldr	r0, [pc, #100]	; (8003b84 <TFT_fillRectangle+0x8c>)
 8003b1e:	f003 fbd3 	bl	80072c8 <HAL_GPIO_WritePin>
    TFT_setWindow(x,y,x+width-1,y+height-1);
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	4413      	add	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29c      	uxth	r4, r3
 8003b2e:	88ba      	ldrh	r2, [r7, #4]
 8003b30:	883b      	ldrh	r3, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	88b9      	ldrh	r1, [r7, #4]
 8003b3c:	88f8      	ldrh	r0, [r7, #6]
 8003b3e:	4622      	mov	r2, r4
 8003b40:	f7ff fd5c 	bl	80035fc <TFT_setWindow>
    TFT_data;                                       //Отправка данных
 8003b44:	2201      	movs	r2, #1
 8003b46:	2140      	movs	r1, #64	; 0x40
 8003b48:	480f      	ldr	r0, [pc, #60]	; (8003b88 <TFT_fillRectangle+0x90>)
 8003b4a:	f003 fbbd 	bl	80072c8 <HAL_GPIO_WritePin>
    //Указание цвета закрашивания пикселя    
    for (uint32_t i = width*height; i != 0; i--) {
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	883a      	ldrh	r2, [r7, #0]
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e006      	b.n	8003b68 <TFT_fillRectangle+0x70>
        TFT_sendData(color);
 8003b5a:	8c3b      	ldrh	r3, [r7, #32]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fc9f 	bl	80034a0 <TFT_sendData>
    for (uint32_t i = width*height; i != 0; i--) {
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f5      	bne.n	8003b5a <TFT_fillRectangle+0x62>
    }                    
    TFT_CS_Set;                                     //Окончание общения с дисплеем
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b74:	4803      	ldr	r0, [pc, #12]	; (8003b84 <TFT_fillRectangle+0x8c>)
 8003b76:	f003 fba7 	bl	80072c8 <HAL_GPIO_WritePin>

}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40020400 	.word	0x40020400
 8003b88:	40020800 	.word	0x40020800

08003b8c <TFT_drawQuadrant>:
     //Обновление положения курсора
    TFT_cursorX = x;
    TFT_cursorY = y;
}
//Функция для рисования четверти круга с центром (x:y), с указанным радиусом, фазой и цветом
void TFT_drawQuadrant(int16_t x, int16_t y, int16_t radius, uint8_t c, uint8_t size, uint16_t color) {
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	4604      	mov	r4, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	80fb      	strh	r3, [r7, #6]
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80bb      	strh	r3, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - radius;
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	f1c3 0301 	rsb	r3, r3, #1
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * radius;
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	03d2      	lsls	r2, r2, #15
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	827b      	strh	r3, [r7, #18]
  int16_t x_     = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	823b      	strh	r3, [r7, #16]
  int16_t y_     = radius;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	81fb      	strh	r3, [r7, #14]

  while (x_ < y_) {
 8003bce:	e0cd      	b.n	8003d6c <TFT_drawQuadrant+0x1e0>
    if (f >= 0) {
 8003bd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0e      	blt.n	8003bf6 <TFT_drawQuadrant+0x6a>
      y_--;
 8003bd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8003be4:	8a7b      	ldrh	r3, [r7, #18]
 8003be6:	3302      	adds	r3, #2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8003bec:	8afa      	ldrh	r2, [r7, #22]
 8003bee:	8a7b      	ldrh	r3, [r7, #18]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	82fb      	strh	r3, [r7, #22]
    }
    x_++;
 8003bf6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8003c02:	8abb      	ldrh	r3, [r7, #20]
 8003c04:	3302      	adds	r3, #2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8003c0a:	8afa      	ldrh	r2, [r7, #22]
 8003c0c:	8abb      	ldrh	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	82fb      	strh	r3, [r7, #22]
    if (c & 0x4) {
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d025      	beq.n	8003c6a <TFT_drawQuadrant+0xde>
      TFT_fillRectangle(x + x_, y + y_, size, size, color);
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	8a3b      	ldrh	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	b298      	uxth	r0, r3
 8003c26:	88ba      	ldrh	r2, [r7, #4]
 8003c28:	89fb      	ldrh	r3, [r7, #14]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	b299      	uxth	r1, r3
 8003c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c38:	b29c      	uxth	r4, r3
 8003c3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4623      	mov	r3, r4
 8003c40:	f7ff ff5a 	bl	8003af8 <TFT_fillRectangle>
      TFT_fillRectangle(x + y_, y + x_, size, size, color);
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	4413      	add	r3, r2
 8003c4a:	b298      	uxth	r0, r3
 8003c4c:	88ba      	ldrh	r2, [r7, #4]
 8003c4e:	8a3b      	ldrh	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	b299      	uxth	r1, r3
 8003c54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c5e:	b29c      	uxth	r4, r3
 8003c60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4623      	mov	r3, r4
 8003c66:	f7ff ff47 	bl	8003af8 <TFT_fillRectangle>
    }
    if (c & 0x2) {
 8003c6a:	787b      	ldrb	r3, [r7, #1]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d025      	beq.n	8003cc0 <TFT_drawQuadrant+0x134>
      TFT_fillRectangle(x + x_, y - y_, size, size, color);
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	8a3b      	ldrh	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	b298      	uxth	r0, r3
 8003c7c:	88ba      	ldrh	r2, [r7, #4]
 8003c7e:	89fb      	ldrh	r3, [r7, #14]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	b299      	uxth	r1, r3
 8003c84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c8e:	b29c      	uxth	r4, r3
 8003c90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	4623      	mov	r3, r4
 8003c96:	f7ff ff2f 	bl	8003af8 <TFT_fillRectangle>
      TFT_fillRectangle(x + y_, y -x_, size, size, color);
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b298      	uxth	r0, r3
 8003ca2:	88ba      	ldrh	r2, [r7, #4]
 8003ca4:	8a3b      	ldrh	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	b299      	uxth	r1, r3
 8003caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cb4:	b29c      	uxth	r4, r3
 8003cb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f7ff ff1c 	bl	8003af8 <TFT_fillRectangle>
    }
    if (c & 0x8) {
 8003cc0:	787b      	ldrb	r3, [r7, #1]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d025      	beq.n	8003d16 <TFT_drawQuadrant+0x18a>
      TFT_fillRectangle(x - y_, y + x_, size, size, color);
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b298      	uxth	r0, r3
 8003cd2:	88ba      	ldrh	r2, [r7, #4]
 8003cd4:	8a3b      	ldrh	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ce4:	b29c      	uxth	r4, r3
 8003ce6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4623      	mov	r3, r4
 8003cec:	f7ff ff04 	bl	8003af8 <TFT_fillRectangle>
      TFT_fillRectangle(x - x_, y + y_, size, size, color);
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	8a3b      	ldrh	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	b298      	uxth	r0, r3
 8003cf8:	88ba      	ldrh	r2, [r7, #4]
 8003cfa:	89fb      	ldrh	r3, [r7, #14]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	b299      	uxth	r1, r3
 8003d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d0a:	b29c      	uxth	r4, r3
 8003d0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4623      	mov	r3, r4
 8003d12:	f7ff fef1 	bl	8003af8 <TFT_fillRectangle>
    }
    if (c & 0x1) {
 8003d16:	787b      	ldrb	r3, [r7, #1]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d025      	beq.n	8003d6c <TFT_drawQuadrant+0x1e0>
      TFT_fillRectangle(x - y_, y - x_, size, size, color);
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	b298      	uxth	r0, r3
 8003d28:	88ba      	ldrh	r2, [r7, #4]
 8003d2a:	8a3b      	ldrh	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	b299      	uxth	r1, r3
 8003d30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d3a:	b29c      	uxth	r4, r3
 8003d3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4623      	mov	r3, r4
 8003d42:	f7ff fed9 	bl	8003af8 <TFT_fillRectangle>
      TFT_fillRectangle(x - x_, y - y_, size, size, color);
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	8a3b      	ldrh	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	b298      	uxth	r0, r3
 8003d4e:	88ba      	ldrh	r2, [r7, #4]
 8003d50:	89fb      	ldrh	r3, [r7, #14]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	b299      	uxth	r1, r3
 8003d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d60:	b29c      	uxth	r4, r3
 8003d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4623      	mov	r3, r4
 8003d68:	f7ff fec6 	bl	8003af8 <TFT_fillRectangle>
  while (x_ < y_) {
 8003d6c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f6ff af2b 	blt.w	8003bd0 <TFT_drawQuadrant+0x44>
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd90      	pop	{r4, r7, pc}

08003d84 <TFT_drawRoundRect>:

//Нарисовать прямоугольник с скруглёнными углами начиная с точки (x:y), с указанной длиной, шириной, радиусом скругления и цветом
void TFT_drawRoundRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t size, uint16_t color) {
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	80fb      	strh	r3, [r7, #6]
 8003d96:	4603      	mov	r3, r0
 8003d98:	80bb      	strh	r3, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	803b      	strh	r3, [r7, #0]
    TFT_drawLineHorizontal(x+radius, y, width-2*radius, size, color); // Top
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	8b3b      	ldrh	r3, [r7, #24]
 8003da6:	4413      	add	r3, r2
 8003da8:	b298      	uxth	r0, r3
 8003daa:	8b3b      	ldrh	r3, [r7, #24]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	887a      	ldrh	r2, [r7, #2]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	8bbb      	ldrh	r3, [r7, #28]
 8003db8:	b2dc      	uxtb	r4, r3
 8003dba:	88b9      	ldrh	r1, [r7, #4]
 8003dbc:	8c3b      	ldrh	r3, [r7, #32]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	4623      	mov	r3, r4
 8003dc2:	f7ff fdab 	bl	800391c <TFT_drawLineHorizontal>
    TFT_drawLineHorizontal(x+radius, y+height-size, width-2*radius, size, color); // Bottom
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	8b3b      	ldrh	r3, [r7, #24]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b298      	uxth	r0, r3
 8003dce:	88ba      	ldrh	r2, [r7, #4]
 8003dd0:	883b      	ldrh	r3, [r7, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	8bbb      	ldrh	r3, [r7, #28]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	8b3b      	ldrh	r3, [r7, #24]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	8bbb      	ldrh	r3, [r7, #28]
 8003dea:	b2dc      	uxtb	r4, r3
 8003dec:	8c3b      	ldrh	r3, [r7, #32]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4623      	mov	r3, r4
 8003df2:	f7ff fd93 	bl	800391c <TFT_drawLineHorizontal>
    TFT_drawLineVertical(x, y+radius, height-2*radius, size, color); // Left
 8003df6:	88ba      	ldrh	r2, [r7, #4]
 8003df8:	8b3b      	ldrh	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b299      	uxth	r1, r3
 8003dfe:	8b3b      	ldrh	r3, [r7, #24]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	883a      	ldrh	r2, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	8bbb      	ldrh	r3, [r7, #28]
 8003e0c:	b2dc      	uxtb	r4, r3
 8003e0e:	88f8      	ldrh	r0, [r7, #6]
 8003e10:	8c3b      	ldrh	r3, [r7, #32]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4623      	mov	r3, r4
 8003e16:	f7ff fddd 	bl	80039d4 <TFT_drawLineVertical>
    TFT_drawLineVertical(x+width-size, y+radius, height-2*radius, size, color); // Right
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	4413      	add	r3, r2
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	8bbb      	ldrh	r3, [r7, #28]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	b298      	uxth	r0, r3
 8003e28:	88ba      	ldrh	r2, [r7, #4]
 8003e2a:	8b3b      	ldrh	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b299      	uxth	r1, r3
 8003e30:	8b3b      	ldrh	r3, [r7, #24]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	883a      	ldrh	r2, [r7, #0]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	8bbb      	ldrh	r3, [r7, #28]
 8003e3e:	b2dc      	uxtb	r4, r3
 8003e40:	8c3b      	ldrh	r3, [r7, #32]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4623      	mov	r3, r4
 8003e46:	f7ff fdc5 	bl	80039d4 <TFT_drawLineVertical>

    TFT_drawQuadrant(x+radius, y+radius, radius,1, size, color);
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	8b3b      	ldrh	r3, [r7, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b218      	sxth	r0, r3
 8003e54:	88ba      	ldrh	r2, [r7, #4]
 8003e56:	8b3b      	ldrh	r3, [r7, #24]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b219      	sxth	r1, r3
 8003e5e:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003e62:	8bbb      	ldrh	r3, [r7, #28]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	8c3a      	ldrh	r2, [r7, #32]
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4622      	mov	r2, r4
 8003e70:	f7ff fe8c 	bl	8003b8c <TFT_drawQuadrant>
    TFT_drawQuadrant(x+width-radius-size, y+radius, radius, 2, size, color);
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	4413      	add	r3, r2
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	8b3b      	ldrh	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	8bbb      	ldrh	r3, [r7, #28]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b218      	sxth	r0, r3
 8003e8a:	88ba      	ldrh	r2, [r7, #4]
 8003e8c:	8b3b      	ldrh	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b219      	sxth	r1, r3
 8003e94:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003e98:	8bbb      	ldrh	r3, [r7, #28]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	8c3a      	ldrh	r2, [r7, #32]
 8003e9e:	9201      	str	r2, [sp, #4]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	f7ff fe71 	bl	8003b8c <TFT_drawQuadrant>
    TFT_drawQuadrant(x+width-radius-size, y+height-radius-size, radius,  4, size, color);
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	4413      	add	r3, r2
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	8b3b      	ldrh	r3, [r7, #24]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	8bbb      	ldrh	r3, [r7, #28]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b218      	sxth	r0, r3
 8003ec0:	88ba      	ldrh	r2, [r7, #4]
 8003ec2:	883b      	ldrh	r3, [r7, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	8b3b      	ldrh	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	8bbb      	ldrh	r3, [r7, #28]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	b219      	sxth	r1, r3
 8003ed6:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003eda:	8bbb      	ldrh	r3, [r7, #28]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	8c3a      	ldrh	r2, [r7, #32]
 8003ee0:	9201      	str	r2, [sp, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	f7ff fe50 	bl	8003b8c <TFT_drawQuadrant>
    TFT_drawQuadrant(x+radius, y+height-radius-size, radius, 8, size, color);
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	8b3b      	ldrh	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	b218      	sxth	r0, r3
 8003ef6:	88ba      	ldrh	r2, [r7, #4]
 8003ef8:	883b      	ldrh	r3, [r7, #0]
 8003efa:	4413      	add	r3, r2
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	8b3b      	ldrh	r3, [r7, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	8bbb      	ldrh	r3, [r7, #28]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b219      	sxth	r1, r3
 8003f0c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003f10:	8bbb      	ldrh	r3, [r7, #28]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	8c3a      	ldrh	r2, [r7, #32]
 8003f16:	9201      	str	r2, [sp, #4]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	f7ff fe35 	bl	8003b8c <TFT_drawQuadrant>
    //Обновление положения курсора
    TFT_cursorX = x+width+1;
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	4413      	add	r3, r2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <TFT_drawRoundRect+0x1c4>)
 8003f30:	801a      	strh	r2, [r3, #0]
    TFT_cursorY = y+height;
 8003f32:	88ba      	ldrh	r2, [r7, #4]
 8003f34:	883b      	ldrh	r3, [r7, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <TFT_drawRoundRect+0x1c8>)
 8003f3c:	801a      	strh	r2, [r3, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200009c0 	.word	0x200009c0
 8003f4c:	200009b8 	.word	0x200009b8

08003f50 <TFT_printChar>:
    sprintf(buff, "%d", HAL_GetTick()-starttime);
    TFT_print(0,TFT_Height-1-8*currentFontSize,buff);
    HAL_Delay(1500);
}
//Печать символа на экране
void TFT_printChar(char c) {
 8003f50:	b5b0      	push	{r4, r5, r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]
    #ifdef TFT_UTF8_SUPPORT
    static char highByte = 0;
     if (highByte) {
 8003f5a:	4b9a      	ldr	r3, [pc, #616]	; (80041c4 <TFT_printChar+0x274>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d021      	beq.n	8003fa6 <TFT_printChar+0x56>
        if (highByte ==  0xD0) c = ((uint16_t) highByte<<8 | c) - 0xCFD0;
 8003f62:	4b98      	ldr	r3, [pc, #608]	; (80041c4 <TFT_printChar+0x274>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2bd0      	cmp	r3, #208	; 0xd0
 8003f68:	d10a      	bne.n	8003f80 <TFT_printChar+0x30>
 8003f6a:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <TFT_printChar+0x274>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	b25a      	sxtb	r2, r3
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3330      	adds	r3, #48	; 0x30
 8003f7e:	71fb      	strb	r3, [r7, #7]
        if (highByte ==  0xD1) c = ((uint16_t) highByte<<8 | c) - 0xD090;
 8003f80:	4b90      	ldr	r3, [pc, #576]	; (80041c4 <TFT_printChar+0x274>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2bd1      	cmp	r3, #209	; 0xd1
 8003f86:	d10a      	bne.n	8003f9e <TFT_printChar+0x4e>
 8003f88:	4b8e      	ldr	r3, [pc, #568]	; (80041c4 <TFT_printChar+0x274>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	b25a      	sxtb	r2, r3
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	3370      	adds	r3, #112	; 0x70
 8003f9c:	71fb      	strb	r3, [r7, #7]
        highByte = 0;
 8003f9e:	4b89      	ldr	r3, [pc, #548]	; (80041c4 <TFT_printChar+0x274>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e009      	b.n	8003fba <TFT_printChar+0x6a>
    } else if(c == 0xD0 || c == 0xD1) {
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	2bd0      	cmp	r3, #208	; 0xd0
 8003faa:	d002      	beq.n	8003fb2 <TFT_printChar+0x62>
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	2bd1      	cmp	r3, #209	; 0xd1
 8003fb0:	d103      	bne.n	8003fba <TFT_printChar+0x6a>
        highByte = c; 
 8003fb2:	4a84      	ldr	r2, [pc, #528]	; (80041c4 <TFT_printChar+0x274>)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	7013      	strb	r3, [r2, #0]
        return;
 8003fb8:	e172      	b.n	80042a0 <TFT_printChar+0x350>
    }
    #endif
    
    //Проверка печатаемости символа
    if(((uint8_t)c < 32) || (((uint8_t)c > 127) && ((uint8_t)c < 192))) return;
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	2b1f      	cmp	r3, #31
 8003fbe:	f240 816e 	bls.w	800429e <TFT_printChar+0x34e>
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da03      	bge.n	8003fd2 <TFT_printChar+0x82>
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2bbf      	cmp	r3, #191	; 0xbf
 8003fce:	f240 8166 	bls.w	800429e <TFT_printChar+0x34e>
    //Проверка возможности печати на текущих координатах
    if (0){//TFT_cursorX >= TFT_Width-currentFont -> width*currentFontSize) {
        TFT_cursorY += currentFont ->height*currentFontSize;
        TFT_cursorX = 0;
    }         
    if (TFT_cursorY >= TFT_Height - currentFont -> height*currentFontSize) TFT_cursorY = 0;
 8003fd2:	4b7d      	ldr	r3, [pc, #500]	; (80041c8 <TFT_printChar+0x278>)
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b7c      	ldr	r3, [pc, #496]	; (80041cc <TFT_printChar+0x27c>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <TFT_printChar+0x280>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	4b7b      	ldr	r3, [pc, #492]	; (80041d4 <TFT_printChar+0x284>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	fb03 f300 	mul.w	r3, r3, r0
 8003fee:	1acb      	subs	r3, r1, r3
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	db02      	blt.n	8003ffa <TFT_printChar+0xaa>
 8003ff4:	4b74      	ldr	r3, [pc, #464]	; (80041c8 <TFT_printChar+0x278>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	801a      	strh	r2, [r3, #0]
    //Уменьшение числа символа до индекса в массиве шрифтов
    if (c > 127) c -= 96; else c -= 32;
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da03      	bge.n	800400a <TFT_printChar+0xba>
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	3b60      	subs	r3, #96	; 0x60
 8004006:	71fb      	strb	r3, [r7, #7]
 8004008:	e002      	b.n	8004010 <TFT_printChar+0xc0>
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	3b20      	subs	r3, #32
 800400e:	71fb      	strb	r3, [r7, #7]
    //81
    //Если включен фон, то сперва рисование в буфер, а потом на экран. Иначе медленно и мерцающе получится
    if(textBackColor != TFT_COLOR_none) {
 8004010:	4b71      	ldr	r3, [pc, #452]	; (80041d8 <TFT_printChar+0x288>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	f000 80ce 	beq.w	80041b6 <TFT_printChar+0x266>
 800401a:	466b      	mov	r3, sp
 800401c:	461d      	mov	r5, r3
        uint32_t size = (currentFont -> width+currentFont ->distance)*currentFontSize*currentFont -> height*currentFontSize;
 800401e:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <TFT_printChar+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <TFT_printChar+0x280>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	789b      	ldrb	r3, [r3, #2]
 800402c:	4413      	add	r3, r2
 800402e:	4a69      	ldr	r2, [pc, #420]	; (80041d4 <TFT_printChar+0x284>)
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	4a66      	ldr	r2, [pc, #408]	; (80041d0 <TFT_printChar+0x280>)
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	7852      	ldrb	r2, [r2, #1]
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	4a64      	ldr	r2, [pc, #400]	; (80041d4 <TFT_printChar+0x284>)
 8004042:	7812      	ldrb	r2, [r2, #0]
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
        uint16_t buff[size];
 800404a:	697c      	ldr	r4, [r7, #20]
 800404c:	4623      	mov	r3, r4
 800404e:	3b01      	subs	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4620      	mov	r0, r4
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	010b      	lsls	r3, r1, #4
 8004062:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004066:	0102      	lsls	r2, r0, #4
 8004068:	4620      	mov	r0, r4
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	010b      	lsls	r3, r1, #4
 8004078:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800407c:	0102      	lsls	r2, r0, #4
 800407e:	0063      	lsls	r3, r4, #1
 8004080:	3307      	adds	r3, #7
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	ebad 0d03 	sub.w	sp, sp, r3
 800408a:	ab02      	add	r3, sp, #8
 800408c:	3301      	adds	r3, #1
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
        //Заполнение буфера фоном
        for(uint16_t i = 0; i < size; i++) {
 8004094:	2300      	movs	r3, #0
 8004096:	83fb      	strh	r3, [r7, #30]
 8004098:	e008      	b.n	80040ac <TFT_printChar+0x15c>
            buff[i] = textBackColor;
 800409a:	8bfa      	ldrh	r2, [r7, #30]
 800409c:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <TFT_printChar+0x288>)
 800409e:	8819      	ldrh	r1, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for(uint16_t i = 0; i < size; i++) {
 80040a6:	8bfb      	ldrh	r3, [r7, #30]
 80040a8:	3301      	adds	r3, #1
 80040aa:	83fb      	strh	r3, [r7, #30]
 80040ac:	8bfb      	ldrh	r3, [r7, #30]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d8f2      	bhi.n	800409a <TFT_printChar+0x14a>
        }
        //Перебор байтов битмепа шрифта
        for(uint8_t byteNumber = 0; byteNumber < currentFont -> width; byteNumber++) {
 80040b4:	2300      	movs	r3, #0
 80040b6:	777b      	strb	r3, [r7, #29]
 80040b8:	e058      	b.n	800416c <TFT_printChar+0x21c>
            //Перебор битов байта битмепа шрифта
            for(uint8_t bitNumber = 0; bitNumber < 8; bitNumber++) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	773b      	strb	r3, [r7, #28]
 80040be:	e04f      	b.n	8004160 <TFT_printChar+0x210>
                                        //buff[byteNumber+bitNumber*currentFont -> width*currentFontSize+i] = currentColor;
                //Рисование символа
                //Если значение бита истиное, то рисование квадратика заданного размера
                if((currentFont -> bitmap[byteNumber+c*currentFont -> width] & (1<<bitNumber))) {
 80040c0:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <TFT_printChar+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	7f79      	ldrb	r1, [r7, #29]
 80040c8:	79fa      	ldrb	r2, [r7, #7]
 80040ca:	4841      	ldr	r0, [pc, #260]	; (80041d0 <TFT_printChar+0x280>)
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	7800      	ldrb	r0, [r0, #0]
 80040d0:	fb00 f202 	mul.w	r2, r0, r2
 80040d4:	440a      	add	r2, r1
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	7f3b      	ldrb	r3, [r7, #28]
 80040de:	fa42 f303 	asr.w	r3, r2, r3
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d037      	beq.n	800415a <TFT_printChar+0x20a>
                    for(uint8_t x = 0; x < currentFontSize; x++) {
 80040ea:	2300      	movs	r3, #0
 80040ec:	76fb      	strb	r3, [r7, #27]
 80040ee:	e02f      	b.n	8004150 <TFT_printChar+0x200>
                        for(uint8_t y = 0; y < currentFontSize; y++) {
 80040f0:	2300      	movs	r3, #0
 80040f2:	763b      	strb	r3, [r7, #24]
 80040f4:	e024      	b.n	8004140 <TFT_printChar+0x1f0>
                            //   [             y в массиве                    ]  [ y в шрифте                ] 
                            buff[((currentFont -> width+currentFont ->distance)*currentFontSize)*(bitNumber*currentFontSize+y) + x+byteNumber*currentFontSize ] = currentColor;
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <TFT_printChar+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <TFT_printChar+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	789b      	ldrb	r3, [r3, #2]
 8004104:	4413      	add	r3, r2
 8004106:	4a33      	ldr	r2, [pc, #204]	; (80041d4 <TFT_printChar+0x284>)
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	7f3a      	ldrb	r2, [r7, #28]
 8004110:	4930      	ldr	r1, [pc, #192]	; (80041d4 <TFT_printChar+0x284>)
 8004112:	7809      	ldrb	r1, [r1, #0]
 8004114:	fb01 f102 	mul.w	r1, r1, r2
 8004118:	7e3a      	ldrb	r2, [r7, #24]
 800411a:	440a      	add	r2, r1
 800411c:	fb02 f203 	mul.w	r2, r2, r3
 8004120:	7efb      	ldrb	r3, [r7, #27]
 8004122:	441a      	add	r2, r3
 8004124:	7f7b      	ldrb	r3, [r7, #29]
 8004126:	492b      	ldr	r1, [pc, #172]	; (80041d4 <TFT_printChar+0x284>)
 8004128:	7809      	ldrb	r1, [r1, #0]
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	441a      	add	r2, r3
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <TFT_printChar+0x28c>)
 8004132:	8819      	ldrh	r1, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                        for(uint8_t y = 0; y < currentFontSize; y++) {
 800413a:	7e3b      	ldrb	r3, [r7, #24]
 800413c:	3301      	adds	r3, #1
 800413e:	763b      	strb	r3, [r7, #24]
 8004140:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <TFT_printChar+0x284>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	7e3a      	ldrb	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d3d5      	bcc.n	80040f6 <TFT_printChar+0x1a6>
                    for(uint8_t x = 0; x < currentFontSize; x++) {
 800414a:	7efb      	ldrb	r3, [r7, #27]
 800414c:	3301      	adds	r3, #1
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <TFT_printChar+0x284>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	7efa      	ldrb	r2, [r7, #27]
 8004156:	429a      	cmp	r2, r3
 8004158:	d3ca      	bcc.n	80040f0 <TFT_printChar+0x1a0>
            for(uint8_t bitNumber = 0; bitNumber < 8; bitNumber++) {
 800415a:	7f3b      	ldrb	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	773b      	strb	r3, [r7, #28]
 8004160:	7f3b      	ldrb	r3, [r7, #28]
 8004162:	2b07      	cmp	r3, #7
 8004164:	d9ac      	bls.n	80040c0 <TFT_printChar+0x170>
        for(uint8_t byteNumber = 0; byteNumber < currentFont -> width; byteNumber++) {
 8004166:	7f7b      	ldrb	r3, [r7, #29]
 8004168:	3301      	adds	r3, #1
 800416a:	777b      	strb	r3, [r7, #29]
 800416c:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <TFT_printChar+0x280>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	7f7a      	ldrb	r2, [r7, #29]
 8004174:	429a      	cmp	r2, r3
 8004176:	d3a0      	bcc.n	80040ba <TFT_printChar+0x16a>
                    }
                }
            }
        }/**/
        //TFT_setWindow(TFT_cursorX, TFT_cursorY, TFT_cursorX+currentFont -> width-1, currentFont -> height-1);
        TFT_drawImage((currentFont -> width+currentFont ->distance)*currentFontSize, currentFont -> height*currentFontSize, buff);
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <TFT_printChar+0x280>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <TFT_printChar+0x280>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	789b      	ldrb	r3, [r3, #2]
 8004186:	4413      	add	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <TFT_printChar+0x284>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	fb12 f303 	smulbb	r3, r2, r3
 8004194:	b298      	uxth	r0, r3
 8004196:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <TFT_printChar+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	b29a      	uxth	r2, r3
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <TFT_printChar+0x284>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	fb12 f303 	smulbb	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4619      	mov	r1, r3
 80041ae:	f000 f8c1 	bl	8004334 <TFT_drawImage>
 80041b2:	46ad      	mov	sp, r5
 80041b4:	e05c      	b.n	8004270 <TFT_printChar+0x320>
    } else {
        //Перебор байтов битмепа шрифта
        for(uint8_t byteNumber = 0; byteNumber < currentFont -> width; byteNumber++) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	767b      	strb	r3, [r7, #25]
 80041ba:	e053      	b.n	8004264 <TFT_printChar+0x314>
            //Перебор битов байта битмепа шрифта
            for(uint8_t bitNumber = 0; bitNumber < 8; bitNumber++) {
 80041bc:	2300      	movs	r3, #0
 80041be:	76bb      	strb	r3, [r7, #26]
 80041c0:	e04a      	b.n	8004258 <TFT_printChar+0x308>
 80041c2:	bf00      	nop
 80041c4:	2000038f 	.word	0x2000038f
 80041c8:	200009b8 	.word	0x200009b8
 80041cc:	200009b6 	.word	0x200009b6
 80041d0:	20000014 	.word	0x20000014
 80041d4:	20000018 	.word	0x20000018
 80041d8:	2000001a 	.word	0x2000001a
 80041dc:	200009c2 	.word	0x200009c2
                //Рисование символа
                //Если значение бита истиное, то рисование квадратика заданного размера
                if((currentFont -> bitmap[byteNumber+c*currentFont -> width] & (1<<bitNumber))) {
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <TFT_printChar+0x358>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	7e79      	ldrb	r1, [r7, #25]
 80041e8:	79fa      	ldrb	r2, [r7, #7]
 80041ea:	482f      	ldr	r0, [pc, #188]	; (80042a8 <TFT_printChar+0x358>)
 80041ec:	6800      	ldr	r0, [r0, #0]
 80041ee:	7800      	ldrb	r0, [r0, #0]
 80041f0:	fb00 f202 	mul.w	r2, r0, r2
 80041f4:	440a      	add	r2, r1
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	7ebb      	ldrb	r3, [r7, #26]
 80041fe:	fa42 f303 	asr.w	r3, r2, r3
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d023      	beq.n	8004252 <TFT_printChar+0x302>
                    TFT_fillRectangle(TFT_cursorX+byteNumber*currentFontSize, TFT_cursorY+bitNumber*currentFontSize, currentFontSize, currentFontSize, currentColor); 
 800420a:	7e7b      	ldrb	r3, [r7, #25]
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <TFT_printChar+0x35c>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	fb12 f303 	smulbb	r3, r2, r3
 8004218:	b29a      	uxth	r2, r3
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <TFT_printChar+0x360>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	4413      	add	r3, r2
 8004220:	b298      	uxth	r0, r3
 8004222:	7ebb      	ldrb	r3, [r7, #26]
 8004224:	b29a      	uxth	r2, r3
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <TFT_printChar+0x35c>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	fb12 f303 	smulbb	r3, r2, r3
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <TFT_printChar+0x364>)
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	4413      	add	r3, r2
 8004238:	b299      	uxth	r1, r3
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <TFT_printChar+0x35c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b29a      	uxth	r2, r3
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <TFT_printChar+0x35c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b29c      	uxth	r4, r3
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <TFT_printChar+0x368>)
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4623      	mov	r3, r4
 800424e:	f7ff fc53 	bl	8003af8 <TFT_fillRectangle>
            for(uint8_t bitNumber = 0; bitNumber < 8; bitNumber++) {
 8004252:	7ebb      	ldrb	r3, [r7, #26]
 8004254:	3301      	adds	r3, #1
 8004256:	76bb      	strb	r3, [r7, #26]
 8004258:	7ebb      	ldrb	r3, [r7, #26]
 800425a:	2b07      	cmp	r3, #7
 800425c:	d9c0      	bls.n	80041e0 <TFT_printChar+0x290>
        for(uint8_t byteNumber = 0; byteNumber < currentFont -> width; byteNumber++) {
 800425e:	7e7b      	ldrb	r3, [r7, #25]
 8004260:	3301      	adds	r3, #1
 8004262:	767b      	strb	r3, [r7, #25]
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <TFT_printChar+0x358>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	7e7a      	ldrb	r2, [r7, #25]
 800426c:	429a      	cmp	r2, r3
 800426e:	d3a5      	bcc.n	80041bc <TFT_printChar+0x26c>
                }
            }
        }
    }
    //Перемещение курсора по X
    TFT_cursorX+= currentFont -> width*currentFontSize+currentFont->distance*currentFontSize; 
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <TFT_printChar+0x358>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b29a      	uxth	r2, r3
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <TFT_printChar+0x358>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	789b      	ldrb	r3, [r3, #2]
 800427e:	b29b      	uxth	r3, r3
 8004280:	4413      	add	r3, r2
 8004282:	b29a      	uxth	r2, r3
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <TFT_printChar+0x35c>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	fb12 f303 	smulbb	r3, r2, r3
 800428e:	b29a      	uxth	r2, r3
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <TFT_printChar+0x360>)
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	4413      	add	r3, r2
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <TFT_printChar+0x360>)
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	e000      	b.n	80042a0 <TFT_printChar+0x350>
    if(((uint8_t)c < 32) || (((uint8_t)c > 127) && ((uint8_t)c < 192))) return;
 800429e:	bf00      	nop
}
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bdb0      	pop	{r4, r5, r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000014 	.word	0x20000014
 80042ac:	20000018 	.word	0x20000018
 80042b0:	200009c0 	.word	0x200009c0
 80042b4:	200009b8 	.word	0x200009b8
 80042b8:	200009c2 	.word	0x200009c2

080042bc <TFT_print>:
    TFT_printChar(c);
    #endif
}

//Печать строки на экране
void TFT_print(uint16_t x, uint8_t y, char str[]) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	603a      	str	r2, [r7, #0]
 80042c6:	80fb      	strh	r3, [r7, #6]
 80042c8:	460b      	mov	r3, r1
 80042ca:	717b      	strb	r3, [r7, #5]
    TFT_cursorX = x;
 80042cc:	4a0f      	ldr	r2, [pc, #60]	; (800430c <TFT_print+0x50>)
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	8013      	strh	r3, [r2, #0]
    TFT_cursorY = y;
 80042d2:	797b      	ldrb	r3, [r7, #5]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <TFT_print+0x54>)
 80042d8:	801a      	strh	r2, [r3, #0]
    uint16_t i = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	81fb      	strh	r3, [r7, #14]
    while(str[i] != '\0') {
 80042de:	e009      	b.n	80042f4 <TFT_print+0x38>
    	TFT_printChar(str[i]);
 80042e0:	89fb      	ldrh	r3, [r7, #14]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fe31 	bl	8003f50 <TFT_printChar>
        i++;
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	3301      	adds	r3, #1
 80042f2:	81fb      	strh	r3, [r7, #14]
    while(str[i] != '\0') {
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	4413      	add	r3, r2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ef      	bne.n	80042e0 <TFT_print+0x24>
    }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200009c0 	.word	0x200009c0
 8004310:	200009b8 	.word	0x200009b8

08004314 <TFT_setFontSize>:
//Установить текущий шрифт написания
void TFT_setFont(TFT_font *font) {
    currentFont = font;
}
//Установить размер шрифта
void TFT_setFontSize(uint8_t size) {
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]



    currentFontSize = size;
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <TFT_setFontSize+0x1c>)
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	7013      	strb	r3, [r2, #0]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000018 	.word	0x20000018

08004334 <TFT_drawImage>:
//Нарисовать картинку на дисплее
void TFT_drawImage(uint16_t width, uint16_t height, const uint16_t *bitmap) {
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	603a      	str	r2, [r7, #0]
 800433e:	80fb      	strh	r3, [r7, #6]
 8004340:	460b      	mov	r3, r1
 8004342:	80bb      	strh	r3, [r7, #4]
    TFT_CS_Reset;    //Общение на шине именно с дисплеем
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800434a:	481e      	ldr	r0, [pc, #120]	; (80043c4 <TFT_drawImage+0x90>)
 800434c:	f002 ffbc 	bl	80072c8 <HAL_GPIO_WritePin>
    
    TFT_setWindow(TFT_cursorX,TFT_cursorY, TFT_cursorX+width-1, TFT_cursorY+height-1);
 8004350:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <TFT_drawImage+0x94>)
 8004352:	8818      	ldrh	r0, [r3, #0]
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <TFT_drawImage+0x98>)
 8004356:	8819      	ldrh	r1, [r3, #0]
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <TFT_drawImage+0x94>)
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	4413      	add	r3, r2
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29c      	uxth	r4, r3
 8004366:	4b19      	ldr	r3, [pc, #100]	; (80043cc <TFT_drawImage+0x98>)
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	88bb      	ldrh	r3, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	4622      	mov	r2, r4
 8004376:	f7ff f941 	bl	80035fc <TFT_setWindow>

    TFT_data;
 800437a:	2201      	movs	r2, #1
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	4814      	ldr	r0, [pc, #80]	; (80043d0 <TFT_drawImage+0x9c>)
 8004380:	f002 ffa2 	bl	80072c8 <HAL_GPIO_WritePin>
    
    for (uint32_t i = 0; i < width*height; i++) {
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e00a      	b.n	80043a0 <TFT_drawImage+0x6c>
        TFT_sendData(bitmap[i]);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff f883 	bl	80034a0 <TFT_sendData>
    for (uint32_t i = 0; i < width*height; i++) {
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3301      	adds	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	88ba      	ldrh	r2, [r7, #4]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d3ec      	bcc.n	800438a <TFT_drawImage+0x56>
    }
    TFT_CS_Set; //Поднятие CS, т.к. общение с дисплеем закончено
 80043b0:	2201      	movs	r2, #1
 80043b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043b6:	4803      	ldr	r0, [pc, #12]	; (80043c4 <TFT_drawImage+0x90>)
 80043b8:	f002 ff86 	bl	80072c8 <HAL_GPIO_WritePin>
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	40020400 	.word	0x40020400
 80043c8:	200009c0 	.word	0x200009c0
 80043cc:	200009b8 	.word	0x200009b8
 80043d0:	40020800 	.word	0x40020800

080043d4 <TFT_setTextBackColor>:

//Установить цвет фона текста. TFT_COLOR_none - прозрачный
void TFT_setTextBackColor(uint16_t color) {
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	80fb      	strh	r3, [r7, #6]
    textBackColor = color;
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <TFT_setTextBackColor+0x1c>)
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	8013      	strh	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	2000001a 	.word	0x2000001a

080043f4 <LCD_DrawChar>:
    }

    LCD_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void LCD_DrawChar(char ch, const uint16_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor) {
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b08f      	sub	sp, #60	; 0x3c
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	460b      	mov	r3, r1
 8004406:	81bb      	strh	r3, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
    if ((ch < 31) || (ch > 127)) return;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b1e      	cmp	r3, #30
 8004410:	f240 8084 	bls.w	800451c <LCD_DrawChar+0x128>
 8004414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	db7f      	blt.n	800451c <LCD_DrawChar+0x128>

    uint16_t fOffset;
    uint16_t fWidth, fHeight, fBPL;
    uint16_t *tempChar;

    fOffset = font[0];
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	847b      	strh	r3, [r7, #34]	; 0x22
    fWidth = font[1];
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	885b      	ldrh	r3, [r3, #2]
 8004426:	843b      	strh	r3, [r7, #32]
    fHeight = font[2];
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	889b      	ldrh	r3, [r3, #4]
 800442c:	83fb      	strh	r3, [r7, #30]
    fBPL = font[3];
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	88db      	ldrh	r3, [r3, #6]
 8004432:	83bb      	strh	r3, [r7, #28]

    tempChar = (uint16_t*) & font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	3b20      	subs	r3, #32
 8004438:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	3304      	adds	r3, #4
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]

    /* Clear background first */
    //LCD_DrawColorBurst(bgcolor,fWidth* fHeight);
    if(fWidth > 30)
 8004448:	8c3b      	ldrh	r3, [r7, #32]
 800444a:	2b1e      	cmp	r3, #30
 800444c:	d90e      	bls.n	800446c <LCD_DrawChar+0x78>
    	TFT_fillRectangle(X-4, Y- 10, fWidth+5, fHeight, bgcolor);
 800444e:	89bb      	ldrh	r3, [r7, #12]
 8004450:	1f18      	subs	r0, r3, #4
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	f1a3 010a 	sub.w	r1, r3, #10
 8004458:	8c3b      	ldrh	r3, [r7, #32]
 800445a:	1d5a      	adds	r2, r3, #5
 800445c:	8bfc      	ldrh	r4, [r7, #30]
 800445e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	4623      	mov	r3, r4
 8004466:	f7ff fb47 	bl	8003af8 <TFT_fillRectangle>
 800446a:	e00e      	b.n	800448a <LCD_DrawChar+0x96>
    else  TFT_fillRectangle(X-4, Y-6, fWidth+5, fHeight+10, bgcolor);
 800446c:	89bb      	ldrh	r3, [r7, #12]
 800446e:	1f18      	subs	r0, r3, #4
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	1f99      	subs	r1, r3, #6
 8004474:	8c3b      	ldrh	r3, [r7, #32]
 8004476:	1d5a      	adds	r2, r3, #5
 8004478:	8bfb      	ldrh	r3, [r7, #30]
 800447a:	f103 040a 	add.w	r4, r3, #10
 800447e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	4623      	mov	r3, r4
 8004486:	f7ff fb37 	bl	8003af8 <TFT_fillRectangle>
    //TFT_drawRectangle(X, Y, fWidth, fHeight, bgcolor);
    //LCD_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);

    //add
    //TFT_setWindow(X,Y,X,Y);
    int i=0;
 800448a:	2300      	movs	r3, #0
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int j=0;
 800448e:	2300      	movs	r3, #0
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
    for (j = 0; j < fBPL/*fHeight*/; j++) {
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
 8004496:	e03c      	b.n	8004512 <LCD_DrawChar+0x11e>
        for (i = 0; i < fWidth; i++) {
 8004498:	2300      	movs	r3, #0
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449c:	e032      	b.n	8004504 <LCD_DrawChar+0x110>
            uint16_t z = tempChar[((fBPL) * i) + j + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800449e:	8bbb      	ldrh	r3, [r7, #28]
 80044a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a2:	fb02 f203 	mul.w	r2, r2, r3
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	4413      	add	r3, r2
 80044aa:	3301      	adds	r3, #1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	82fb      	strh	r3, [r7, #22]
            for(int k=0;k<8;k++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e01d      	b.n	80044f8 <LCD_DrawChar+0x104>
            {
            	uint8_t b =  z & (1 << k);
 80044bc:	8afb      	ldrh	r3, [r7, #22]
 80044be:	b25a      	sxtb	r2, r3
 80044c0:	2101      	movs	r1, #1
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	b25b      	sxtb	r3, r3
 80044ca:	4013      	ands	r3, r2
 80044cc:	b25b      	sxtb	r3, r3
 80044ce:	757b      	strb	r3, [r7, #21]
            	if(b)
 80044d0:	7d7b      	ldrb	r3, [r7, #21]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <LCD_DrawChar+0xfe>
            	{
            		TFT_drawPixel(X + i, Y + (j*8) + k, color);
 80044d6:	89ba      	ldrh	r2, [r7, #12]
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	18d0      	adds	r0, r2, r3
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	441a      	add	r2, r3
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	4413      	add	r3, r2
 80044e8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7ff f95b 	bl	80037a8 <TFT_drawPixel>
            for(int k=0;k<8;k++)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	3301      	adds	r3, #1
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b07      	cmp	r3, #7
 80044fc:	ddde      	ble.n	80044bc <LCD_DrawChar+0xc8>
        for (i = 0; i < fWidth; i++) {
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	3301      	adds	r3, #1
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	8c3b      	ldrh	r3, [r7, #32]
 8004506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004508:	429a      	cmp	r2, r3
 800450a:	dbc8      	blt.n	800449e <LCD_DrawChar+0xaa>
    for (j = 0; j < fBPL/*fHeight*/; j++) {
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	3301      	adds	r3, #1
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
 8004512:	8bbb      	ldrh	r3, [r7, #28]
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	429a      	cmp	r2, r3
 8004518:	dbbe      	blt.n	8004498 <LCD_DrawChar+0xa4>
 800451a:	e000      	b.n	800451e <LCD_DrawChar+0x12a>
    if ((ch < 31) || (ch > 127)) return;
 800451c:	bf00      	nop
            //	TFT_drawPixel(X + i, Y + j, color);
                //LCD_DrawPixel(X + i, Y + j, color);
            //}
        }
    }
}
 800451e:	3734      	adds	r7, #52	; 0x34
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}

08004524 <LCD_DrawText>:
            //}
        }
    }
}

void LCD_DrawText(const char* str, const uint16_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	460b      	mov	r3, r1
 8004534:	80fb      	strh	r3, [r7, #6]
 8004536:	4613      	mov	r3, r2
 8004538:	80bb      	strh	r3, [r7, #4]
    uint8_t charWidth; /* Width of character */
    uint8_t fOffset = font[0]; /* Offset of character */
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	77fb      	strb	r3, [r7, #31]
    uint8_t fWidth = font[1]; /* Width of font */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3302      	adds	r3, #2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	77bb      	strb	r3, [r7, #30]

    while (*str) {
 8004548:	e03b      	b.n	80045c2 <LCD_DrawText+0x9e>
        LCD_DrawChar(*str, font, X, Y, color, bgcolor);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	7818      	ldrb	r0, [r3, #0]
 800454e:	88b9      	ldrh	r1, [r7, #4]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	460b      	mov	r3, r1
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	f7ff ff49 	bl	80043f4 <LCD_DrawChar>

        /* Check character width and calculate proper position */
        uint8_t *tempChar = (uint8_t*) & font[((*str - 0x20) * fOffset) + 4];
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	3b20      	subs	r3, #32
 8004568:	7ffa      	ldrb	r2, [r7, #31]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	3304      	adds	r3, #4
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4413      	add	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        charWidth = tempChar[0];
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	75fb      	strb	r3, [r7, #23]

        if (charWidth + 1 < fWidth)
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	7fbb      	ldrb	r3, [r7, #30]
 8004584:	429a      	cmp	r2, r3
 8004586:	da14      	bge.n	80045b2 <LCD_DrawText+0x8e>
        	{
        //if (charWidth + 2 < fWidth) {
            /* If character width is smaller than font width */
            //X += (charWidth + 20);//X += (charWidth + 2);
            //X += (charWidth + 43);//X += (charWidth + 2);
        	if(fWidth < 39)  X += (charWidth + 8); // + 5
 8004588:	7fbb      	ldrb	r3, [r7, #30]
 800458a:	2b26      	cmp	r3, #38	; 0x26
 800458c:	d807      	bhi.n	800459e <LCD_DrawText+0x7a>
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	b29a      	uxth	r2, r3
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	4413      	add	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	3308      	adds	r3, #8
 800459a:	80fb      	strh	r3, [r7, #6]
 800459c:	e00e      	b.n	80045bc <LCD_DrawText+0x98>
        	else X += (charWidth + fWidth);
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	7fbb      	ldrb	r3, [r7, #30]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	4413      	add	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
 80045b0:	e004      	b.n	80045bc <LCD_DrawText+0x98>
        } else {
            X += fWidth;
 80045b2:	7fbb      	ldrb	r3, [r7, #30]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4413      	add	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
        }

        str++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3301      	adds	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1bf      	bne.n	800454a <LCD_DrawText+0x26>
    }
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <decToBcd>:

TIME time;
nSetTime = 0;

uint8_t decToBcd(int val)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a0f      	ldr	r2, [pc, #60]	; (800461c <decToBcd+0x48>)
 80045e0:	fb82 1203 	smull	r1, r2, r2, r3
 80045e4:	1092      	asrs	r2, r2, #2
 80045e6:	17db      	asrs	r3, r3, #31
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	b2d8      	uxtb	r0, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <decToBcd+0x48>)
 80045f4:	fb83 1302 	smull	r1, r3, r3, r2
 80045f8:	1099      	asrs	r1, r3, #2
 80045fa:	17d3      	asrs	r3, r2, #31
 80045fc:	1ac9      	subs	r1, r1, r3
 80045fe:	460b      	mov	r3, r1
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	1ad1      	subs	r1, r2, r3
 8004608:	b2cb      	uxtb	r3, r1
 800460a:	4403      	add	r3, r0
 800460c:	b2db      	uxtb	r3, r3
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	66666667 	.word	0x66666667

08004620 <bcdToDec>:
int bcdToDec(uint8_t val)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	461a      	mov	r2, r3
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4413      	add	r3, r2
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <DrawMainWindow>:



void DrawMainWindow(int nType)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

	m_nRedraw = 0;//reset
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <DrawMainWindow+0x54>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]

	if( nType == DISP_MODE_ALL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d108      	bne.n	8004676 <DrawMainWindow+0x26>
	{
		 Get_Time();
 8004664:	f000 f874 	bl	8004750 <Get_Time>
		 TFT_setColor(TFT_COLOR_Orange);
 8004668:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 800466c:	f7ff f874 	bl	8003758 <TFT_setColor>
		 TFT_clear();
 8004670:	2000      	movs	r0, #0
 8004672:	f7fe fec9 	bl	8003408 <TFT_fillDisplay>
	{
		// TFT_drawImage(320,240, IMG_BG);
	}
	//DISP_MODE_F14
	//
	if( nType == DISP_MODE_F14)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d105      	bne.n	8004688 <DrawMainWindow+0x38>
	{
		 TFT_drawImage(320,240, IMG_F14);
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <DrawMainWindow+0x58>)
 800467e:	21f0      	movs	r1, #240	; 0xf0
 8004680:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004684:	f7ff fe56 	bl	8004334 <TFT_drawImage>
	}

	if( nType == DISP_MODE_BALLOON)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d105      	bne.n	800469a <DrawMainWindow+0x4a>
	{
		 TFT_drawImage(320,240, IMG_BALLOON);
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <DrawMainWindow+0x5c>)
 8004690:	21f0      	movs	r1, #240	; 0xf0
 8004692:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004696:	f7ff fe4d 	bl	8004334 <TFT_drawImage>
	}



}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	2000001c 	.word	0x2000001c
 80046a8:	0802779c 	.word	0x0802779c
 80046ac:	0804cf9c 	.word	0x0804cf9c

080046b0 <Set_Time>:



void Set_Time(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month,uint8_t year)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	4623      	mov	r3, r4
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	4603      	mov	r3, r0
 80046c4:	71bb      	strb	r3, [r7, #6]
 80046c6:	460b      	mov	r3, r1
 80046c8:	717b      	strb	r3, [r7, #5]
 80046ca:	4613      	mov	r3, r2
 80046cc:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];

	set_time[0] = decToBcd(sec);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff7f 	bl	80045d4 <decToBcd>
 80046d6:	4603      	mov	r3, r0
 80046d8:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80046da:	79bb      	ldrb	r3, [r7, #6]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff79 	bl	80045d4 <decToBcd>
 80046e2:	4603      	mov	r3, r0
 80046e4:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80046e6:	797b      	ldrb	r3, [r7, #5]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff ff73 	bl	80045d4 <decToBcd>
 80046ee:	4603      	mov	r3, r0
 80046f0:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);//day of week (1 ~ 7 )
 80046f2:	793b      	ldrb	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff6d 	bl	80045d4 <decToBcd>
 80046fa:	4603      	mov	r3, r0
 80046fc:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);//day of month(1 ~ 31)
 80046fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff66 	bl	80045d4 <decToBcd>
 8004708:	4603      	mov	r3, r0
 800470a:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 800470c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff5f 	bl	80045d4 <decToBcd>
 8004716:	4603      	mov	r3, r0
 8004718:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800471a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff58 	bl	80045d4 <decToBcd>
 8004724:	4603      	mov	r3, r0
 8004726:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00,1, set_time, 7, 1000);
 8004728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	2307      	movs	r3, #7
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2301      	movs	r3, #1
 800473a:	2200      	movs	r2, #0
 800473c:	21d0      	movs	r1, #208	; 0xd0
 800473e:	4803      	ldr	r0, [pc, #12]	; (800474c <Set_Time+0x9c>)
 8004740:	f003 fa5e 	bl	8007c00 <HAL_I2C_Mem_Write>

}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bd90      	pop	{r4, r7, pc}
 800474c:	200009c8 	.word	0x200009c8

08004750 <Get_Time>:
void Get_Time(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af04      	add	r7, sp, #16
	//Time Setting
	if(nSetTime == 1 ) return;
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <Get_Time+0xa4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d045      	beq.n	80047ea <Get_Time+0x9a>

	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7,1000);
 800475e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004762:	9302      	str	r3, [sp, #8]
 8004764:	2307      	movs	r3, #7
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	463b      	mov	r3, r7
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	2301      	movs	r3, #1
 800476e:	2200      	movs	r2, #0
 8004770:	21d0      	movs	r1, #208	; 0xd0
 8004772:	4821      	ldr	r0, [pc, #132]	; (80047f8 <Get_Time+0xa8>)
 8004774:	f003 fb3e 	bl	8007df4 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(get_time[0]);
 8004778:	783b      	ldrb	r3, [r7, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff ff50 	bl	8004620 <bcdToDec>
 8004780:	4603      	mov	r3, r0
 8004782:	b2da      	uxtb	r2, r3
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <Get_Time+0xac>)
 8004786:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8004788:	787b      	ldrb	r3, [r7, #1]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff48 	bl	8004620 <bcdToDec>
 8004790:	4603      	mov	r3, r0
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b19      	ldr	r3, [pc, #100]	; (80047fc <Get_Time+0xac>)
 8004796:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8004798:	78bb      	ldrb	r3, [r7, #2]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff40 	bl	8004620 <bcdToDec>
 80047a0:	4603      	mov	r3, r0
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <Get_Time+0xac>)
 80047a6:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ff38 	bl	8004620 <bcdToDec>
 80047b0:	4603      	mov	r3, r0
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <Get_Time+0xac>)
 80047b6:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80047b8:	793b      	ldrb	r3, [r7, #4]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff ff30 	bl	8004620 <bcdToDec>
 80047c0:	4603      	mov	r3, r0
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <Get_Time+0xac>)
 80047c6:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80047c8:	797b      	ldrb	r3, [r7, #5]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff28 	bl	8004620 <bcdToDec>
 80047d0:	4603      	mov	r3, r0
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <Get_Time+0xac>)
 80047d6:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80047d8:	79bb      	ldrb	r3, [r7, #6]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ff20 	bl	8004620 <bcdToDec>
 80047e0:	4603      	mov	r3, r0
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <Get_Time+0xac>)
 80047e6:	719a      	strb	r2, [r3, #6]
 80047e8:	e000      	b.n	80047ec <Get_Time+0x9c>
	if(nSetTime == 1 ) return;
 80047ea:	bf00      	nop

	// HAL_Delay(20);

	//HAL_I2C_Master_Receive(&hi2c1, 0xB0, &buffer[2], 2, 100);

}
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000390 	.word	0x20000390
 80047f8:	200009c8 	.word	0x200009c8
 80047fc:	2000095c 	.word	0x2000095c

08004800 <MainBGImageDraw>:

void MainBGImageDraw(int nType)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	if(nBGImgTypeOld != nType)
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <MainBGImageDraw+0x80>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d031      	beq.n	8004876 <MainBGImageDraw+0x76>
	{
		nBGImgTypeOld = nType;
 8004812:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <MainBGImageDraw+0x80>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6013      	str	r3, [r2, #0]

		//redraw
		 nHourOld = -1;
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <MainBGImageDraw+0x84>)
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	601a      	str	r2, [r3, #0]
		 nMinuteOld = -1;
 8004820:	4b19      	ldr	r3, [pc, #100]	; (8004888 <MainBGImageDraw+0x88>)
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	601a      	str	r2, [r3, #0]
		 nDayOld = -1;
 8004828:	4b18      	ldr	r3, [pc, #96]	; (800488c <MainBGImageDraw+0x8c>)
 800482a:	f04f 32ff 	mov.w	r2, #4294967295
 800482e:	601a      	str	r2, [r3, #0]

	}
	else return;

	if(nType == DISP_BG_ALL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d103      	bne.n	800483e <MainBGImageDraw+0x3e>
	{
		DrawMainWindow(DISP_MODE_ALL);
 8004836:	2000      	movs	r0, #0
 8004838:	f7ff ff0a 	bl	8004650 <DrawMainWindow>
 800483c:	e01c      	b.n	8004878 <MainBGImageDraw+0x78>
	}
	else if(nType == DISP_BG_TIME)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d103      	bne.n	800484c <MainBGImageDraw+0x4c>
	{
		DrawMainWindow(DISP_BG_TIME);
 8004844:	2002      	movs	r0, #2
 8004846:	f7ff ff03 	bl	8004650 <DrawMainWindow>
 800484a:	e015      	b.n	8004878 <MainBGImageDraw+0x78>
	}
	else if(nType == DISP_BG_CAR)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d103      	bne.n	800485a <MainBGImageDraw+0x5a>
	{
		DrawMainWindow(DISP_MODE_CAR);
 8004852:	2002      	movs	r0, #2
 8004854:	f7ff fefc 	bl	8004650 <DrawMainWindow>
 8004858:	e00e      	b.n	8004878 <MainBGImageDraw+0x78>
	}
	else if(nType == DISP_BG_F14)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d103      	bne.n	8004868 <MainBGImageDraw+0x68>
	{
		DrawMainWindow(DISP_MODE_F14);
 8004860:	2003      	movs	r0, #3
 8004862:	f7ff fef5 	bl	8004650 <DrawMainWindow>
 8004866:	e007      	b.n	8004878 <MainBGImageDraw+0x78>
	}
	else if(nType == DISP_BG_3D_IMG)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d104      	bne.n	8004878 <MainBGImageDraw+0x78>
		{
			DrawMainWindow(DISP_MODE_BALLOON);
 800486e:	2004      	movs	r0, #4
 8004870:	f7ff feee 	bl	8004650 <DrawMainWindow>
 8004874:	e000      	b.n	8004878 <MainBGImageDraw+0x78>
	else return;
 8004876:	bf00      	nop
		}
}
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000034 	.word	0x20000034
 8004884:	20000024 	.word	0x20000024
 8004888:	20000394 	.word	0x20000394
 800488c:	20000030 	.word	0x20000030

08004890 <MainLCDDisplayMode>:


//Main LCD DISPLAY SETTING By Mode
void MainLCDDisplayMode(int nDispMode)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b0af      	sub	sp, #188	; 0xbc
 8004894:	af04      	add	r7, sp, #16
 8004896:	6078      	str	r0, [r7, #4]
	   if(nDispMode != nDispModeOld)
 8004898:	4bc6      	ldr	r3, [pc, #792]	; (8004bb4 <MainLCDDisplayMode+0x324>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d02e      	beq.n	8004900 <MainLCDDisplayMode+0x70>
	   {
		   //redraw
		   nHourOld = -1.0;
 80048a2:	4bc5      	ldr	r3, [pc, #788]	; (8004bb8 <MainLCDDisplayMode+0x328>)
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	601a      	str	r2, [r3, #0]
		   nMinuteOld = -1.0;
 80048aa:	4bc4      	ldr	r3, [pc, #784]	; (8004bbc <MainLCDDisplayMode+0x32c>)
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	601a      	str	r2, [r3, #0]
		   HDC1080_Temp_Old = -1.0;
 80048b2:	4bc3      	ldr	r3, [pc, #780]	; (8004bc0 <MainLCDDisplayMode+0x330>)
 80048b4:	4ac3      	ldr	r2, [pc, #780]	; (8004bc4 <MainLCDDisplayMode+0x334>)
 80048b6:	601a      	str	r2, [r3, #0]
		   HDC1080_Humi_Old = -1.0;
 80048b8:	4bc3      	ldr	r3, [pc, #780]	; (8004bc8 <MainLCDDisplayMode+0x338>)
 80048ba:	4ac2      	ldr	r2, [pc, #776]	; (8004bc4 <MainLCDDisplayMode+0x334>)
 80048bc:	601a      	str	r2, [r3, #0]

		   nDispModeOld = nDispMode;
 80048be:	4abd      	ldr	r2, [pc, #756]	; (8004bb4 <MainLCDDisplayMode+0x324>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6013      	str	r3, [r2, #0]
		   TFT_clear();
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fe fd9f 	bl	8003408 <TFT_fillDisplay>

		 if(nDispMode == DISP_MODE_ALL )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <MainLCDDisplayMode+0x4c>
		 {
			 MainBGImageDraw(DISP_BG_ALL);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7ff ff95 	bl	8004800 <MainBGImageDraw>
			 DrawMainWindow(DISP_MODE_ALL);
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7ff feba 	bl	8004650 <DrawMainWindow>
		 if(nDispMode == DISP_MODE_TIME )
		 {
			 //MainBGImageDraw(DISP_BG_TIME);
		 }

		 if(nDispMode == DISP_MODE_CAR )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d102      	bne.n	80048e8 <MainLCDDisplayMode+0x58>
		 {
			 MainBGImageDraw(DISP_BG_CAR);
 80048e2:	2003      	movs	r0, #3
 80048e4:	f7ff ff8c 	bl	8004800 <MainBGImageDraw>
		 }

		 if(nDispMode == DISP_MODE_F14 )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d102      	bne.n	80048f4 <MainLCDDisplayMode+0x64>
		 {
			 MainBGImageDraw(DISP_BG_F14);
 80048ee:	2004      	movs	r0, #4
 80048f0:	f7ff ff86 	bl	8004800 <MainBGImageDraw>
		 }

		 if(nDispMode == DISP_MODE_BALLOON )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d102      	bne.n	8004900 <MainLCDDisplayMode+0x70>
		 {
			 MainBGImageDraw(DISP_BG_3D_IMG);
 80048fa:	2005      	movs	r0, #5
 80048fc:	f7ff ff80 	bl	8004800 <MainBGImageDraw>
		 }

	   }

	    // Temp + Humi + Time
		if( nDispMode == DISP_MODE_ALL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 81e8 	bne.w	8004cd8 <MainLCDDisplayMode+0x448>
		{
			 MeasureTempHumi();
 8004908:	f001 f9ae 	bl	8005c68 <MeasureTempHumi>

			 //get current time / day
			 Get_Time();
 800490c:	f7ff ff20 	bl	8004750 <Get_Time>

			 TFT_setTextBackColor(TFT_COLOR_Black);
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd5f 	bl	80043d4 <TFT_setTextBackColor>
			 TFT_setColor(TFT_COLOR_Orange);
 8004916:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 800491a:	f7fe ff1d 	bl	8003758 <TFT_setColor>

			 //TFT_setFontSize(2);
			 //TFT_print(5,10, "DEV :");
			 TFT_setFontSize(2);
 800491e:	2002      	movs	r0, #2
 8004920:	f7ff fcf8 	bl	8004314 <TFT_setFontSize>
			 sprintf(cLogData, "%02d/%02d/%02d", time.year,time.month,time.dayofmonth);
 8004924:	4ba9      	ldr	r3, [pc, #676]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 8004926:	799b      	ldrb	r3, [r3, #6]
 8004928:	461a      	mov	r2, r3
 800492a:	4ba8      	ldr	r3, [pc, #672]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 800492c:	795b      	ldrb	r3, [r3, #5]
 800492e:	4619      	mov	r1, r3
 8004930:	4ba6      	ldr	r3, [pc, #664]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	460b      	mov	r3, r1
 8004938:	49a5      	ldr	r1, [pc, #660]	; (8004bd0 <MainLCDDisplayMode+0x340>)
 800493a:	48a6      	ldr	r0, [pc, #664]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 800493c:	f007 fcd0 	bl	800c2e0 <siprintf>
			 //sprintf(cLogData, "%04d/%02d/%02d", 2021,2,24,13,23);
			 TFT_print(20,20, cLogData);
 8004940:	4aa4      	ldr	r2, [pc, #656]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 8004942:	2114      	movs	r1, #20
 8004944:	2014      	movs	r0, #20
 8004946:	f7ff fcb9 	bl	80042bc <TFT_print>

			 TFT_setFontSize(3);
 800494a:	2003      	movs	r0, #3
 800494c:	f7ff fce2 	bl	8004314 <TFT_setFontSize>
			 TFT_setColor(TFT_COLOR_White);
 8004950:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004954:	f7fe ff00 	bl	8003758 <TFT_setColor>
			 //TFT_setTextBackColor(TFT_COLOR_Teal);

			 int hour12 = (int)time.hour;
 8004958:	4b9c      	ldr	r3, [pc, #624]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 800495a:	789b      	ldrb	r3, [r3, #2]
 800495c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 if(hour12 > 12 )
 8004960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004964:	2b0c      	cmp	r3, #12
 8004966:	dd04      	ble.n	8004972 <MainLCDDisplayMode+0xe2>
			 {
				 hour12 = hour12 - 12;
 8004968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800496c:	3b0c      	subs	r3, #12
 800496e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 sprintf(cLogData, "%02d:%02d:%02d", hour12, time.minutes, time.seconds);
 8004972:	4b96      	ldr	r3, [pc, #600]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	461a      	mov	r2, r3
 8004978:	4b94      	ldr	r3, [pc, #592]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004984:	4994      	ldr	r1, [pc, #592]	; (8004bd8 <MainLCDDisplayMode+0x348>)
 8004986:	4893      	ldr	r0, [pc, #588]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 8004988:	f007 fcaa 	bl	800c2e0 <siprintf>
			 //sprintf(cLogData, "%02d:%02d:%02d", 13,23,57);
			 TFT_print(150,15, cLogData);
 800498c:	4a91      	ldr	r2, [pc, #580]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 800498e:	210f      	movs	r1, #15
 8004990:	2096      	movs	r0, #150	; 0x96
 8004992:	f7ff fc93 	bl	80042bc <TFT_print>
			 //TFT_setFontSize(8);
			 //sprintf(cLogData, "%02d", hour12);
			 //TFT_print(20,70, cLogData);

			 //int hour12 = (int)time.hour;
			 if(hour12 >= 12 )
 8004996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800499a:	2b0b      	cmp	r3, #11
 800499c:	dd04      	ble.n	80049a8 <MainLCDDisplayMode+0x118>
			 {
				 hour12 = hour12 - 12;
 800499e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049a2:	3b0c      	subs	r3, #12
 80049a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 if(hour12 == 0) hour12 =12;
 80049a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <MainLCDDisplayMode+0x126>
 80049b0:	230c      	movs	r3, #12
 80049b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 //int nHourOld = 0;
			 //int nMinuteOld = 0;

			 if(hour12 != nHourOld )
 80049b6:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <MainLCDDisplayMode+0x328>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80049be:	429a      	cmp	r2, r3
 80049c0:	f000 80d8 	beq.w	8004b74 <MainLCDDisplayMode+0x2e4>
			 {
				 nHourOld = hour12;
 80049c4:	4a7c      	ldr	r2, [pc, #496]	; (8004bb8 <MainLCDDisplayMode+0x328>)
 80049c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ca:	6013      	str	r3, [r2, #0]

				 sprintf(cLogData, "%02d", hour12);
 80049cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80049d0:	4982      	ldr	r1, [pc, #520]	; (8004bdc <MainLCDDisplayMode+0x34c>)
 80049d2:	4880      	ldr	r0, [pc, #512]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 80049d4:	f007 fc84 	bl	800c2e0 <siprintf>
				 //TFT_print(pos_x+20, pos_y,cLogData);
				 LCD_DrawText(cLogData, FONT9, 15, 80, TFT_COLOR_White, TFT_COLOR_clear);
 80049d8:	2300      	movs	r3, #0
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2350      	movs	r3, #80	; 0x50
 80049e4:	220f      	movs	r2, #15
 80049e6:	497e      	ldr	r1, [pc, #504]	; (8004be0 <MainLCDDisplayMode+0x350>)
 80049e8:	487a      	ldr	r0, [pc, #488]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 80049ea:	f7ff fd9b 	bl	8004524 <LCD_DrawText>

				 /////////////////////////////////////////////////////////////////////////////
				 TFT_drawLineHorizontal(20,140,80,1,TFT_COLOR_Silver);
 80049ee:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2301      	movs	r3, #1
 80049f6:	2250      	movs	r2, #80	; 0x50
 80049f8:	218c      	movs	r1, #140	; 0x8c
 80049fa:	2014      	movs	r0, #20
 80049fc:	f7fe ff8e 	bl	800391c <TFT_drawLineHorizontal>
				 TFT_drawLine(100,140,115,115,1,TFT_COLOR_Silver);
 8004a00:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	2301      	movs	r3, #1
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	2373      	movs	r3, #115	; 0x73
 8004a0c:	2273      	movs	r2, #115	; 0x73
 8004a0e:	218c      	movs	r1, #140	; 0x8c
 8004a10:	2064      	movs	r0, #100	; 0x64
 8004a12:	f7fe ff01 	bl	8003818 <TFT_drawLine>
				 /////////////////////////////////////////////////////////////////////////////

				 /////////////////////////////////////////////////////////////////////////////

				 TFT_fillRectangle(99,95, 35,30, TFT_COLOR_Gray); //fill rect bg
 8004a16:	f246 330c 	movw	r3, #25356	; 0x630c
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	231e      	movs	r3, #30
 8004a1e:	2223      	movs	r2, #35	; 0x23
 8004a20:	215f      	movs	r1, #95	; 0x5f
 8004a22:	2063      	movs	r0, #99	; 0x63
 8004a24:	f7ff f868 	bl	8003af8 <TFT_fillRectangle>

				 TFT_drawLine(110,100, 105,115,2,TFT_COLOR_Silver);  // / \ l
 8004a28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	2302      	movs	r3, #2
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2373      	movs	r3, #115	; 0x73
 8004a34:	2269      	movs	r2, #105	; 0x69
 8004a36:	2164      	movs	r1, #100	; 0x64
 8004a38:	206e      	movs	r0, #110	; 0x6e
 8004a3a:	f7fe feed 	bl	8003818 <TFT_drawLine>
				 TFT_drawLine(110,100, 115,115,2,TFT_COLOR_Silver);  // / \ l
 8004a3e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	2302      	movs	r3, #2
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2373      	movs	r3, #115	; 0x73
 8004a4a:	2273      	movs	r2, #115	; 0x73
 8004a4c:	2164      	movs	r1, #100	; 0x64
 8004a4e:	206e      	movs	r0, #110	; 0x6e
 8004a50:	f7fe fee2 	bl	8003818 <TFT_drawLine>
				 TFT_drawLine(125,100, 125,115,2,TFT_COLOR_Silver);  // / \ l
 8004a54:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2373      	movs	r3, #115	; 0x73
 8004a60:	227d      	movs	r2, #125	; 0x7d
 8004a62:	2164      	movs	r1, #100	; 0x64
 8004a64:	207d      	movs	r0, #125	; 0x7d
 8004a66:	f7fe fed7 	bl	8003818 <TFT_drawLine>

				 //////////////////////////////////////////////////////////////////////////////////

				 /////////////////////////////////////////////////////////////////////////////
				 TFT_drawLineHorizontal(20,220,80,1,TFT_COLOR_Silver);
 8004a6a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2301      	movs	r3, #1
 8004a72:	2250      	movs	r2, #80	; 0x50
 8004a74:	21dc      	movs	r1, #220	; 0xdc
 8004a76:	2014      	movs	r0, #20
 8004a78:	f7fe ff50 	bl	800391c <TFT_drawLineHorizontal>
				 TFT_drawLine(100,220,115,195,1,TFT_COLOR_Silver);
 8004a7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	2301      	movs	r3, #1
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	23c3      	movs	r3, #195	; 0xc3
 8004a88:	2273      	movs	r2, #115	; 0x73
 8004a8a:	21dc      	movs	r1, #220	; 0xdc
 8004a8c:	2064      	movs	r0, #100	; 0x64
 8004a8e:	f7fe fec3 	bl	8003818 <TFT_drawLine>
				 /////////////////////////////////////////////////////////////////////////////

				 TFT_fillRectangle(99,175, 35,32, TFT_COLOR_Gray); //fill rect bg
 8004a92:	f246 330c 	movw	r3, #25356	; 0x630c
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2320      	movs	r3, #32
 8004a9a:	2223      	movs	r2, #35	; 0x23
 8004a9c:	21af      	movs	r1, #175	; 0xaf
 8004a9e:	2063      	movs	r0, #99	; 0x63
 8004aa0:	f7ff f82a 	bl	8003af8 <TFT_fillRectangle>

				 TFT_drawLine(105,180, 105,190,2,TFT_COLOR_Silver);  // / l
 8004aa4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	2302      	movs	r3, #2
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	23be      	movs	r3, #190	; 0xbe
 8004ab0:	2269      	movs	r2, #105	; 0x69
 8004ab2:	21b4      	movs	r1, #180	; 0xb4
 8004ab4:	2069      	movs	r0, #105	; 0x69
 8004ab6:	f7fe feaf 	bl	8003818 <TFT_drawLine>
				 TFT_drawLine(125,180, 125,190,2,TFT_COLOR_Silver);  // / l
 8004aba:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	23be      	movs	r3, #190	; 0xbe
 8004ac6:	227d      	movs	r2, #125	; 0x7d
 8004ac8:	21b4      	movs	r1, #180	; 0xb4
 8004aca:	207d      	movs	r0, #125	; 0x7d
 8004acc:	f7fe fea4 	bl	8003818 <TFT_drawLine>
				 TFT_drawLine(105,185, 125,185,2,TFT_COLOR_Silver);  // / l
 8004ad0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	23b9      	movs	r3, #185	; 0xb9
 8004adc:	227d      	movs	r2, #125	; 0x7d
 8004ade:	21b9      	movs	r1, #185	; 0xb9
 8004ae0:	2069      	movs	r0, #105	; 0x69
 8004ae2:	f7fe fe99 	bl	8003818 <TFT_drawLine>
				 TFT_drawLine(105,190, 125,190,2,TFT_COLOR_Silver);  // / l
 8004ae6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	2302      	movs	r3, #2
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	23be      	movs	r3, #190	; 0xbe
 8004af2:	227d      	movs	r2, #125	; 0x7d
 8004af4:	21be      	movs	r1, #190	; 0xbe
 8004af6:	2069      	movs	r0, #105	; 0x69
 8004af8:	f7fe fe8e 	bl	8003818 <TFT_drawLine>

				 TFT_drawLine(105,193, 125,193,2,TFT_COLOR_Silver);  // / l
 8004afc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	2302      	movs	r3, #2
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	23c1      	movs	r3, #193	; 0xc1
 8004b08:	227d      	movs	r2, #125	; 0x7d
 8004b0a:	21c1      	movs	r1, #193	; 0xc1
 8004b0c:	2069      	movs	r0, #105	; 0x69
 8004b0e:	f7fe fe83 	bl	8003818 <TFT_drawLine>

				 TFT_drawLine(115,195, 115,198,2,TFT_COLOR_Silver);  // / l
 8004b12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	2302      	movs	r3, #2
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	23c6      	movs	r3, #198	; 0xc6
 8004b1e:	2273      	movs	r2, #115	; 0x73
 8004b20:	21c3      	movs	r1, #195	; 0xc3
 8004b22:	2073      	movs	r0, #115	; 0x73
 8004b24:	f7fe fe78 	bl	8003818 <TFT_drawLine>

				 TFT_drawLine(105,197, 105,202,2,TFT_COLOR_Silver);  // / l
 8004b28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	2302      	movs	r3, #2
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	23ca      	movs	r3, #202	; 0xca
 8004b34:	2269      	movs	r2, #105	; 0x69
 8004b36:	21c5      	movs	r1, #197	; 0xc5
 8004b38:	2069      	movs	r0, #105	; 0x69
 8004b3a:	f7fe fe6d 	bl	8003818 <TFT_drawLine>
				 TFT_drawLine(105,202, 125,202,2,TFT_COLOR_Silver);  // / l
 8004b3e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	2302      	movs	r3, #2
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	23ca      	movs	r3, #202	; 0xca
 8004b4a:	227d      	movs	r2, #125	; 0x7d
 8004b4c:	21ca      	movs	r1, #202	; 0xca
 8004b4e:	2069      	movs	r0, #105	; 0x69
 8004b50:	f7fe fe62 	bl	8003818 <TFT_drawLine>
				 //sprintf(cLogData, "-");
				 //TFT_print(pos_x+20, pos_y,cLogData);
				 //LCD_DrawText(cLogData, FONT9, 20, 130, TFT_COLOR_White, TFT_COLOR_clear);
				 //LCD_DrawText(cLogData, FONT9, 40, 130, TFT_COLOR_White, TFT_COLOR_clear);

				 TFT_setColor(TFT_COLOR_Silver);
 8004b54:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b58:	f7fe fdfe 	bl	8003758 <TFT_setColor>
				 TFT_setTextBackColor(TFT_COLOR_Gray);
 8004b5c:	f246 300c 	movw	r0, #25356	; 0x630c
 8004b60:	f7ff fc38 	bl	80043d4 <TFT_setTextBackColor>
				 TFT_setFontSize(2);
 8004b64:	2002      	movs	r0, #2
 8004b66:	f7ff fbd5 	bl	8004314 <TFT_setFontSize>
				 TFT_print(22,50, "Time");
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <MainLCDDisplayMode+0x354>)
 8004b6c:	2132      	movs	r1, #50	; 0x32
 8004b6e:	2016      	movs	r0, #22
 8004b70:	f7ff fba4 	bl	80042bc <TFT_print>

			 ///BIG MINUTE
			 //TFT_setFontSize(8);
			 //sprintf(cLogData, "%02d", time.minutes);
			 //TFT_print(20,150, cLogData);
			 if(time.minutes != nMinuteOld)
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <MainLCDDisplayMode+0x32c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d032      	beq.n	8004be8 <MainLCDDisplayMode+0x358>
			 {
				 //nHourOld = hour12;
				 nMinuteOld = time.minutes;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <MainLCDDisplayMode+0x32c>)
 8004b8a:	601a      	str	r2, [r3, #0]

				 sprintf(cLogData, "%02d", (int)time.minutes);
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <MainLCDDisplayMode+0x33c>)
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4912      	ldr	r1, [pc, #72]	; (8004bdc <MainLCDDisplayMode+0x34c>)
 8004b94:	480f      	ldr	r0, [pc, #60]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 8004b96:	f007 fba3 	bl	800c2e0 <siprintf>
				 //TFT_print(pos_x+140, pos_y,cLogData);
				LCD_DrawText(cLogData, FONT9, 15, 160, TFT_COLOR_White, TFT_COLOR_clear);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	23a0      	movs	r3, #160	; 0xa0
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	490d      	ldr	r1, [pc, #52]	; (8004be0 <MainLCDDisplayMode+0x350>)
 8004baa:	480a      	ldr	r0, [pc, #40]	; (8004bd4 <MainLCDDisplayMode+0x344>)
 8004bac:	f7ff fcba 	bl	8004524 <LCD_DrawText>
 8004bb0:	e01a      	b.n	8004be8 <MainLCDDisplayMode+0x358>
 8004bb2:	bf00      	nop
 8004bb4:	20000020 	.word	0x20000020
 8004bb8:	20000024 	.word	0x20000024
 8004bbc:	20000394 	.word	0x20000394
 8004bc0:	20000b44 	.word	0x20000b44
 8004bc4:	bf800000 	.word	0xbf800000
 8004bc8:	20000b40 	.word	0x20000b40
 8004bcc:	2000095c 	.word	0x2000095c
 8004bd0:	0800e888 	.word	0x0800e888
 8004bd4:	20000a74 	.word	0x20000a74
 8004bd8:	0800e898 	.word	0x0800e898
 8004bdc:	0800e8a8 	.word	0x0800e8a8
 8004be0:	0801380c 	.word	0x0801380c
 8004be4:	0800e8b0 	.word	0x0800e8b0
			 }

			 //========================================================================

			 TFT_setColor(TFT_COLOR_Green_Light);
 8004be8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004bec:	f7fe fdb4 	bl	8003758 <TFT_setColor>

			  TFT_setFontSize(2);
 8004bf0:	2002      	movs	r0, #2
 8004bf2:	f7ff fb8f 	bl	8004314 <TFT_setFontSize>
			  //sprintf(cLogData, "??");//??  =>  °
			  //TFT_print(247,95, cLogData);
			  TFT_setFontSize(3);
 8004bf6:	2003      	movs	r0, #3
 8004bf8:	f7ff fb8c 	bl	8004314 <TFT_setFontSize>
			  sprintf(cLogData, "C");
 8004bfc:	49a2      	ldr	r1, [pc, #648]	; (8004e88 <MainLCDDisplayMode+0x5f8>)
 8004bfe:	48a3      	ldr	r0, [pc, #652]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c00:	f007 fb6e 	bl	800c2e0 <siprintf>
			  TFT_print(255,90, cLogData);
 8004c04:	4aa1      	ldr	r2, [pc, #644]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c06:	215a      	movs	r1, #90	; 0x5a
 8004c08:	20ff      	movs	r0, #255	; 0xff
 8004c0a:	f7ff fb57 	bl	80042bc <TFT_print>

			  TFT_setFontSize(4);
 8004c0e:	2004      	movs	r0, #4
 8004c10:	f7ff fb80 	bl	8004314 <TFT_setFontSize>

			  sprintf(cLogData, "%.1f", (float)HDC1080_Temp);
 8004c14:	4b9e      	ldr	r3, [pc, #632]	; (8004e90 <MainLCDDisplayMode+0x600>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fb fc9d 	bl	8000558 <__aeabi_f2d>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	499c      	ldr	r1, [pc, #624]	; (8004e94 <MainLCDDisplayMode+0x604>)
 8004c24:	4899      	ldr	r0, [pc, #612]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c26:	f007 fb5b 	bl	800c2e0 <siprintf>
			  TFT_setTextBackColor(TFT_COLOR_Gray);
 8004c2a:	f246 300c 	movw	r0, #25356	; 0x630c
 8004c2e:	f7ff fbd1 	bl	80043d4 <TFT_setTextBackColor>
			  //TFT_print(100,160, "T"); //TFT_print(10,30, "Temp:");

			  TFT_setColor(TFT_COLOR_Green_Light);
 8004c32:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004c36:	f7fe fd8f 	bl	8003758 <TFT_setColor>
			  TFT_setTextBackColor(TFT_COLOR_Black);
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7ff fbca 	bl	80043d4 <TFT_setTextBackColor>
			  TFT_print(150,80, cLogData);
 8004c40:	4a92      	ldr	r2, [pc, #584]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c42:	2150      	movs	r1, #80	; 0x50
 8004c44:	2096      	movs	r0, #150	; 0x96
 8004c46:	f7ff fb39 	bl	80042bc <TFT_print>

			  TFT_setColor(TFT_COLOR_Aqua);
 8004c4a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004c4e:	f7fe fd83 	bl	8003758 <TFT_setColor>
			  sprintf(cLogData, "%.1f", (float)HDC1080_Humi);
 8004c52:	4b91      	ldr	r3, [pc, #580]	; (8004e98 <MainLCDDisplayMode+0x608>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb fc7e 	bl	8000558 <__aeabi_f2d>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	498c      	ldr	r1, [pc, #560]	; (8004e94 <MainLCDDisplayMode+0x604>)
 8004c62:	488a      	ldr	r0, [pc, #552]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c64:	f007 fb3c 	bl	800c2e0 <siprintf>
			  TFT_setTextBackColor(TFT_COLOR_Gray);
 8004c68:	f246 300c 	movw	r0, #25356	; 0x630c
 8004c6c:	f7ff fbb2 	bl	80043d4 <TFT_setTextBackColor>
			 // TFT_print(100,160, "H:");//TFT_print(10,60, "Humi:");

			  TFT_setColor(TFT_COLOR_Aqua);
 8004c70:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004c74:	f7fe fd70 	bl	8003758 <TFT_setColor>
			  TFT_setTextBackColor(TFT_COLOR_Black);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7ff fbab 	bl	80043d4 <TFT_setTextBackColor>
			  TFT_print(150,160, cLogData);
 8004c7e:	4a83      	ldr	r2, [pc, #524]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c80:	21a0      	movs	r1, #160	; 0xa0
 8004c82:	2096      	movs	r0, #150	; 0x96
 8004c84:	f7ff fb1a 	bl	80042bc <TFT_print>

			  TFT_setFontSize(3);
 8004c88:	2003      	movs	r0, #3
 8004c8a:	f7ff fb43 	bl	8004314 <TFT_setFontSize>
			  sprintf(cLogData, "%%");
 8004c8e:	4983      	ldr	r1, [pc, #524]	; (8004e9c <MainLCDDisplayMode+0x60c>)
 8004c90:	487e      	ldr	r0, [pc, #504]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c92:	f007 fb25 	bl	800c2e0 <siprintf>
			  TFT_print(255,165, cLogData);
 8004c96:	4a7d      	ldr	r2, [pc, #500]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004c98:	21a5      	movs	r1, #165	; 0xa5
 8004c9a:	20ff      	movs	r0, #255	; 0xff
 8004c9c:	f7ff fb0e 	bl	80042bc <TFT_print>

			  //
			  TFT_setColor(TFT_COLOR_Silver);
 8004ca0:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004ca4:	f7fe fd58 	bl	8003758 <TFT_setColor>
			  TFT_setTextBackColor(TFT_COLOR_Gray);
 8004ca8:	f246 300c 	movw	r0, #25356	; 0x630c
 8004cac:	f7ff fb92 	bl	80043d4 <TFT_setTextBackColor>
			  TFT_setFontSize(2);
 8004cb0:	2002      	movs	r0, #2
 8004cb2:	f7ff fb2f 	bl	8004314 <TFT_setFontSize>
			  TFT_print(150,50, "Temp");
 8004cb6:	4a7a      	ldr	r2, [pc, #488]	; (8004ea0 <MainLCDDisplayMode+0x610>)
 8004cb8:	2132      	movs	r1, #50	; 0x32
 8004cba:	2096      	movs	r0, #150	; 0x96
 8004cbc:	f7ff fafe 	bl	80042bc <TFT_print>
			  TFT_print(150,135, "Humi");
 8004cc0:	4a78      	ldr	r2, [pc, #480]	; (8004ea4 <MainLCDDisplayMode+0x614>)
 8004cc2:	2187      	movs	r1, #135	; 0x87
 8004cc4:	2096      	movs	r0, #150	; 0x96
 8004cc6:	f7ff faf9 	bl	80042bc <TFT_print>

			  TFT_setTextBackColor(TFT_COLOR_Black);
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7ff fb82 	bl	80043d4 <TFT_setTextBackColor>

			 //TEST CODE
			 TFT_setCursor(140,155);
 8004cd0:	219b      	movs	r1, #155	; 0x9b
 8004cd2:	208c      	movs	r0, #140	; 0x8c
 8004cd4:	f7fe fd50 	bl	8003778 <TFT_setCursor>

		}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if( nDispMode == DISP_MODE_TIME)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	f040 8506 	bne.w	80056ec <MainLCDDisplayMode+0xe5c>
		{
			//delay time for redraw
			//if(nDelayDispCnt++ < 5) return;
			//else  nDelayDispCnt = 0;

			Get_Time();
 8004ce0:	f7ff fd36 	bl	8004750 <Get_Time>

			 TFT_setColor(TFT_COLOR_Orange);
 8004ce4:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8004ce8:	f7fe fd36 	bl	8003758 <TFT_setColor>
			 // TFT_clear();

			 //TFT_setFontSize(2);
			 //TFT_print(5,10, "DEV :");
			 TFT_setFontSize(3);
 8004cec:	2003      	movs	r0, #3
 8004cee:	f7ff fb11 	bl	8004314 <TFT_setFontSize>

			 int year = (int)time.year;
 8004cf2:	4b6d      	ldr	r3, [pc, #436]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004cf4:	799b      	ldrb	r3, [r3, #6]
 8004cf6:	673b      	str	r3, [r7, #112]	; 0x70
			 year = year;
			// year = 2000 + year;
			 if(time.dayofmonth != nDayOld)
 8004cf8:	4b6b      	ldr	r3, [pc, #428]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004cfa:	791b      	ldrb	r3, [r3, #4]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b6b      	ldr	r3, [pc, #428]	; (8004eac <MainLCDDisplayMode+0x61c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d01b      	beq.n	8004d3e <MainLCDDisplayMode+0x4ae>
			 {
				 nDayOld = time.dayofmonth;
 8004d06:	4b68      	ldr	r3, [pc, #416]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b67      	ldr	r3, [pc, #412]	; (8004eac <MainLCDDisplayMode+0x61c>)
 8004d0e:	601a      	str	r2, [r3, #0]
				 //sprintf(cLogData, "%02d-%02d",time.month, time.dayofmonth);
				 sprintf(cLogData, "%02d.%02d.%02d", year, time.month, time.dayofmonth);
 8004d10:	4b65      	ldr	r3, [pc, #404]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004d12:	795b      	ldrb	r3, [r3, #5]
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b64      	ldr	r3, [pc, #400]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004d18:	791b      	ldrb	r3, [r3, #4]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d20:	4963      	ldr	r1, [pc, #396]	; (8004eb0 <MainLCDDisplayMode+0x620>)
 8004d22:	485a      	ldr	r0, [pc, #360]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004d24:	f007 fadc 	bl	800c2e0 <siprintf>
				 //sprintf(cLogData, "%04d.%02d.%02d", year, time.month, time.dayofmonth);

				 //LCD_DrawText(cLogData, Digital, 60, 135, TFT_COLOR_Orange, TFT_COLOR_Black);
				 //LCD_DrawText(cLogData, FONT10, 60, 143, TFT_COLOR_Orange, TFT_COLOR_Gray);
				 LCD_DrawText(cLogData, FONT6, 60, 13, TFT_COLOR_Silver, TFT_COLOR_none);
 8004d28:	2301      	movs	r3, #1
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	230d      	movs	r3, #13
 8004d34:	223c      	movs	r2, #60	; 0x3c
 8004d36:	495f      	ldr	r1, [pc, #380]	; (8004eb4 <MainLCDDisplayMode+0x624>)
 8004d38:	4854      	ldr	r0, [pc, #336]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004d3a:	f7ff fbf3 	bl	8004524 <LCD_DrawText>

			 }

			 //TFT_print(30,35, cLogData);

			TFT_setFontSize(7);
 8004d3e:	2007      	movs	r0, #7
 8004d40:	f7ff fae8 	bl	8004314 <TFT_setFontSize>
			TFT_setColor(TFT_COLOR_White);
 8004d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d48:	f7fe fd06 	bl	8003758 <TFT_setColor>
			 //TFT_setTextBackColor(TFT_COLOR_Teal);

			//sprintf(cLogData, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);

			 int hour12 = (int)time.hour;
 8004d4c:	4b56      	ldr	r3, [pc, #344]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004d4e:	789b      	ldrb	r3, [r3, #2]
 8004d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			 if(hour12 >= 12 )
 8004d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d58:	2b0b      	cmp	r3, #11
 8004d5a:	dd04      	ble.n	8004d66 <MainLCDDisplayMode+0x4d6>
			 {
				 hour12 = hour12 - 12;
 8004d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d60:	3b0c      	subs	r3, #12
 8004d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			 }

			 if(hour12 == 0) hour12 =12;
 8004d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <MainLCDDisplayMode+0x4e4>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

			 //int nHourOld = 0;
			 //int nMinuteOld = 0;

			 int nHour_Px = 50;
 8004d74:	2332      	movs	r3, #50	; 0x32
 8004d76:	66fb      	str	r3, [r7, #108]	; 0x6c
			 int nHour_py = 52;
 8004d78:	2334      	movs	r3, #52	; 0x34
 8004d7a:	66bb      	str	r3, [r7, #104]	; 0x68

			 int Minute_Px = 170;
 8004d7c:	23aa      	movs	r3, #170	; 0xaa
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
			 int nMinute_py = 52;
 8004d80:	2334      	movs	r3, #52	; 0x34
 8004d82:	663b      	str	r3, [r7, #96]	; 0x60

			 if(hour12 != nHourOld )
 8004d84:	4b4c      	ldr	r3, [pc, #304]	; (8004eb8 <MainLCDDisplayMode+0x628>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d04b      	beq.n	8004e28 <MainLCDDisplayMode+0x598>
			 {
				 nHourOld = hour12;
 8004d90:	4a49      	ldr	r2, [pc, #292]	; (8004eb8 <MainLCDDisplayMode+0x628>)
 8004d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d96:	6013      	str	r3, [r2, #0]

				 sprintf(cLogData, "%02d", hour12);
 8004d98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d9c:	4947      	ldr	r1, [pc, #284]	; (8004ebc <MainLCDDisplayMode+0x62c>)
 8004d9e:	483b      	ldr	r0, [pc, #236]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004da0:	f007 fa9e 	bl	800c2e0 <siprintf>
				 //LCD_DrawText(cLogData, Digital, 30, 60, TFT_COLOR_White, TFT_COLOR_Black);
				 LCD_DrawText(cLogData, FONT9, nHour_Px, nHour_py, TFT_COLOR_Silver, TFT_COLOR_Black);
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2100      	movs	r1, #0
 8004dae:	9101      	str	r1, [sp, #4]
 8004db0:	f24c 6118 	movw	r1, #50712	; 0xc618
 8004db4:	9100      	str	r1, [sp, #0]
 8004db6:	4942      	ldr	r1, [pc, #264]	; (8004ec0 <MainLCDDisplayMode+0x630>)
 8004db8:	4834      	ldr	r0, [pc, #208]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004dba:	f7ff fbb3 	bl	8004524 <LCD_DrawText>

				 sprintf(cLogData, ":");
 8004dbe:	4941      	ldr	r1, [pc, #260]	; (8004ec4 <MainLCDDisplayMode+0x634>)
 8004dc0:	4832      	ldr	r0, [pc, #200]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004dc2:	f007 fa8d 	bl	800c2e0 <siprintf>
				 //LCD_DrawText(cLogData, Digital, 108, 60, TFT_COLOR_White, TFT_COLOR_Black);
				 LCD_DrawText(cLogData, FONT9, 130, 60, TFT_COLOR_Silver, TFT_COLOR_Black);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	233c      	movs	r3, #60	; 0x3c
 8004dd2:	2282      	movs	r2, #130	; 0x82
 8004dd4:	493a      	ldr	r1, [pc, #232]	; (8004ec0 <MainLCDDisplayMode+0x630>)
 8004dd6:	482d      	ldr	r0, [pc, #180]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004dd8:	f7ff fba4 	bl	8004524 <LCD_DrawText>

				 TFT_setFontSize(2);
 8004ddc:	2002      	movs	r0, #2
 8004dde:	f7ff fa99 	bl	8004314 <TFT_setFontSize>
				 if(time.hour < 12)
 8004de2:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004de4:	789b      	ldrb	r3, [r3, #2]
 8004de6:	2b0b      	cmp	r3, #11
 8004de8:	d80f      	bhi.n	8004e0a <MainLCDDisplayMode+0x57a>
				 {
					 sprintf(cLogData, "AM");
 8004dea:	4937      	ldr	r1, [pc, #220]	; (8004ec8 <MainLCDDisplayMode+0x638>)
 8004dec:	4827      	ldr	r0, [pc, #156]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004dee:	f007 fa77 	bl	800c2e0 <siprintf>
					 LCD_DrawText(cLogData, FONT6, 255, 74, TFT_COLOR_Silver, TFT_COLOR_none);
 8004df2:	2301      	movs	r3, #1
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	234a      	movs	r3, #74	; 0x4a
 8004dfe:	22ff      	movs	r2, #255	; 0xff
 8004e00:	492c      	ldr	r1, [pc, #176]	; (8004eb4 <MainLCDDisplayMode+0x624>)
 8004e02:	4822      	ldr	r0, [pc, #136]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004e04:	f7ff fb8e 	bl	8004524 <LCD_DrawText>
 8004e08:	e00e      	b.n	8004e28 <MainLCDDisplayMode+0x598>

				 }

				 else
				 {
					 sprintf(cLogData, "PM");
 8004e0a:	4930      	ldr	r1, [pc, #192]	; (8004ecc <MainLCDDisplayMode+0x63c>)
 8004e0c:	481f      	ldr	r0, [pc, #124]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004e0e:	f007 fa67 	bl	800c2e0 <siprintf>
					LCD_DrawText(cLogData, FONT6, 255, 74, TFT_COLOR_Silver, TFT_COLOR_none);
 8004e12:	2301      	movs	r3, #1
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	234a      	movs	r3, #74	; 0x4a
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	4924      	ldr	r1, [pc, #144]	; (8004eb4 <MainLCDDisplayMode+0x624>)
 8004e22:	481a      	ldr	r0, [pc, #104]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004e24:	f7ff fb7e 	bl	8004524 <LCD_DrawText>

				 }

			 }

			 if(time.minutes != nMinuteOld)
 8004e28:	4b1f      	ldr	r3, [pc, #124]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <MainLCDDisplayMode+0x640>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d057      	beq.n	8004ee6 <MainLCDDisplayMode+0x656>
			 {
				 //nHourOld = hour12;
				 nMinuteOld = time.minutes;
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <MainLCDDisplayMode+0x640>)
 8004e3e:	601a      	str	r2, [r3, #0]

				 sprintf(cLogData, "%02d", time.minutes);
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <MainLCDDisplayMode+0x618>)
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	461a      	mov	r2, r3
 8004e46:	491d      	ldr	r1, [pc, #116]	; (8004ebc <MainLCDDisplayMode+0x62c>)
 8004e48:	4810      	ldr	r0, [pc, #64]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004e4a:	f007 fa49 	bl	800c2e0 <siprintf>
				 //LCD_DrawText(cLogData, Digital, 150, 60, TFT_COLOR_White, TFT_COLOR_Black);
				 LCD_DrawText(cLogData, FONT9, Minute_Px, nMinute_py, TFT_COLOR_Silver, TFT_COLOR_Black);
 8004e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2100      	movs	r1, #0
 8004e58:	9101      	str	r1, [sp, #4]
 8004e5a:	f24c 6118 	movw	r1, #50712	; 0xc618
 8004e5e:	9100      	str	r1, [sp, #0]
 8004e60:	4917      	ldr	r1, [pc, #92]	; (8004ec0 <MainLCDDisplayMode+0x630>)
 8004e62:	480a      	ldr	r0, [pc, #40]	; (8004e8c <MainLCDDisplayMode+0x5fc>)
 8004e64:	f7ff fb5e 	bl	8004524 <LCD_DrawText>

				 if(nBarColor == 1)  nBarColor = 2;
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <MainLCDDisplayMode+0x644>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d103      	bne.n	8004e78 <MainLCDDisplayMode+0x5e8>
 8004e70:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <MainLCDDisplayMode+0x644>)
 8004e72:	2202      	movs	r2, #2
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e036      	b.n	8004ee6 <MainLCDDisplayMode+0x656>
				 else if(nBarColor == 2)  nBarColor = 3;
 8004e78:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <MainLCDDisplayMode+0x644>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d12b      	bne.n	8004ed8 <MainLCDDisplayMode+0x648>
 8004e80:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <MainLCDDisplayMode+0x644>)
 8004e82:	2203      	movs	r2, #3
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e02e      	b.n	8004ee6 <MainLCDDisplayMode+0x656>
 8004e88:	0800e8b8 	.word	0x0800e8b8
 8004e8c:	20000a74 	.word	0x20000a74
 8004e90:	20000a70 	.word	0x20000a70
 8004e94:	0800e8bc 	.word	0x0800e8bc
 8004e98:	20000b3c 	.word	0x20000b3c
 8004e9c:	0800e8c4 	.word	0x0800e8c4
 8004ea0:	0800e8c8 	.word	0x0800e8c8
 8004ea4:	0800e8d0 	.word	0x0800e8d0
 8004ea8:	2000095c 	.word	0x2000095c
 8004eac:	20000030 	.word	0x20000030
 8004eb0:	0800e8d8 	.word	0x0800e8d8
 8004eb4:	0800ec44 	.word	0x0800ec44
 8004eb8:	20000024 	.word	0x20000024
 8004ebc:	0800e8a8 	.word	0x0800e8a8
 8004ec0:	0801380c 	.word	0x0801380c
 8004ec4:	0800e8e8 	.word	0x0800e8e8
 8004ec8:	0800e8ec 	.word	0x0800e8ec
 8004ecc:	0800e8f0 	.word	0x0800e8f0
 8004ed0:	20000394 	.word	0x20000394
 8004ed4:	2000002c 	.word	0x2000002c
				 else if(nBarColor == 3)  nBarColor = 1;
 8004ed8:	4b9c      	ldr	r3, [pc, #624]	; (800514c <MainLCDDisplayMode+0x8bc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d102      	bne.n	8004ee6 <MainLCDDisplayMode+0x656>
 8004ee0:	4b9a      	ldr	r3, [pc, #616]	; (800514c <MainLCDDisplayMode+0x8bc>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
				 //else if(nBarColor == 3)  nBarColor = 0;

				 //TFT_fillRectangle(10,220,310,10,TFT_RGB(0,0,0));

			 }
			 if(time.seconds == 0 )
 8004ee6:	4b9a      	ldr	r3, [pc, #616]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d11e      	bne.n	8004f2c <MainLCDDisplayMode+0x69c>
			 {
				 int x_s = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
				 int x_e = 60;
 8004ef2:	233c      	movs	r3, #60	; 0x3c
 8004ef4:	65bb      	str	r3, [r7, #88]	; 0x58
				 int x_p_s = 20+(x_s*4);
 8004ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef8:	3305      	adds	r3, #5
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	657b      	str	r3, [r7, #84]	; 0x54
				 int x_p_e = 20+(x_e*4);
 8004efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f00:	3305      	adds	r3, #5
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	653b      	str	r3, [r7, #80]	; 0x50
				 int y_p = (240/2) - 20; //13
 8004f06:	2364      	movs	r3, #100	; 0x64
 8004f08:	64fb      	str	r3, [r7, #76]	; 0x4c

				 //Clear Whole 60sec Bar of progress
				 TFT_fillRectangle(
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	b298      	uxth	r0, r3
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f10:	b299      	uxth	r1, r3
						 x_p_s,/*x*/
						 y_p, //(240/2) - 5 - 1,//221,/*y*/
						 x_p_e-x_p_s+50,/*width*/
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b29b      	uxth	r3, r3
				 TFT_fillRectangle(
 8004f1e:	3332      	adds	r3, #50	; 0x32
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	230f      	movs	r3, #15
 8004f28:	f7fe fde6 	bl	8003af8 <TFT_fillRectangle>
						 TFT_RGB(0,0,0));  /* color */
			 }

			 //TFT_print(30,100, cLogData);

			 TFT_setFontSize(2);
 8004f2c:	2002      	movs	r0, #2
 8004f2e:	f7ff f9f1 	bl	8004314 <TFT_setFontSize>
			 // sprintf(cLogData, "%02d", time.seconds);
			 //TFT_print(250,135, cLogData);

			 int R = 0;// (int)4*nSecondOld;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			 int G = 0; // (int)4*nSecondOld;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			 int B = 0; // (int)4*nSecondOld;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			 int RB,GB,BB;

			 if( nSecondOld != time.seconds)// && time.seconds != 0)
 8004f44:	4b82      	ldr	r3, [pc, #520]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b82      	ldr	r3, [pc, #520]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	f000 8113 	beq.w	800517a <MainLCDDisplayMode+0x8ea>
			 {
				 nFlicker = !nFlicker;
 8004f54:	4b80      	ldr	r3, [pc, #512]	; (8005158 <MainLCDDisplayMode+0x8c8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b7c      	ldr	r3, [pc, #496]	; (8005158 <MainLCDDisplayMode+0x8c8>)
 8004f66:	601a      	str	r2, [r3, #0]

				 if(1)//nFlicker == 1)
					 sprintf(cLogData, ":");
 8004f68:	497c      	ldr	r1, [pc, #496]	; (800515c <MainLCDDisplayMode+0x8cc>)
 8004f6a:	487d      	ldr	r0, [pc, #500]	; (8005160 <MainLCDDisplayMode+0x8d0>)
 8004f6c:	f007 f9b8 	bl	800c2e0 <siprintf>
					 sprintf(cLogData, " ");

				 //LCD_DrawText(cLogData, FONT9, 120, 115, TFT_COLOR_White, TFT_COLOR_Black);

				 //nSecondOld = time.seconds;
				 TFT_setFontSize(8);
 8004f70:	2008      	movs	r0, #8
 8004f72:	f7ff f9cf 	bl	8004314 <TFT_setFontSize>
				 //sprintf(cLogData, "%02d ", time.seconds);
				 //LCD_DrawText(cLogData, FONT9, 50, 150, TFT_COLOR_White, TFT_COLOR_Black);
				 //draw_string("H", 100, 160, FONT3, 54, 64, 32, 127, 0, 0, 1);

				 //
				 sprintf(cLogData, "|");
 8004f76:	497b      	ldr	r1, [pc, #492]	; (8005164 <MainLCDDisplayMode+0x8d4>)
 8004f78:	4879      	ldr	r0, [pc, #484]	; (8005160 <MainLCDDisplayMode+0x8d0>)
 8004f7a:	f007 f9b1 	bl	800c2e0 <siprintf>

				 //if(time.seconds == -1) nSecondOld = 0;
				 if(time.seconds == 0) nSecondOld = 0;
 8004f7e:	4b74      	ldr	r3, [pc, #464]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <MainLCDDisplayMode+0x6fc>
 8004f86:	4b73      	ldr	r3, [pc, #460]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
					 R = (int)4*nSecondOld;
					 G =  (int)4*nSecondOld;
					 B =  (int)4*nSecondOld;
				 }

				 if(nBarColor == 1)
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	; (800514c <MainLCDDisplayMode+0x8bc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d111      	bne.n	8004fb8 <MainLCDDisplayMode+0x728>
				 {
					 R = (int)4*nSecondOld;
 8004f94:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					 G = 0; // (int)4*nSecondOld;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					 B = 0; // (int)4*nSecondOld;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					 if(time.seconds == 1)  R = 250;
 8004faa:	4b69      	ldr	r3, [pc, #420]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <MainLCDDisplayMode+0x728>
 8004fb2:	23fa      	movs	r3, #250	; 0xfa
 8004fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				 }

				 if(nBarColor == 2)
 8004fb8:	4b64      	ldr	r3, [pc, #400]	; (800514c <MainLCDDisplayMode+0x8bc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d111      	bne.n	8004fe4 <MainLCDDisplayMode+0x754>
				 {
					 R = 0;//(int)4*nSecondOld;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					 G = (int)4*nSecondOld;
 8004fc6:	4b63      	ldr	r3, [pc, #396]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					 B = 0; // (int)4*nSecondOld;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					 if(time.seconds == 1) G = 250;
 8004fd6:	4b5e      	ldr	r3, [pc, #376]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d102      	bne.n	8004fe4 <MainLCDDisplayMode+0x754>
 8004fde:	23fa      	movs	r3, #250	; 0xfa
 8004fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				 }
				 if(nBarColor == 3)
 8004fe4:	4b59      	ldr	r3, [pc, #356]	; (800514c <MainLCDDisplayMode+0x8bc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d111      	bne.n	8005010 <MainLCDDisplayMode+0x780>
				 {
					 R = 0;//(int)4*nSecondOld;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					 G = 0;//(int)4*nSecondOld;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					 B =  (int)4*nSecondOld;
 8004ff8:	4b56      	ldr	r3, [pc, #344]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					 if(time.seconds == 1) B = 250;
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d102      	bne.n	8005010 <MainLCDDisplayMode+0x780>
 800500a:	23fa      	movs	r3, #250	; 0xfa
 800500c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				 }
				 if(time.seconds == 1 )
 8005010:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <MainLCDDisplayMode+0x78c>
				 {

					 //R = 250;
					 //G = 250;
					 //B = 250;
					 int hold = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	64bb      	str	r3, [r7, #72]	; 0x48
				 }

				 int color = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	647b      	str	r3, [r7, #68]	; 0x44
				 if(time.seconds != 0 )
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <MainLCDDisplayMode+0x7b6>
				 {
					 color = nSecondOld%7;
 8005028:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <MainLCDDisplayMode+0x8d8>)
 800502e:	fb83 1302 	smull	r1, r3, r3, r2
 8005032:	4413      	add	r3, r2
 8005034:	1099      	asrs	r1, r3, #2
 8005036:	17d3      	asrs	r3, r2, #31
 8005038:	1ac9      	subs	r1, r1, r3
 800503a:	460b      	mov	r3, r1
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	1a5b      	subs	r3, r3, r1
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	e001      	b.n	800504a <MainLCDDisplayMode+0x7ba>
				 }
				 else
				 {
					 color = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
				 }
				 //void TFT_drawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, uint16_t color)
				 //TFT_fillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {


				 if( time.seconds != 0) //nSecondOld != 0)
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <MainLCDDisplayMode+0x804>
				 {
					 if(R != 0 )RB = 250;
 8005052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <MainLCDDisplayMode+0x7d2>
 800505a:	23fa      	movs	r3, #250	; 0xfa
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005060:	e002      	b.n	8005068 <MainLCDDisplayMode+0x7d8>
					 else RB = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

					 if(G != 0 )GB = 250;
 8005068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <MainLCDDisplayMode+0x7e8>
 8005070:	23fa      	movs	r3, #250	; 0xfa
 8005072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005076:	e002      	b.n	800507e <MainLCDDisplayMode+0x7ee>
					 else GB = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					 if(B != 0 )BB = 250;
 800507e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <MainLCDDisplayMode+0x7fe>
 8005086:	23fa      	movs	r3, #250	; 0xfa
 8005088:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800508c:	e002      	b.n	8005094 <MainLCDDisplayMode+0x804>
					 else BB = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
							 65,/*height */
							 TFT_RGB(R,G,B));  /* color */

				 }

				 if( time.seconds != 0)
 8005094:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d04f      	beq.n	800513c <MainLCDDisplayMode+0x8ac>
				 {

					 ////////////////////////////////
					 //// 60sec bar
					 ////////////////////////////////
					 int x_p = 20+(time.seconds*4);
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	3305      	adds	r3, #5
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	643b      	str	r3, [r7, #64]	; 0x40
					 int y_p = (240/2) - 13;
 80050a6:	236b      	movs	r3, #107	; 0x6b
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c

					 if(time.seconds != 1)
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d01b      	beq.n	80050ea <MainLCDDisplayMode+0x85a>
					 {
						 TFT_fillRectangle(
 80050b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b4:	b298      	uxth	r0, r3
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	b299      	uxth	r1, r3
							 x_p,/*x*/
							 y_p,//221,/*y*/
							 15,/*width*/
							 8,//65,/*height */
							 TFT_RGB(R,G,B));  /* color */
 80050ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050be:	10db      	asrs	r3, r3, #3
 80050c0:	b21a      	sxth	r2, r3
 80050c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050c6:	109b      	asrs	r3, r3, #2
 80050c8:	015b      	lsls	r3, r3, #5
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b21a      	sxth	r2, r3
 80050d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050d4:	10db      	asrs	r3, r3, #3
 80050d6:	02db      	lsls	r3, r3, #11
 80050d8:	b21b      	sxth	r3, r3
 80050da:	4313      	orrs	r3, r2
 80050dc:	b21b      	sxth	r3, r3
						 TFT_fillRectangle(
 80050de:	b29b      	uxth	r3, r3
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2308      	movs	r3, #8
 80050e4:	220f      	movs	r2, #15
 80050e6:	f7fe fd07 	bl	8003af8 <TFT_fillRectangle>
					 }
					 //LCD_DrawText(cLogData, FONT6, 0+(nSecondOld*5), 190, TFT_RGB(R,G,B) , TFT_COLOR_Black);
					 TFT_setFontSize(2);
 80050ea:	2002      	movs	r0, #2
 80050ec:	f7ff f912 	bl	8004314 <TFT_setFontSize>
					 int nColor = TFT_RGB(RB,GB,BB);
 80050f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050f4:	10da      	asrs	r2, r3, #3
 80050f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050fa:	109b      	asrs	r3, r3, #2
 80050fc:	015b      	lsls	r3, r3, #5
 80050fe:	431a      	orrs	r2, r3
 8005100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005104:	10db      	asrs	r3, r3, #3
 8005106:	02db      	lsls	r3, r3, #11
 8005108:	4313      	orrs	r3, r2
 800510a:	63bb      	str	r3, [r7, #56]	; 0x38
					 TFT_setColor(nColor);
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	b29b      	uxth	r3, r3
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fb21 	bl	8003758 <TFT_setColor>
					 sprintf(cLogData, " %02d", time.seconds);
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	4913      	ldr	r1, [pc, #76]	; (800516c <MainLCDDisplayMode+0x8dc>)
 800511e:	4810      	ldr	r0, [pc, #64]	; (8005160 <MainLCDDisplayMode+0x8d0>)
 8005120:	f007 f8de 	bl	800c2e0 <siprintf>
					 TFT_print(x_p + 15, y_p - 6, cLogData);
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	b29b      	uxth	r3, r3
 8005128:	330f      	adds	r3, #15
 800512a:	b298      	uxth	r0, r3
 800512c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3b06      	subs	r3, #6
 8005132:	b2db      	uxtb	r3, r3
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <MainLCDDisplayMode+0x8d0>)
 8005136:	4619      	mov	r1, r3
 8005138:	f7ff f8c0 	bl	80042bc <TFT_print>
					// LCD_DrawText(cLogData, FONT6, x_p + 5, y_p, TFT_COLOR_Silver, TFT_COLOR_none);

				 }

				 if(time.seconds == 0)
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <MainLCDDisplayMode+0x8c0>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d115      	bne.n	8005170 <MainLCDDisplayMode+0x8e0>
				 {
					 nSecondOld = 0; //
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <MainLCDDisplayMode+0x8c4>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e016      	b.n	800517a <MainLCDDisplayMode+0x8ea>
 800514c:	2000002c 	.word	0x2000002c
 8005150:	2000095c 	.word	0x2000095c
 8005154:	20000028 	.word	0x20000028
 8005158:	20000398 	.word	0x20000398
 800515c:	0800e8e8 	.word	0x0800e8e8
 8005160:	20000a74 	.word	0x20000a74
 8005164:	0800e8f4 	.word	0x0800e8f4
 8005168:	92492493 	.word	0x92492493
 800516c:	0800e8f8 	.word	0x0800e8f8
				 }
				 else
				 {
					 nSecondOld = time.seconds;
 8005170:	4bae      	ldr	r3, [pc, #696]	; (800542c <MainLCDDisplayMode+0xb9c>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	4bae      	ldr	r3, [pc, #696]	; (8005430 <MainLCDDisplayMode+0xba0>)
 8005178:	601a      	str	r2, [r3, #0]
				 }
			 }

			  TFT_setFontSize(2);
 800517a:	2002      	movs	r0, #2
 800517c:	f7ff f8ca 	bl	8004314 <TFT_setFontSize>

			  int nTemp;

			  nTemp = (int)HDC1080_Temp;
 8005180:	4bac      	ldr	r3, [pc, #688]	; (8005434 <MainLCDDisplayMode+0xba4>)
 8005182:	edd3 7a00 	vldr	s15, [r3]
 8005186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800518a:	ee17 3a90 	vmov	r3, s15
 800518e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			  if(nTemp != HDC1080_Temp_Old)
 8005192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800519e:	4ba6      	ldr	r3, [pc, #664]	; (8005438 <MainLCDDisplayMode+0xba8>)
 80051a0:	edd3 7a00 	vldr	s15, [r3]
 80051a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80051a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ac:	d058      	beq.n	8005260 <MainLCDDisplayMode+0x9d0>
			  {
				  nRedraw_Temp_Label = 1;
 80051ae:	4ba3      	ldr	r3, [pc, #652]	; (800543c <MainLCDDisplayMode+0xbac>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

				  if(nTemp<0 )nTemp = 0;
 80051b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da02      	bge.n	80051c2 <MainLCDDisplayMode+0x932>
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				  HDC1080_Temp_Old = nTemp;
 80051c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ce:	4b9a      	ldr	r3, [pc, #616]	; (8005438 <MainLCDDisplayMode+0xba8>)
 80051d0:	edc3 7a00 	vstr	s15, [r3]
				  sprintf(cLogData, "%2d", nTemp);
 80051d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80051d8:	4999      	ldr	r1, [pc, #612]	; (8005440 <MainLCDDisplayMode+0xbb0>)
 80051da:	489a      	ldr	r0, [pc, #616]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 80051dc:	f007 f880 	bl	800c2e0 <siprintf>

				  if(nTemp >= 20 && nTemp <= 26  )
 80051e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e4:	2b13      	cmp	r3, #19
 80051e6:	dd0e      	ble.n	8005206 <MainLCDDisplayMode+0x976>
 80051e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ec:	2b1a      	cmp	r3, #26
 80051ee:	dc0a      	bgt.n	8005206 <MainLCDDisplayMode+0x976>
					  LCD_DrawText(cLogData, FONT9, 38, 155, TFT_COLOR_Green_Light, TFT_COLOR_none);
 80051f0:	2301      	movs	r3, #1
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	239b      	movs	r3, #155	; 0x9b
 80051fc:	2226      	movs	r2, #38	; 0x26
 80051fe:	4992      	ldr	r1, [pc, #584]	; (8005448 <MainLCDDisplayMode+0xbb8>)
 8005200:	4890      	ldr	r0, [pc, #576]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005202:	f7ff f98f 	bl	8004524 <LCD_DrawText>
				  if(nTemp > 26)
 8005206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800520a:	2b1a      	cmp	r3, #26
 800520c:	dd0a      	ble.n	8005224 <MainLCDDisplayMode+0x994>
				  	  LCD_DrawText(cLogData, FONT9, 38, 155, TFT_COLOR_Red, TFT_COLOR_none);
 800520e:	2301      	movs	r3, #1
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	239b      	movs	r3, #155	; 0x9b
 800521a:	2226      	movs	r2, #38	; 0x26
 800521c:	498a      	ldr	r1, [pc, #552]	; (8005448 <MainLCDDisplayMode+0xbb8>)
 800521e:	4889      	ldr	r0, [pc, #548]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005220:	f7ff f980 	bl	8004524 <LCD_DrawText>
				  if(nTemp < 20)
 8005224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005228:	2b13      	cmp	r3, #19
 800522a:	dc09      	bgt.n	8005240 <MainLCDDisplayMode+0x9b0>
				  	   LCD_DrawText(cLogData, FONT9, 38, 155, TFT_COLOR_Blue, TFT_COLOR_none);
 800522c:	2301      	movs	r3, #1
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	231f      	movs	r3, #31
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	239b      	movs	r3, #155	; 0x9b
 8005236:	2226      	movs	r2, #38	; 0x26
 8005238:	4983      	ldr	r1, [pc, #524]	; (8005448 <MainLCDDisplayMode+0xbb8>)
 800523a:	4882      	ldr	r0, [pc, #520]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 800523c:	f7ff f972 	bl	8004524 <LCD_DrawText>

				  sprintf(cLogData, "C");
 8005240:	4982      	ldr	r1, [pc, #520]	; (800544c <MainLCDDisplayMode+0xbbc>)
 8005242:	4880      	ldr	r0, [pc, #512]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005244:	f007 f84c 	bl	800c2e0 <siprintf>
				  LCD_DrawText(cLogData, FONT6, 123, 175, TFT_COLOR_Silver, TFT_COLOR_none);
 8005248:	2301      	movs	r3, #1
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	23af      	movs	r3, #175	; 0xaf
 8005254:	227b      	movs	r2, #123	; 0x7b
 8005256:	497e      	ldr	r1, [pc, #504]	; (8005450 <MainLCDDisplayMode+0xbc0>)
 8005258:	487a      	ldr	r0, [pc, #488]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 800525a:	f7ff f963 	bl	8004524 <LCD_DrawText>
 800525e:	e002      	b.n	8005266 <MainLCDDisplayMode+0x9d6>

			  }else nRedraw_Temp_Label = 0;
 8005260:	4b76      	ldr	r3, [pc, #472]	; (800543c <MainLCDDisplayMode+0xbac>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

			  //TFT_setTextBackColor(TFT_COLOR_Gray);
			  //TFT_print(100,160, "T"); //TFT_print(10,30, "Temp:");


			  TFT_setColor(TFT_COLOR_Green_Light);
 8005266:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800526a:	f7fe fa75 	bl	8003758 <TFT_setColor>
			  TFT_setTextBackColor(TFT_COLOR_Black);
 800526e:	2000      	movs	r0, #0
 8005270:	f7ff f8b0 	bl	80043d4 <TFT_setTextBackColor>
			  //TFT_print(62,190, cLogData);

			  TFT_setColor(TFT_COLOR_Silver);
 8005274:	f24c 6018 	movw	r0, #50712	; 0xc618
 8005278:	f7fe fa6e 	bl	8003758 <TFT_setColor>
			  sprintf(cLogData, "/");
 800527c:	4975      	ldr	r1, [pc, #468]	; (8005454 <MainLCDDisplayMode+0xbc4>)
 800527e:	4871      	ldr	r0, [pc, #452]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005280:	f007 f82e 	bl	800c2e0 <siprintf>
			  TFT_setTextBackColor(TFT_COLOR_Black);
 8005284:	2000      	movs	r0, #0
 8005286:	f7ff f8a5 	bl	80043d4 <TFT_setTextBackColor>
			  //TFT_print(145,190, cLogData);
			 // TFT_print(100,160, "H:");//TFT_print(10,60, "Humi:");


			  TFT_setColor(TFT_COLOR_Aqua);
 800528a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800528e:	f7fe fa63 	bl	8003758 <TFT_setColor>
			  int n_humi = (int)HDC1080_Humi;
 8005292:	4b71      	ldr	r3, [pc, #452]	; (8005458 <MainLCDDisplayMode+0xbc8>)
 8005294:	edd3 7a00 	vldr	s15, [r3]
 8005298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800529c:	ee17 3a90 	vmov	r3, s15
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34

			  if(n_humi != (int)HDC1080_Humi_Old)
 80052a2:	4b6e      	ldr	r3, [pc, #440]	; (800545c <MainLCDDisplayMode+0xbcc>)
 80052a4:	edd3 7a00 	vldr	s15, [r3]
 80052a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ac:	ee17 2a90 	vmov	r2, s15
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d052      	beq.n	800535c <MainLCDDisplayMode+0xacc>
			  {
				  nRedraw_Humi_Label = 1;
 80052b6:	4b6a      	ldr	r3, [pc, #424]	; (8005460 <MainLCDDisplayMode+0xbd0>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
				  HDC1080_Humi_Old = n_humi;
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c6:	4b65      	ldr	r3, [pc, #404]	; (800545c <MainLCDDisplayMode+0xbcc>)
 80052c8:	edc3 7a00 	vstr	s15, [r3]
				  sprintf(cLogData, "%2d", (int)HDC1080_Humi);
 80052cc:	4b62      	ldr	r3, [pc, #392]	; (8005458 <MainLCDDisplayMode+0xbc8>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052d6:	ee17 2a90 	vmov	r2, s15
 80052da:	4959      	ldr	r1, [pc, #356]	; (8005440 <MainLCDDisplayMode+0xbb0>)
 80052dc:	4859      	ldr	r0, [pc, #356]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 80052de:	f006 ffff 	bl	800c2e0 <siprintf>

				  if(n_humi >= 30 && n_humi <= 70  )
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	2b1d      	cmp	r3, #29
 80052e6:	dd0d      	ble.n	8005304 <MainLCDDisplayMode+0xa74>
 80052e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ea:	2b46      	cmp	r3, #70	; 0x46
 80052ec:	dc0a      	bgt.n	8005304 <MainLCDDisplayMode+0xa74>
					  LCD_DrawText(cLogData, FONT9, 190, 155, TFT_COLOR_Green_Light, TFT_COLOR_none);
 80052ee:	2301      	movs	r3, #1
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	239b      	movs	r3, #155	; 0x9b
 80052fa:	22be      	movs	r2, #190	; 0xbe
 80052fc:	4952      	ldr	r1, [pc, #328]	; (8005448 <MainLCDDisplayMode+0xbb8>)
 80052fe:	4851      	ldr	r0, [pc, #324]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005300:	f7ff f910 	bl	8004524 <LCD_DrawText>
				  if (n_humi > 70)
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	2b46      	cmp	r3, #70	; 0x46
 8005308:	dd0a      	ble.n	8005320 <MainLCDDisplayMode+0xa90>
				  	  LCD_DrawText(cLogData, FONT9, 190, 155, TFT_COLOR_Red, TFT_COLOR_none);
 800530a:	2301      	movs	r3, #1
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	239b      	movs	r3, #155	; 0x9b
 8005316:	22be      	movs	r2, #190	; 0xbe
 8005318:	494b      	ldr	r1, [pc, #300]	; (8005448 <MainLCDDisplayMode+0xbb8>)
 800531a:	484a      	ldr	r0, [pc, #296]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 800531c:	f7ff f902 	bl	8004524 <LCD_DrawText>
				  if (n_humi < 30)
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	2b1d      	cmp	r3, #29
 8005324:	dc09      	bgt.n	800533a <MainLCDDisplayMode+0xaaa>
				  	 LCD_DrawText(cLogData, FONT9, 190, 155, TFT_COLOR_Blue, TFT_COLOR_none);
 8005326:	2301      	movs	r3, #1
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	231f      	movs	r3, #31
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	239b      	movs	r3, #155	; 0x9b
 8005330:	22be      	movs	r2, #190	; 0xbe
 8005332:	4945      	ldr	r1, [pc, #276]	; (8005448 <MainLCDDisplayMode+0xbb8>)
 8005334:	4843      	ldr	r0, [pc, #268]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005336:	f7ff f8f5 	bl	8004524 <LCD_DrawText>

				  sprintf(cLogData, "%%");
 800533a:	494a      	ldr	r1, [pc, #296]	; (8005464 <MainLCDDisplayMode+0xbd4>)
 800533c:	4841      	ldr	r0, [pc, #260]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 800533e:	f006 ffcf 	bl	800c2e0 <siprintf>
				  LCD_DrawText(cLogData, FONT6, 275, 175, TFT_COLOR_Silver, TFT_COLOR_none);
 8005342:	2301      	movs	r3, #1
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	f24c 6318 	movw	r3, #50712	; 0xc618
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	23af      	movs	r3, #175	; 0xaf
 800534e:	f240 1213 	movw	r2, #275	; 0x113
 8005352:	493f      	ldr	r1, [pc, #252]	; (8005450 <MainLCDDisplayMode+0xbc0>)
 8005354:	483b      	ldr	r0, [pc, #236]	; (8005444 <MainLCDDisplayMode+0xbb4>)
 8005356:	f7ff f8e5 	bl	8004524 <LCD_DrawText>
 800535a:	e002      	b.n	8005362 <MainLCDDisplayMode+0xad2>
			  }
			  else nRedraw_Humi_Label = 0;
 800535c:	4b40      	ldr	r3, [pc, #256]	; (8005460 <MainLCDDisplayMode+0xbd0>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

			  TFT_setTextBackColor(TFT_COLOR_Gray);
 8005362:	f246 300c 	movw	r0, #25356	; 0x630c
 8005366:	f7ff f835 	bl	80043d4 <TFT_setTextBackColor>
			 // TFT_print(100,160, "H:");//TFT_print(10,60, "Humi:");

			  TFT_setColor(TFT_COLOR_Aqua);
 800536a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800536e:	f7fe f9f3 	bl	8003758 <TFT_setColor>
			  TFT_setTextBackColor(TFT_COLOR_Black);
 8005372:	2000      	movs	r0, #0
 8005374:	f7ff f82e 	bl	80043d4 <TFT_setTextBackColor>
			  //TFT_print(165,190, cLogData);

			  int offset = 5;
 8005378:	2305      	movs	r3, #5
 800537a:	633b      	str	r3, [r7, #48]	; 0x30

			  //  T
			  //TFT_drawLine((320-offset)/2, 240/2, (320-offset)/2, (240-2), 1, TFT_COLOR_Silver);

			  //[  ] up
			  TFT_drawRoundRect(offset, offset, 320-offset, (240/2)-offset, 9/*corner round*/, 3, TFT_COLOR_Silver);
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	b298      	uxth	r0, r3
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	b299      	uxth	r1, r3
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	b29b      	uxth	r3, r3
 8005388:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800538c:	b29a      	uxth	r2, r3
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	b29b      	uxth	r3, r3
 8005392:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005396:	b29b      	uxth	r3, r3
 8005398:	f24c 6418 	movw	r4, #50712	; 0xc618
 800539c:	9402      	str	r4, [sp, #8]
 800539e:	2403      	movs	r4, #3
 80053a0:	9401      	str	r4, [sp, #4]
 80053a2:	2409      	movs	r4, #9
 80053a4:	9400      	str	r4, [sp, #0]
 80053a6:	f7fe fced 	bl	8003d84 <TFT_drawRoundRect>
			  //TFT_drawRoundRect(offset, offset, 320-offset, 240-offset, 10/*corner round*/, 1, TFT_COLOR_Silver);



			  //-------------------------------------------------------------------------------------
			  if(nRedraw_Temp_Label == 1)
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <MainLCDDisplayMode+0xbac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	f040 80e5 	bne.w	800557e <MainLCDDisplayMode+0xcee>
			  {
				  //temp - axies
				  TFT_drawLine(12, 125, 12, 170, 3, TFT_RGB(200,20,20));
 80053b4:	f64c 03a2 	movw	r3, #51362	; 0xc8a2
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	2303      	movs	r3, #3
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	23aa      	movs	r3, #170	; 0xaa
 80053c0:	220c      	movs	r2, #12
 80053c2:	217d      	movs	r1, #125	; 0x7d
 80053c4:	200c      	movs	r0, #12
 80053c6:	f7fe fa27 	bl	8003818 <TFT_drawLine>
				  TFT_drawLine(12, 170, 12, 200, 3, TFT_COLOR_Green_Light1);//20~26
 80053ca:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	2303      	movs	r3, #3
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	23c8      	movs	r3, #200	; 0xc8
 80053d6:	220c      	movs	r2, #12
 80053d8:	21aa      	movs	r1, #170	; 0xaa
 80053da:	200c      	movs	r0, #12
 80053dc:	f7fe fa1c 	bl	8003818 <TFT_drawLine>
				  TFT_drawLine(12, 200, 12, 225, 3, TFT_RGB(20,20,200)); //
 80053e0:	f241 03b9 	movw	r3, #4281	; 0x10b9
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2303      	movs	r3, #3
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	23e1      	movs	r3, #225	; 0xe1
 80053ec:	220c      	movs	r2, #12
 80053ee:	21c8      	movs	r1, #200	; 0xc8
 80053f0:	200c      	movs	r0, #12
 80053f2:	f7fe fa11 	bl	8003818 <TFT_drawLine>

				  int temp_y = (int)HDC1080_Temp;
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <MainLCDDisplayMode+0xba4>)
 80053f8:	edd3 7a00 	vldr	s15, [r3]
 80053fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005400:	ee17 3a90 	vmov	r3, s15
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
				  //int temp_y_old = (int)HDC1080_Temp_Old;

				  int nToValueBar =0;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				  if(temp_y >= 20) nToValueBar= (200) - ((temp_y - 20) * 5);
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	2b13      	cmp	r3, #19
 8005410:	dd2a      	ble.n	8005468 <MainLCDDisplayMode+0xbd8>
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	f1a3 0214 	sub.w	r2, r3, #20
 8005418:	4613      	mov	r3, r2
 800541a:	079b      	lsls	r3, r3, #30
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	33c8      	adds	r3, #200	; 0xc8
 8005424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005428:	e027      	b.n	800547a <MainLCDDisplayMode+0xbea>
 800542a:	bf00      	nop
 800542c:	2000095c 	.word	0x2000095c
 8005430:	20000028 	.word	0x20000028
 8005434:	20000a70 	.word	0x20000a70
 8005438:	20000b44 	.word	0x20000b44
 800543c:	200003a4 	.word	0x200003a4
 8005440:	0800e900 	.word	0x0800e900
 8005444:	20000a74 	.word	0x20000a74
 8005448:	0801380c 	.word	0x0801380c
 800544c:	0800e8b8 	.word	0x0800e8b8
 8005450:	0800ec44 	.word	0x0800ec44
 8005454:	0800e904 	.word	0x0800e904
 8005458:	20000b3c 	.word	0x20000b3c
 800545c:	20000b40 	.word	0x20000b40
 8005460:	200003a8 	.word	0x200003a8
 8005464:	0800e8c4 	.word	0x0800e8c4
				  else nToValueBar= (200) + ((20 - temp_y) * 5);
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	f1c3 0214 	rsb	r2, r3, #20
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	33c8      	adds	r3, #200	; 0xc8
 8005476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				  if(nToValueBar < 125 ) nToValueBar = 125;//min
 800547a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800547e:	2b7c      	cmp	r3, #124	; 0x7c
 8005480:	dc02      	bgt.n	8005488 <MainLCDDisplayMode+0xbf8>
 8005482:	237d      	movs	r3, #125	; 0x7d
 8005484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				  if(nToValueBar > 225 ) nToValueBar = 225;//max
 8005488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800548c:	2be1      	cmp	r3, #225	; 0xe1
 800548e:	dd02      	ble.n	8005496 <MainLCDDisplayMode+0xc06>
 8005490:	23e1      	movs	r3, #225	; 0xe1
 8005492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				  //clear old line
				  TFT_fillRectangle(17,121,20,113,TFT_COLOR_Black);
 8005496:	2300      	movs	r3, #0
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2371      	movs	r3, #113	; 0x71
 800549c:	2214      	movs	r2, #20
 800549e:	2179      	movs	r1, #121	; 0x79
 80054a0:	2011      	movs	r0, #17
 80054a2:	f7fe fb29 	bl	8003af8 <TFT_fillRectangle>
				  //TFT_drawLine(10, 225-temp_y_old, 10+10, 225-temp_y_old, 1, TFT_COLOR_none);

				  //label axis 15
				  TFT_setCursor(16,122);
 80054a6:	217a      	movs	r1, #122	; 0x7a
 80054a8:	2010      	movs	r0, #16
 80054aa:	f7fe f965 	bl	8003778 <TFT_setCursor>
				  //TFT_drawImage(23,15, IMG_num_35);
				  //label axis 35
				  TFT_setCursor(16,216);
 80054ae:	21d8      	movs	r1, #216	; 0xd8
 80054b0:	2010      	movs	r0, #16
 80054b2:	f7fe f961 	bl	8003778 <TFT_setCursor>
				 // TFT_drawImage(23,15, IMG_num_15);

				  TFT_drawTriangle(17, nToValueBar, 17+10,nToValueBar+5, 17+10,nToValueBar-5,2,TFT_COLOR_White);
 80054b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054ba:	b299      	uxth	r1, r3
 80054bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3305      	adds	r3, #5
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b05      	subs	r3, #5
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054d4:	9003      	str	r0, [sp, #12]
 80054d6:	2002      	movs	r0, #2
 80054d8:	9002      	str	r0, [sp, #8]
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	231b      	movs	r3, #27
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	221b      	movs	r2, #27
 80054e4:	2011      	movs	r0, #17
 80054e6:	f7fe facf 	bl	8003a88 <TFT_drawTriangle>
				  //TFT_drawLine(14, nToValueBar, 10+10, nToValueBar, 1, TFT_COLOR_White);

				  TFT_setFontSize(1);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fe ff12 	bl	8004314 <TFT_setFontSize>
				 if(temp_max < temp_y)
 80054f0:	4baf      	ldr	r3, [pc, #700]	; (80057b0 <MainLCDDisplayMode+0xf20>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	dd02      	ble.n	8005500 <MainLCDDisplayMode+0xc70>
					 temp_max = temp_y;
 80054fa:	4aad      	ldr	r2, [pc, #692]	; (80057b0 <MainLCDDisplayMode+0xf20>)
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	6013      	str	r3, [r2, #0]
				 if(temp_min > temp_y)
 8005500:	4bac      	ldr	r3, [pc, #688]	; (80057b4 <MainLCDDisplayMode+0xf24>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005506:	429a      	cmp	r2, r3
 8005508:	da02      	bge.n	8005510 <MainLCDDisplayMode+0xc80>
					 temp_min = temp_y;
 800550a:	4aaa      	ldr	r2, [pc, #680]	; (80057b4 <MainLCDDisplayMode+0xf24>)
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	6013      	str	r3, [r2, #0]

				 if( nRedraw_Temp_Label == 1)
 8005510:	4ba9      	ldr	r3, [pc, #676]	; (80057b8 <MainLCDDisplayMode+0xf28>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d132      	bne.n	800557e <MainLCDDisplayMode+0xcee>
				 {
					 sprintf(cLogData, "Min:");
 8005518:	49a8      	ldr	r1, [pc, #672]	; (80057bc <MainLCDDisplayMode+0xf2c>)
 800551a:	48a9      	ldr	r0, [pc, #676]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 800551c:	f006 fee0 	bl	800c2e0 <siprintf>
					 TFT_print(38,225, cLogData);
 8005520:	4aa7      	ldr	r2, [pc, #668]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005522:	21e1      	movs	r1, #225	; 0xe1
 8005524:	2026      	movs	r0, #38	; 0x26
 8005526:	f7fe fec9 	bl	80042bc <TFT_print>

					 TFT_setFontSize(2);
 800552a:	2002      	movs	r0, #2
 800552c:	f7fe fef2 	bl	8004314 <TFT_setFontSize>
					 sprintf(cLogData, "%d", temp_min);
 8005530:	4ba0      	ldr	r3, [pc, #640]	; (80057b4 <MainLCDDisplayMode+0xf24>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	49a3      	ldr	r1, [pc, #652]	; (80057c4 <MainLCDDisplayMode+0xf34>)
 8005538:	48a1      	ldr	r0, [pc, #644]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 800553a:	f006 fed1 	bl	800c2e0 <siprintf>
					 TFT_print(65,220, cLogData);
 800553e:	4aa0      	ldr	r2, [pc, #640]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005540:	21dc      	movs	r1, #220	; 0xdc
 8005542:	2041      	movs	r0, #65	; 0x41
 8005544:	f7fe feba 	bl	80042bc <TFT_print>

					 TFT_setFontSize(1);
 8005548:	2001      	movs	r0, #1
 800554a:	f7fe fee3 	bl	8004314 <TFT_setFontSize>
					 sprintf(cLogData, "Max:");
 800554e:	499e      	ldr	r1, [pc, #632]	; (80057c8 <MainLCDDisplayMode+0xf38>)
 8005550:	489b      	ldr	r0, [pc, #620]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005552:	f006 fec5 	bl	800c2e0 <siprintf>
					 TFT_print(95,225, cLogData);
 8005556:	4a9a      	ldr	r2, [pc, #616]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005558:	21e1      	movs	r1, #225	; 0xe1
 800555a:	205f      	movs	r0, #95	; 0x5f
 800555c:	f7fe feae 	bl	80042bc <TFT_print>

					 TFT_setFontSize(2);
 8005560:	2002      	movs	r0, #2
 8005562:	f7fe fed7 	bl	8004314 <TFT_setFontSize>
					 sprintf(cLogData, "%d", temp_max);
 8005566:	4b92      	ldr	r3, [pc, #584]	; (80057b0 <MainLCDDisplayMode+0xf20>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	4995      	ldr	r1, [pc, #596]	; (80057c4 <MainLCDDisplayMode+0xf34>)
 800556e:	4894      	ldr	r0, [pc, #592]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005570:	f006 feb6 	bl	800c2e0 <siprintf>
					 TFT_print(122,220, cLogData);
 8005574:	4a92      	ldr	r2, [pc, #584]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005576:	21dc      	movs	r1, #220	; 0xdc
 8005578:	207a      	movs	r0, #122	; 0x7a
 800557a:	f7fe fe9f 	bl	80042bc <TFT_print>

			  }

			  //-------------------------------------------------------------------------------------

			  if(nRedraw_Humi_Label == 1)
 800557e:	4b93      	ldr	r3, [pc, #588]	; (80057cc <MainLCDDisplayMode+0xf3c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	f040 80b2 	bne.w	80056ec <MainLCDDisplayMode+0xe5c>
			  {
				  //humi - axies
				  TFT_drawLine(164, 125, 164, 155, 3, TFT_RGB(200,20,20));
 8005588:	f64c 03a2 	movw	r3, #51362	; 0xc8a2
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	2303      	movs	r3, #3
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	239b      	movs	r3, #155	; 0x9b
 8005594:	22a4      	movs	r2, #164	; 0xa4
 8005596:	217d      	movs	r1, #125	; 0x7d
 8005598:	20a4      	movs	r0, #164	; 0xa4
 800559a:	f7fe f93d 	bl	8003818 <TFT_drawLine>
				  TFT_drawLine(164, 155, 164, 195, 3, TFT_COLOR_Green_Light1);	//30~70%
 800559e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	2303      	movs	r3, #3
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	23c3      	movs	r3, #195	; 0xc3
 80055aa:	22a4      	movs	r2, #164	; 0xa4
 80055ac:	219b      	movs	r1, #155	; 0x9b
 80055ae:	20a4      	movs	r0, #164	; 0xa4
 80055b0:	f7fe f932 	bl	8003818 <TFT_drawLine>
				  //TFT_drawLine(164, 175, 164, 195, 3, TFT_COLOR_Green_Light1);//
				  TFT_drawLine(164, 195, 164, 225, 3, TFT_RGB(20,20,200));//
 80055b4:	f241 03b9 	movw	r3, #4281	; 0x10b9
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	2303      	movs	r3, #3
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	23e1      	movs	r3, #225	; 0xe1
 80055c0:	22a4      	movs	r2, #164	; 0xa4
 80055c2:	21c3      	movs	r1, #195	; 0xc3
 80055c4:	20a4      	movs	r0, #164	; 0xa4
 80055c6:	f7fe f927 	bl	8003818 <TFT_drawLine>

				  int humi_y = (int)HDC1080_Humi;
 80055ca:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <MainLCDDisplayMode+0xf40>)
 80055cc:	edd3 7a00 	vldr	s15, [r3]
 80055d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d4:	ee17 3a90 	vmov	r3, s15
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
				  //int temp_y_old = (int)HDC1080_Temp_Old;

				  int nToValueBar2 =0;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24

				  nToValueBar2 = 225 - humi_y;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	f1c3 03e1 	rsb	r3, r3, #225	; 0xe1
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24

				  //clear old line
				  TFT_fillRectangle(167,121,20,113,TFT_COLOR_Black);
 80055e6:	2300      	movs	r3, #0
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2371      	movs	r3, #113	; 0x71
 80055ec:	2214      	movs	r2, #20
 80055ee:	2179      	movs	r1, #121	; 0x79
 80055f0:	20a7      	movs	r0, #167	; 0xa7
 80055f2:	f7fe fa81 	bl	8003af8 <TFT_fillRectangle>
				  //TFT_drawLine(10, 225-temp_y_old, 10+10, 225-temp_y_old, 1, TFT_COLOR_none);

				  //label axis 100
				  TFT_setCursor(168,122);
 80055f6:	217a      	movs	r1, #122	; 0x7a
 80055f8:	20a8      	movs	r0, #168	; 0xa8
 80055fa:	f7fe f8bd 	bl	8003778 <TFT_setCursor>
				 // TFT_drawImage(23,15, IMG_num_100);
				  //label axis 0
				  TFT_setCursor(168,216);
 80055fe:	21d8      	movs	r1, #216	; 0xd8
 8005600:	20a8      	movs	r0, #168	; 0xa8
 8005602:	f7fe f8b9 	bl	8003778 <TFT_setCursor>
				 // TFT_drawImage(23,15, IMG_num_0);

				  TFT_drawTriangle(168, nToValueBar2, 168+10,nToValueBar2+5, 168+10,nToValueBar2-5,2,TFT_COLOR_White);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	b299      	uxth	r1, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	b29b      	uxth	r3, r3
 800560e:	3305      	adds	r3, #5
 8005610:	b29a      	uxth	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b05      	subs	r3, #5
 8005618:	b29b      	uxth	r3, r3
 800561a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800561e:	9003      	str	r0, [sp, #12]
 8005620:	2002      	movs	r0, #2
 8005622:	9002      	str	r0, [sp, #8]
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	23b2      	movs	r3, #178	; 0xb2
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	22b2      	movs	r2, #178	; 0xb2
 800562e:	20a8      	movs	r0, #168	; 0xa8
 8005630:	f7fe fa2a 	bl	8003a88 <TFT_drawTriangle>
				  //TFT_drawLine(14, nToValueBar, 10+10, nToValueBar, 1, TFT_COLOR_White);

				  TFT_setFontSize(1);
 8005634:	2001      	movs	r0, #1
 8005636:	f7fe fe6d 	bl	8004314 <TFT_setFontSize>
				 if(humi_max < humi_y)
 800563a:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <MainLCDDisplayMode+0xf44>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005640:	429a      	cmp	r2, r3
 8005642:	dd02      	ble.n	800564a <MainLCDDisplayMode+0xdba>
					 humi_max = humi_y;
 8005644:	4a63      	ldr	r2, [pc, #396]	; (80057d4 <MainLCDDisplayMode+0xf44>)
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	6013      	str	r3, [r2, #0]
				 if(humi_min > humi_y)
 800564a:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <MainLCDDisplayMode+0xf48>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005650:	429a      	cmp	r2, r3
 8005652:	da02      	bge.n	800565a <MainLCDDisplayMode+0xdca>
					 humi_min = humi_y;
 8005654:	4a60      	ldr	r2, [pc, #384]	; (80057d8 <MainLCDDisplayMode+0xf48>)
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	6013      	str	r3, [r2, #0]

				 int minmax_offset = 145;
 800565a:	2391      	movs	r3, #145	; 0x91
 800565c:	623b      	str	r3, [r7, #32]

				 if( nRedraw_Humi_Label == 1)
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <MainLCDDisplayMode+0xf3c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d142      	bne.n	80056ec <MainLCDDisplayMode+0xe5c>
				 {
					 sprintf(cLogData, "Min:");
 8005666:	4955      	ldr	r1, [pc, #340]	; (80057bc <MainLCDDisplayMode+0xf2c>)
 8005668:	4855      	ldr	r0, [pc, #340]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 800566a:	f006 fe39 	bl	800c2e0 <siprintf>
					 TFT_print(40 + minmax_offset,225, cLogData);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	b29b      	uxth	r3, r3
 8005672:	3328      	adds	r3, #40	; 0x28
 8005674:	b29b      	uxth	r3, r3
 8005676:	4a52      	ldr	r2, [pc, #328]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005678:	21e1      	movs	r1, #225	; 0xe1
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fe1e 	bl	80042bc <TFT_print>

					 TFT_setFontSize(2);
 8005680:	2002      	movs	r0, #2
 8005682:	f7fe fe47 	bl	8004314 <TFT_setFontSize>
					 sprintf(cLogData, "%d", humi_min);
 8005686:	4b54      	ldr	r3, [pc, #336]	; (80057d8 <MainLCDDisplayMode+0xf48>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	494d      	ldr	r1, [pc, #308]	; (80057c4 <MainLCDDisplayMode+0xf34>)
 800568e:	484c      	ldr	r0, [pc, #304]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005690:	f006 fe26 	bl	800c2e0 <siprintf>
					 TFT_print(67 + minmax_offset,220, cLogData);
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	b29b      	uxth	r3, r3
 8005698:	3343      	adds	r3, #67	; 0x43
 800569a:	b29b      	uxth	r3, r3
 800569c:	4a48      	ldr	r2, [pc, #288]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 800569e:	21dc      	movs	r1, #220	; 0xdc
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fe0b 	bl	80042bc <TFT_print>

					 TFT_setFontSize(1);
 80056a6:	2001      	movs	r0, #1
 80056a8:	f7fe fe34 	bl	8004314 <TFT_setFontSize>
					 sprintf(cLogData, "Max:");
 80056ac:	4946      	ldr	r1, [pc, #280]	; (80057c8 <MainLCDDisplayMode+0xf38>)
 80056ae:	4844      	ldr	r0, [pc, #272]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 80056b0:	f006 fe16 	bl	800c2e0 <siprintf>
					 TFT_print(100 + minmax_offset,225, cLogData);
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3364      	adds	r3, #100	; 0x64
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	4a40      	ldr	r2, [pc, #256]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 80056be:	21e1      	movs	r1, #225	; 0xe1
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fdfb 	bl	80042bc <TFT_print>

					 TFT_setFontSize(2);
 80056c6:	2002      	movs	r0, #2
 80056c8:	f7fe fe24 	bl	8004314 <TFT_setFontSize>
					 sprintf(cLogData, "%d", humi_max);
 80056cc:	4b41      	ldr	r3, [pc, #260]	; (80057d4 <MainLCDDisplayMode+0xf44>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	493c      	ldr	r1, [pc, #240]	; (80057c4 <MainLCDDisplayMode+0xf34>)
 80056d4:	483a      	ldr	r0, [pc, #232]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 80056d6:	f006 fe03 	bl	800c2e0 <siprintf>
					 TFT_print(130 + minmax_offset,220, cLogData);
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3382      	adds	r3, #130	; 0x82
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4a37      	ldr	r2, [pc, #220]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 80056e4:	21dc      	movs	r1, #220	; 0xdc
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fde8 	bl	80042bc <TFT_print>
			  }
		}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		if( nDispMode == DISP_MODE_CAR ||
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d003      	beq.n	80056fa <MainLCDDisplayMode+0xe6a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	f040 80e7 	bne.w	80058c8 <MainLCDDisplayMode+0x1038>
				nDispMode == DISP_MODE_F14)
		{
			 Get_Time();
 80056fa:	f7ff f829 	bl	8004750 <Get_Time>

			 TFT_setColor(TFT_COLOR_Orange);
 80056fe:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005702:	f7fe f829 	bl	8003758 <TFT_setColor>

			 int pos_x = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
			 int pos_y = 150;//175;
 800570a:	2396      	movs	r3, #150	; 0x96
 800570c:	61bb      	str	r3, [r7, #24]

			 TFT_setFontSize(2);
 800570e:	2002      	movs	r0, #2
 8005710:	f7fe fe00 	bl	8004314 <TFT_setFontSize>
			 }

*/
			 //TFT_print(30,35, cLogData);

			TFT_setFontSize(7);
 8005714:	2007      	movs	r0, #7
 8005716:	f7fe fdfd 	bl	8004314 <TFT_setFontSize>
			TFT_setColor(TFT_COLOR_White);
 800571a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800571e:	f7fe f81b 	bl	8003758 <TFT_setColor>
			 //TFT_setTextBackColor(TFT_COLOR_Teal);

			//sprintf(cLogData, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);

			 int hour12 = (int)time.hour;
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <MainLCDDisplayMode+0xf4c>)
 8005724:	789b      	ldrb	r3, [r3, #2]
 8005726:	67fb      	str	r3, [r7, #124]	; 0x7c
			 if(hour12 >= 12 )
 8005728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800572a:	2b0b      	cmp	r3, #11
 800572c:	dd02      	ble.n	8005734 <MainLCDDisplayMode+0xea4>
			 {
				 hour12 = hour12 - 12;
 800572e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005730:	3b0c      	subs	r3, #12
 8005732:	67fb      	str	r3, [r7, #124]	; 0x7c
			 }

			 if(hour12 == 0) hour12 =12;
 8005734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <MainLCDDisplayMode+0xeae>
 800573a:	230c      	movs	r3, #12
 800573c:	67fb      	str	r3, [r7, #124]	; 0x7c

			 //int nHourOld = 0;
			 //int nMinuteOld = 0;

			 if(hour12 != nHourOld )
 800573e:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <MainLCDDisplayMode+0xf50>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005744:	429a      	cmp	r2, r3
 8005746:	d066      	beq.n	8005816 <MainLCDDisplayMode+0xf86>
			 {
				 nHourOld = hour12;
 8005748:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <MainLCDDisplayMode+0xf50>)
 800574a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800574c:	6013      	str	r3, [r2, #0]

				 sprintf(cLogData, "%02d", hour12);
 800574e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005750:	4924      	ldr	r1, [pc, #144]	; (80057e4 <MainLCDDisplayMode+0xf54>)
 8005752:	481b      	ldr	r0, [pc, #108]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005754:	f006 fdc4 	bl	800c2e0 <siprintf>
				 //LCD_DrawText(cLogData, Digital, pos_x+20, pos_y, TFT_COLOR_White, TFT_COLOR_Black);
				 LCD_DrawText(cLogData, FONT9, pos_x+20, pos_y, TFT_COLOR_White, TFT_COLOR_none);
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	b29b      	uxth	r3, r3
 800575c:	3314      	adds	r3, #20
 800575e:	b29a      	uxth	r2, r3
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	b29b      	uxth	r3, r3
 8005764:	2101      	movs	r1, #1
 8005766:	9101      	str	r1, [sp, #4]
 8005768:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800576c:	9100      	str	r1, [sp, #0]
 800576e:	491e      	ldr	r1, [pc, #120]	; (80057e8 <MainLCDDisplayMode+0xf58>)
 8005770:	4813      	ldr	r0, [pc, #76]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 8005772:	f7fe fed7 	bl	8004524 <LCD_DrawText>

				 sprintf(cLogData, ":");
 8005776:	491d      	ldr	r1, [pc, #116]	; (80057ec <MainLCDDisplayMode+0xf5c>)
 8005778:	4811      	ldr	r0, [pc, #68]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 800577a:	f006 fdb1 	bl	800c2e0 <siprintf>
				 //LCD_DrawText(cLogData, Digital, pos_x+98, pos_y, TFT_COLOR_White, TFT_COLOR_Black);
				 LCD_DrawText(cLogData, FONT9, pos_x+100, pos_y+5, TFT_COLOR_White, TFT_COLOR_none);
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	b29b      	uxth	r3, r3
 8005782:	3364      	adds	r3, #100	; 0x64
 8005784:	b29a      	uxth	r2, r3
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	b29b      	uxth	r3, r3
 800578a:	3305      	adds	r3, #5
 800578c:	b29b      	uxth	r3, r3
 800578e:	2101      	movs	r1, #1
 8005790:	9101      	str	r1, [sp, #4]
 8005792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005796:	9100      	str	r1, [sp, #0]
 8005798:	4913      	ldr	r1, [pc, #76]	; (80057e8 <MainLCDDisplayMode+0xf58>)
 800579a:	4809      	ldr	r0, [pc, #36]	; (80057c0 <MainLCDDisplayMode+0xf30>)
 800579c:	f7fe fec2 	bl	8004524 <LCD_DrawText>

				 TFT_setFontSize(3);
 80057a0:	2003      	movs	r0, #3
 80057a2:	f7fe fdb7 	bl	8004314 <TFT_setFontSize>
				 if(time.hour < 12)
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <MainLCDDisplayMode+0xf4c>)
 80057a8:	789b      	ldrb	r3, [r3, #2]
 80057aa:	2b0b      	cmp	r3, #11
 80057ac:	d82a      	bhi.n	8005804 <MainLCDDisplayMode+0xf74>
 80057ae:	e01f      	b.n	80057f0 <MainLCDDisplayMode+0xf60>
 80057b0:	20000038 	.word	0x20000038
 80057b4:	2000003c 	.word	0x2000003c
 80057b8:	200003a4 	.word	0x200003a4
 80057bc:	0800e908 	.word	0x0800e908
 80057c0:	20000a74 	.word	0x20000a74
 80057c4:	0800e910 	.word	0x0800e910
 80057c8:	0800e914 	.word	0x0800e914
 80057cc:	200003a8 	.word	0x200003a8
 80057d0:	20000b3c 	.word	0x20000b3c
 80057d4:	20000040 	.word	0x20000040
 80057d8:	20000044 	.word	0x20000044
 80057dc:	2000095c 	.word	0x2000095c
 80057e0:	20000024 	.word	0x20000024
 80057e4:	0800e8a8 	.word	0x0800e8a8
 80057e8:	0801380c 	.word	0x0801380c
 80057ec:	0800e8e8 	.word	0x0800e8e8
					 TFT_print(235,pos_y+28, "AM");//sprintf(cLogData, "AM");
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	331c      	adds	r3, #28
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4a89      	ldr	r2, [pc, #548]	; (8005a20 <MainLCDDisplayMode+0x1190>)
 80057fa:	4619      	mov	r1, r3
 80057fc:	20eb      	movs	r0, #235	; 0xeb
 80057fe:	f7fe fd5d 	bl	80042bc <TFT_print>
 8005802:	e008      	b.n	8005816 <MainLCDDisplayMode+0xf86>
				 else TFT_print(235,pos_y+28, "PM");//sprintf(cLogData, "PM");
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	331c      	adds	r3, #28
 800580a:	b2db      	uxtb	r3, r3
 800580c:	4a85      	ldr	r2, [pc, #532]	; (8005a24 <MainLCDDisplayMode+0x1194>)
 800580e:	4619      	mov	r1, r3
 8005810:	20eb      	movs	r0, #235	; 0xeb
 8005812:	f7fe fd53 	bl	80042bc <TFT_print>

				 //LCD_DrawText(cLogData, FONT6, 240, 125, TFT_COLOR_White, TFT_COLOR_Black);

			 }

			 if(time.minutes != nMinuteOld)
 8005816:	4b84      	ldr	r3, [pc, #528]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	461a      	mov	r2, r3
 800581c:	4b83      	ldr	r3, [pc, #524]	; (8005a2c <MainLCDDisplayMode+0x119c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d039      	beq.n	8005898 <MainLCDDisplayMode+0x1008>
			 {
				 //nHourOld = hour12;
				 nMinuteOld = time.minutes;
 8005824:	4b80      	ldr	r3, [pc, #512]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	461a      	mov	r2, r3
 800582a:	4b80      	ldr	r3, [pc, #512]	; (8005a2c <MainLCDDisplayMode+0x119c>)
 800582c:	601a      	str	r2, [r3, #0]

				 sprintf(cLogData, "%02d", time.minutes);
 800582e:	4b7e      	ldr	r3, [pc, #504]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	461a      	mov	r2, r3
 8005834:	497e      	ldr	r1, [pc, #504]	; (8005a30 <MainLCDDisplayMode+0x11a0>)
 8005836:	487f      	ldr	r0, [pc, #508]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 8005838:	f006 fd52 	bl	800c2e0 <siprintf>
				// LCD_DrawText(cLogData, FONT9, 10, 100 , TFT_COLOR_White, TFT_COLOR_Black);
				// LCD_DrawText(cLogData, Digital, pos_x+135, pos_y , TFT_COLOR_White, TFT_COLOR_Black);
				LCD_DrawText(cLogData, FONT9, pos_x+140, pos_y , TFT_COLOR_White, TFT_COLOR_none);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	b29b      	uxth	r3, r3
 8005840:	338c      	adds	r3, #140	; 0x8c
 8005842:	b29a      	uxth	r2, r3
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	b29b      	uxth	r3, r3
 8005848:	2101      	movs	r1, #1
 800584a:	9101      	str	r1, [sp, #4]
 800584c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005850:	9100      	str	r1, [sp, #0]
 8005852:	4979      	ldr	r1, [pc, #484]	; (8005a38 <MainLCDDisplayMode+0x11a8>)
 8005854:	4877      	ldr	r0, [pc, #476]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 8005856:	f7fe fe65 	bl	8004524 <LCD_DrawText>

				 if(nBarColor == 0)  nBarColor = 1;
 800585a:	4b78      	ldr	r3, [pc, #480]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <MainLCDDisplayMode+0xfda>
 8005862:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e016      	b.n	8005898 <MainLCDDisplayMode+0x1008>
				 else if(nBarColor == 1)  nBarColor = 2;
 800586a:	4b74      	ldr	r3, [pc, #464]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d103      	bne.n	800587a <MainLCDDisplayMode+0xfea>
 8005872:	4b72      	ldr	r3, [pc, #456]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005874:	2202      	movs	r2, #2
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e00e      	b.n	8005898 <MainLCDDisplayMode+0x1008>
				 else if(nBarColor == 2)  nBarColor = 3;
 800587a:	4b70      	ldr	r3, [pc, #448]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <MainLCDDisplayMode+0xffa>
 8005882:	4b6e      	ldr	r3, [pc, #440]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005884:	2203      	movs	r2, #3
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e006      	b.n	8005898 <MainLCDDisplayMode+0x1008>
				 else if(nBarColor == 3)  nBarColor = 0;
 800588a:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d102      	bne.n	8005898 <MainLCDDisplayMode+0x1008>
 8005892:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

			 }

			 //TFT_print(30,100, cLogData);

			 TFT_setFontSize(2);
 8005898:	2002      	movs	r0, #2
 800589a:	f7fe fd3b 	bl	8004314 <TFT_setFontSize>
			 // sprintf(cLogData, "%02d", time.seconds);
			 //TFT_print(250,135, cLogData);
			 if( nSecondOld != time.seconds)
 800589e:	4b62      	ldr	r3, [pc, #392]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	4b66      	ldr	r3, [pc, #408]	; (8005a40 <MainLCDDisplayMode+0x11b0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d00d      	beq.n	80058c8 <MainLCDDisplayMode+0x1038>
			 {
					nFlicker = !nFlicker;
 80058ac:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <MainLCDDisplayMode+0x11b4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <MainLCDDisplayMode+0x11b4>)
 80058be:	601a      	str	r2, [r3, #0]

					if(1)//nFlicker == 1)
						sprintf(cLogData, ":");
 80058c0:	4961      	ldr	r1, [pc, #388]	; (8005a48 <MainLCDDisplayMode+0x11b8>)
 80058c2:	485c      	ldr	r0, [pc, #368]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 80058c4:	f006 fd0c 	bl	800c2e0 <siprintf>



		}

		if( nDispMode == DISP_MODE_3D_IMG)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	f040 80e3 	bne.w	8005a96 <MainLCDDisplayMode+0x1206>
		{
			 Get_Time();
 80058d0:	f7fe ff3e 	bl	8004750 <Get_Time>

				 TFT_setColor(TFT_COLOR_Orange);
 80058d4:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 80058d8:	f7fd ff3e 	bl	8003758 <TFT_setColor>

				 int pos_x = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
				 int pos_y = 95;//175;
 80058e0:	235f      	movs	r3, #95	; 0x5f
 80058e2:	613b      	str	r3, [r7, #16]

				 TFT_setFontSize(2);
 80058e4:	2002      	movs	r0, #2
 80058e6:	f7fe fd15 	bl	8004314 <TFT_setFontSize>
				 }

	*/
				 //TFT_print(30,35, cLogData);

				TFT_setFontSize(7);
 80058ea:	2007      	movs	r0, #7
 80058ec:	f7fe fd12 	bl	8004314 <TFT_setFontSize>
				TFT_setColor(TFT_COLOR_White);
 80058f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80058f4:	f7fd ff30 	bl	8003758 <TFT_setColor>
				 //TFT_setTextBackColor(TFT_COLOR_Teal);

				//sprintf(cLogData, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);

				 int hour12 = (int)time.hour;
 80058f8:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 80058fa:	789b      	ldrb	r3, [r3, #2]
 80058fc:	67bb      	str	r3, [r7, #120]	; 0x78
				 if(hour12 >= 12 )
 80058fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005900:	2b0b      	cmp	r3, #11
 8005902:	dd02      	ble.n	800590a <MainLCDDisplayMode+0x107a>
				 {
					 hour12 = hour12 - 12;
 8005904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005906:	3b0c      	subs	r3, #12
 8005908:	67bb      	str	r3, [r7, #120]	; 0x78
				 }

				 if(hour12 == 0) hour12 =12;
 800590a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <MainLCDDisplayMode+0x1084>
 8005910:	230c      	movs	r3, #12
 8005912:	67bb      	str	r3, [r7, #120]	; 0x78

				 //int nHourOld = 0;
				 //int nMinuteOld = 0;

				 if(hour12 != nHourOld )
 8005914:	4b4d      	ldr	r3, [pc, #308]	; (8005a4c <MainLCDDisplayMode+0x11bc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800591a:	429a      	cmp	r2, r3
 800591c:	d040      	beq.n	80059a0 <MainLCDDisplayMode+0x1110>
				 {
					 nHourOld = hour12;
 800591e:	4a4b      	ldr	r2, [pc, #300]	; (8005a4c <MainLCDDisplayMode+0x11bc>)
 8005920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005922:	6013      	str	r3, [r2, #0]

					 sprintf(cLogData, "%02d", hour12);
 8005924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005926:	4942      	ldr	r1, [pc, #264]	; (8005a30 <MainLCDDisplayMode+0x11a0>)
 8005928:	4842      	ldr	r0, [pc, #264]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 800592a:	f006 fcd9 	bl	800c2e0 <siprintf>
					 //TFT_print(pos_x+20, pos_y,cLogData);
					 LCD_DrawText(cLogData, FONT6, pos_x+20, pos_y, TFT_COLOR_Black, TFT_COLOR_Yellow);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	b29b      	uxth	r3, r3
 8005932:	3314      	adds	r3, #20
 8005934:	b29a      	uxth	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800593e:	9101      	str	r1, [sp, #4]
 8005940:	2100      	movs	r1, #0
 8005942:	9100      	str	r1, [sp, #0]
 8005944:	4942      	ldr	r1, [pc, #264]	; (8005a50 <MainLCDDisplayMode+0x11c0>)
 8005946:	483b      	ldr	r0, [pc, #236]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 8005948:	f7fe fdec 	bl	8004524 <LCD_DrawText>

					 sprintf(cLogData, ":");
 800594c:	493e      	ldr	r1, [pc, #248]	; (8005a48 <MainLCDDisplayMode+0x11b8>)
 800594e:	4839      	ldr	r0, [pc, #228]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 8005950:	f006 fcc6 	bl	800c2e0 <siprintf>
					// TFT_print(pos_x+100, pos_y+5,cLogData);
					 //LCD_DrawText(cLogData, FONT9, pos_x+100, pos_y+5, TFT_COLOR_White, TFT_COLOR_none);

					 TFT_setFontSize(3);
 8005954:	2003      	movs	r0, #3
 8005956:	f7fe fcdd 	bl	8004314 <TFT_setFontSize>
					 if(time.hour < 12)  LCD_DrawText("AM", FONT10, 195, pos_y+40, TFT_COLOR_White, TFT_COLOR_Orange);
 800595a:	4b33      	ldr	r3, [pc, #204]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 800595c:	789b      	ldrb	r3, [r3, #2]
 800595e:	2b0b      	cmp	r3, #11
 8005960:	d80f      	bhi.n	8005982 <MainLCDDisplayMode+0x10f2>
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	b29b      	uxth	r3, r3
 8005966:	3328      	adds	r3, #40	; 0x28
 8005968:	b29b      	uxth	r3, r3
 800596a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800596e:	9201      	str	r2, [sp, #4]
 8005970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005974:	9200      	str	r2, [sp, #0]
 8005976:	22c3      	movs	r2, #195	; 0xc3
 8005978:	4936      	ldr	r1, [pc, #216]	; (8005a54 <MainLCDDisplayMode+0x11c4>)
 800597a:	4829      	ldr	r0, [pc, #164]	; (8005a20 <MainLCDDisplayMode+0x1190>)
 800597c:	f7fe fdd2 	bl	8004524 <LCD_DrawText>
 8005980:	e00e      	b.n	80059a0 <MainLCDDisplayMode+0x1110>
						 //TFT_print(235,pos_y+28, "AM");//sprintf(cLogData, "AM");
					 else  LCD_DrawText("PM", FONT10, 195, pos_y+40, TFT_COLOR_White, TFT_COLOR_Orange);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	b29b      	uxth	r3, r3
 8005986:	3328      	adds	r3, #40	; 0x28
 8005988:	b29b      	uxth	r3, r3
 800598a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800598e:	9201      	str	r2, [sp, #4]
 8005990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005994:	9200      	str	r2, [sp, #0]
 8005996:	22c3      	movs	r2, #195	; 0xc3
 8005998:	492e      	ldr	r1, [pc, #184]	; (8005a54 <MainLCDDisplayMode+0x11c4>)
 800599a:	4822      	ldr	r0, [pc, #136]	; (8005a24 <MainLCDDisplayMode+0x1194>)
 800599c:	f7fe fdc2 	bl	8004524 <LCD_DrawText>

					 //LCD_DrawText(cLogData, FONT6, 240, 125, TFT_COLOR_White, TFT_COLOR_Black);

				 }

				 TFT_setFontSize(7);
 80059a0:	2007      	movs	r0, #7
 80059a2:	f7fe fcb7 	bl	8004314 <TFT_setFontSize>

				 if(time.minutes != nMinuteOld)
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	461a      	mov	r2, r3
 80059ac:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <MainLCDDisplayMode+0x119c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d058      	beq.n	8005a66 <MainLCDDisplayMode+0x11d6>
				 {
					 //nHourOld = hour12;
					 nMinuteOld = time.minutes;
 80059b4:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <MainLCDDisplayMode+0x119c>)
 80059bc:	601a      	str	r2, [r3, #0]

					 sprintf(cLogData, "%02d", time.minutes);
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <MainLCDDisplayMode+0x1198>)
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	461a      	mov	r2, r3
 80059c4:	491a      	ldr	r1, [pc, #104]	; (8005a30 <MainLCDDisplayMode+0x11a0>)
 80059c6:	481b      	ldr	r0, [pc, #108]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 80059c8:	f006 fc8a 	bl	800c2e0 <siprintf>
					 //TFT_print(pos_x+140, pos_y,cLogData);
					LCD_DrawText(cLogData, FONT6, pos_x+95, pos_y+45 , TFT_COLOR_Black, TFT_COLOR_Lime);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	335f      	adds	r3, #95	; 0x5f
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	332d      	adds	r3, #45	; 0x2d
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80059e0:	9101      	str	r1, [sp, #4]
 80059e2:	2100      	movs	r1, #0
 80059e4:	9100      	str	r1, [sp, #0]
 80059e6:	491a      	ldr	r1, [pc, #104]	; (8005a50 <MainLCDDisplayMode+0x11c0>)
 80059e8:	4812      	ldr	r0, [pc, #72]	; (8005a34 <MainLCDDisplayMode+0x11a4>)
 80059ea:	f7fe fd9b 	bl	8004524 <LCD_DrawText>

					 if(nBarColor == 0)  nBarColor = 1;
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <MainLCDDisplayMode+0x116e>
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e033      	b.n	8005a66 <MainLCDDisplayMode+0x11d6>
					 else if(nBarColor == 1)  nBarColor = 2;
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d103      	bne.n	8005a0e <MainLCDDisplayMode+0x117e>
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e02b      	b.n	8005a66 <MainLCDDisplayMode+0x11d6>
					 else if(nBarColor == 2)  nBarColor = 3;
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d120      	bne.n	8005a58 <MainLCDDisplayMode+0x11c8>
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <MainLCDDisplayMode+0x11ac>)
 8005a18:	2203      	movs	r2, #3
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e023      	b.n	8005a66 <MainLCDDisplayMode+0x11d6>
 8005a1e:	bf00      	nop
 8005a20:	0800e8ec 	.word	0x0800e8ec
 8005a24:	0800e8f0 	.word	0x0800e8f0
 8005a28:	2000095c 	.word	0x2000095c
 8005a2c:	20000394 	.word	0x20000394
 8005a30:	0800e8a8 	.word	0x0800e8a8
 8005a34:	20000a74 	.word	0x20000a74
 8005a38:	0801380c 	.word	0x0801380c
 8005a3c:	2000002c 	.word	0x2000002c
 8005a40:	20000028 	.word	0x20000028
 8005a44:	20000398 	.word	0x20000398
 8005a48:	0800e8e8 	.word	0x0800e8e8
 8005a4c:	20000024 	.word	0x20000024
 8005a50:	0800ec44 	.word	0x0800ec44
 8005a54:	080222d4 	.word	0x080222d4
					 else if(nBarColor == 3)  nBarColor = 0;
 8005a58:	4b76      	ldr	r3, [pc, #472]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d102      	bne.n	8005a66 <MainLCDDisplayMode+0x11d6>
 8005a60:	4b74      	ldr	r3, [pc, #464]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

				 }

				 //TFT_print(30,100, cLogData);

				 TFT_setFontSize(2);
 8005a66:	2002      	movs	r0, #2
 8005a68:	f7fe fc54 	bl	8004314 <TFT_setFontSize>
				 // sprintf(cLogData, "%02d", time.seconds);
				 //TFT_print(250,135, cLogData);
				 if( nSecondOld != time.seconds)
 8005a6c:	4b72      	ldr	r3, [pc, #456]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b72      	ldr	r3, [pc, #456]	; (8005c3c <MainLCDDisplayMode+0x13ac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00d      	beq.n	8005a96 <MainLCDDisplayMode+0x1206>
				 {
						nFlicker = !nFlicker;
 8005a7a:	4b71      	ldr	r3, [pc, #452]	; (8005c40 <MainLCDDisplayMode+0x13b0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b6d      	ldr	r3, [pc, #436]	; (8005c40 <MainLCDDisplayMode+0x13b0>)
 8005a8c:	601a      	str	r2, [r3, #0]

						if(1)//nFlicker == 1)
							sprintf(cLogData, ":");
 8005a8e:	496d      	ldr	r1, [pc, #436]	; (8005c44 <MainLCDDisplayMode+0x13b4>)
 8005a90:	486d      	ldr	r0, [pc, #436]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005a92:	f006 fc25 	bl	800c2e0 <siprintf>
							sprintf(cLogData, " ");

				 }
		 }

		if( nDispMode == DISP_MODE_BALLOON)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	f040 80c7 	bne.w	8005c2c <MainLCDDisplayMode+0x139c>
				{
					 Get_Time();
 8005a9e:	f7fe fe57 	bl	8004750 <Get_Time>

						 TFT_setColor(TFT_COLOR_Orange);
 8005aa2:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005aa6:	f7fd fe57 	bl	8003758 <TFT_setColor>

						 int pos_x = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
						 int pos_y = 170;//175;
 8005aae:	23aa      	movs	r3, #170	; 0xaa
 8005ab0:	60bb      	str	r3, [r7, #8]

						 TFT_setFontSize(2);
 8005ab2:	2002      	movs	r0, #2
 8005ab4:	f7fe fc2e 	bl	8004314 <TFT_setFontSize>
						 }

			*/
						 //TFT_print(30,35, cLogData);

						TFT_setFontSize(7);
 8005ab8:	2007      	movs	r0, #7
 8005aba:	f7fe fc2b 	bl	8004314 <TFT_setFontSize>
						TFT_setColor(TFT_COLOR_White);
 8005abe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005ac2:	f7fd fe49 	bl	8003758 <TFT_setColor>
						 //TFT_setTextBackColor(TFT_COLOR_Teal);

						//sprintf(cLogData, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);

						 int hour12 = (int)time.hour;
 8005ac6:	4b5c      	ldr	r3, [pc, #368]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005ac8:	789b      	ldrb	r3, [r3, #2]
 8005aca:	677b      	str	r3, [r7, #116]	; 0x74
						 if(hour12 >= 12 )
 8005acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ace:	2b0b      	cmp	r3, #11
 8005ad0:	dd02      	ble.n	8005ad8 <MainLCDDisplayMode+0x1248>
						 {
							 hour12 = hour12 - 12;
 8005ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad4:	3b0c      	subs	r3, #12
 8005ad6:	677b      	str	r3, [r7, #116]	; 0x74
						 }

						 if(hour12 == 0) hour12 =12;
 8005ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <MainLCDDisplayMode+0x1252>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	677b      	str	r3, [r7, #116]	; 0x74

						 //int nHourOld = 0;
						 //int nMinuteOld = 0;

						 if(hour12 != nHourOld )
 8005ae2:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <MainLCDDisplayMode+0x13bc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d041      	beq.n	8005b70 <MainLCDDisplayMode+0x12e0>
						 {
							 nHourOld = hour12;
 8005aec:	4a57      	ldr	r2, [pc, #348]	; (8005c4c <MainLCDDisplayMode+0x13bc>)
 8005aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af0:	6013      	str	r3, [r2, #0]

							 sprintf(cLogData, "%02d", hour12);
 8005af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005af4:	4956      	ldr	r1, [pc, #344]	; (8005c50 <MainLCDDisplayMode+0x13c0>)
 8005af6:	4854      	ldr	r0, [pc, #336]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005af8:	f006 fbf2 	bl	800c2e0 <siprintf>
							 //TFT_print(pos_x+20, pos_y,cLogData);
							 LCD_DrawText(cLogData, FONT9, pos_x+10, pos_y, TFT_COLOR_White, TFT_COLOR_Purple);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	330a      	adds	r3, #10
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f248 0110 	movw	r1, #32784	; 0x8010
 8005b0c:	9101      	str	r1, [sp, #4]
 8005b0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b12:	9100      	str	r1, [sp, #0]
 8005b14:	494f      	ldr	r1, [pc, #316]	; (8005c54 <MainLCDDisplayMode+0x13c4>)
 8005b16:	484c      	ldr	r0, [pc, #304]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005b18:	f7fe fd04 	bl	8004524 <LCD_DrawText>

							 sprintf(cLogData, ":");
 8005b1c:	4949      	ldr	r1, [pc, #292]	; (8005c44 <MainLCDDisplayMode+0x13b4>)
 8005b1e:	484a      	ldr	r0, [pc, #296]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005b20:	f006 fbde 	bl	800c2e0 <siprintf>
							// TFT_print(pos_x+100, pos_y+5,cLogData);
							// LCD_DrawText(cLogData, FONT10, pos_x+100, pos_y-10, TFT_COLOR_White, TFT_COLOR_Gray);

							 TFT_setFontSize(3);
 8005b24:	2003      	movs	r0, #3
 8005b26:	f7fe fbf5 	bl	8004314 <TFT_setFontSize>
							 if(time.hour < 12)  LCD_DrawText("AM", FONT10, 250, pos_y - 30, TFT_COLOR_White, TFT_COLOR_Orange);
 8005b2a:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005b2c:	789b      	ldrb	r3, [r3, #2]
 8005b2e:	2b0b      	cmp	r3, #11
 8005b30:	d80f      	bhi.n	8005b52 <MainLCDDisplayMode+0x12c2>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b1e      	subs	r3, #30
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8005b3e:	9201      	str	r2, [sp, #4]
 8005b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b44:	9200      	str	r2, [sp, #0]
 8005b46:	22fa      	movs	r2, #250	; 0xfa
 8005b48:	4943      	ldr	r1, [pc, #268]	; (8005c58 <MainLCDDisplayMode+0x13c8>)
 8005b4a:	4844      	ldr	r0, [pc, #272]	; (8005c5c <MainLCDDisplayMode+0x13cc>)
 8005b4c:	f7fe fcea 	bl	8004524 <LCD_DrawText>
 8005b50:	e00e      	b.n	8005b70 <MainLCDDisplayMode+0x12e0>
								 //TFT_print(235,pos_y+28, "AM");//sprintf(cLogData, "AM");
							 else  LCD_DrawText("PM", FONT10, 250, pos_y - 30, TFT_COLOR_White, TFT_COLOR_Orange);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b1e      	subs	r3, #30
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8005b5e:	9201      	str	r2, [sp, #4]
 8005b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b64:	9200      	str	r2, [sp, #0]
 8005b66:	22fa      	movs	r2, #250	; 0xfa
 8005b68:	493b      	ldr	r1, [pc, #236]	; (8005c58 <MainLCDDisplayMode+0x13c8>)
 8005b6a:	483d      	ldr	r0, [pc, #244]	; (8005c60 <MainLCDDisplayMode+0x13d0>)
 8005b6c:	f7fe fcda 	bl	8004524 <LCD_DrawText>

							 //LCD_DrawText(cLogData, FONT6, 240, 125, TFT_COLOR_White, TFT_COLOR_Black);

						 }

						 TFT_setFontSize(7);
 8005b70:	2007      	movs	r0, #7
 8005b72:	f7fe fbcf 	bl	8004314 <TFT_setFontSize>

						 if(time.minutes != nMinuteOld)
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <MainLCDDisplayMode+0x13d4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d03b      	beq.n	8005bfc <MainLCDDisplayMode+0x136c>
						 {
							 //nHourOld = hour12;
							 nMinuteOld = time.minutes;
 8005b84:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <MainLCDDisplayMode+0x13d4>)
 8005b8c:	601a      	str	r2, [r3, #0]

							 sprintf(cLogData, "%02d", (int)time.minutes);
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	461a      	mov	r2, r3
 8005b94:	492e      	ldr	r1, [pc, #184]	; (8005c50 <MainLCDDisplayMode+0x13c0>)
 8005b96:	482c      	ldr	r0, [pc, #176]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005b98:	f006 fba2 	bl	800c2e0 <siprintf>
							 //TFT_print(pos_x+140, pos_y,cLogData);
							LCD_DrawText(cLogData, FONT9, pos_x+140, pos_y-20 , TFT_COLOR_White, TFT_COLOR_Blue);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	338c      	adds	r3, #140	; 0x8c
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b14      	subs	r3, #20
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	211f      	movs	r1, #31
 8005bae:	9101      	str	r1, [sp, #4]
 8005bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005bb4:	9100      	str	r1, [sp, #0]
 8005bb6:	4927      	ldr	r1, [pc, #156]	; (8005c54 <MainLCDDisplayMode+0x13c4>)
 8005bb8:	4823      	ldr	r0, [pc, #140]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005bba:	f7fe fcb3 	bl	8004524 <LCD_DrawText>

							 if(nBarColor == 0)  nBarColor = 1;
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <MainLCDDisplayMode+0x133e>
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e016      	b.n	8005bfc <MainLCDDisplayMode+0x136c>
							 else if(nBarColor == 1)  nBarColor = 2;
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d103      	bne.n	8005bde <MainLCDDisplayMode+0x134e>
 8005bd6:	4b17      	ldr	r3, [pc, #92]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005bd8:	2202      	movs	r2, #2
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e00e      	b.n	8005bfc <MainLCDDisplayMode+0x136c>
							 else if(nBarColor == 2)  nBarColor = 3;
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <MainLCDDisplayMode+0x135e>
 8005be6:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005be8:	2203      	movs	r2, #3
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e006      	b.n	8005bfc <MainLCDDisplayMode+0x136c>
							 else if(nBarColor == 3)  nBarColor = 0;
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d102      	bne.n	8005bfc <MainLCDDisplayMode+0x136c>
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <MainLCDDisplayMode+0x13a4>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

						 }

						 //TFT_print(30,100, cLogData);

						 TFT_setFontSize(2);
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	f7fe fb89 	bl	8004314 <TFT_setFontSize>
						 // sprintf(cLogData, "%02d", time.seconds);
						 //TFT_print(250,135, cLogData);
						 if( nSecondOld != time.seconds)
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <MainLCDDisplayMode+0x13a8>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <MainLCDDisplayMode+0x13ac>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d00d      	beq.n	8005c2c <MainLCDDisplayMode+0x139c>
						 {
								nFlicker = !nFlicker;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <MainLCDDisplayMode+0x13b0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <MainLCDDisplayMode+0x13b0>)
 8005c22:	601a      	str	r2, [r3, #0]

								if(1)//nFlicker == 1)
									sprintf(cLogData, ":");
 8005c24:	4907      	ldr	r1, [pc, #28]	; (8005c44 <MainLCDDisplayMode+0x13b4>)
 8005c26:	4808      	ldr	r0, [pc, #32]	; (8005c48 <MainLCDDisplayMode+0x13b8>)
 8005c28:	f006 fb5a 	bl	800c2e0 <siprintf>
									sprintf(cLogData, " ");

						 }
				 }

}
 8005c2c:	bf00      	nop
 8005c2e:	37ac      	adds	r7, #172	; 0xac
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd90      	pop	{r4, r7, pc}
 8005c34:	2000002c 	.word	0x2000002c
 8005c38:	2000095c 	.word	0x2000095c
 8005c3c:	20000028 	.word	0x20000028
 8005c40:	20000398 	.word	0x20000398
 8005c44:	0800e8e8 	.word	0x0800e8e8
 8005c48:	20000a74 	.word	0x20000a74
 8005c4c:	20000024 	.word	0x20000024
 8005c50:	0800e8a8 	.word	0x0800e8a8
 8005c54:	0801380c 	.word	0x0801380c
 8005c58:	080222d4 	.word	0x080222d4
 8005c5c:	0800e8ec 	.word	0x0800e8ec
 8005c60:	0800e8f0 	.word	0x0800e8f0
 8005c64:	20000394 	.word	0x20000394

08005c68 <MeasureTempHumi>:

void MeasureTempHumi()
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af02      	add	r7, sp, #8
//SCL : D15
//SDA : D14

	if (1)//nRedraw == 0 && nDispMode == DISP_MODE_ALL)
	{
	  buffer[0] = 0x00;
 8005c6e:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <MeasureTempHumi+0x108>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]

	 //trigger temperature measurment
	  HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, buffer, 1, 100);
 8005c74:	2364      	movs	r3, #100	; 0x64
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4a3d      	ldr	r2, [pc, #244]	; (8005d70 <MeasureTempHumi+0x108>)
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	483d      	ldr	r0, [pc, #244]	; (8005d74 <MeasureTempHumi+0x10c>)
 8005c80:	f001 fc9a 	bl	80075b8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(20);
 8005c84:	2014      	movs	r0, #20
 8005c86:	f000 fee5 	bl	8006a54 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, 0x40 << 1, buffer, 2, 100);
 8005c8a:	2364      	movs	r3, #100	; 0x64
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	2302      	movs	r3, #2
 8005c90:	4a37      	ldr	r2, [pc, #220]	; (8005d70 <MeasureTempHumi+0x108>)
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	4837      	ldr	r0, [pc, #220]	; (8005d74 <MeasureTempHumi+0x10c>)
 8005c96:	f001 fd8d 	bl	80077b4 <HAL_I2C_Master_Receive>


	  rawTemp = buffer[0] << 8 | buffer[1];		//combine 8-bit of 2ea into 1 16-bit
 8005c9a:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <MeasureTempHumi+0x108>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	4a33      	ldr	r2, [pc, #204]	; (8005d70 <MeasureTempHumi+0x108>)
 8005ca2:	7852      	ldrb	r2, [r2, #1]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <MeasureTempHumi+0x110>)
 8005caa:	601a      	str	r2, [r3, #0]
	  HDC1080_Temp = (( (float)rawTemp / 65536 ) * 165.0 - 40 );
 8005cac:	4b32      	ldr	r3, [pc, #200]	; (8005d78 <MeasureTempHumi+0x110>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005d7c <MeasureTempHumi+0x114>
 8005cbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cc0:	ee16 0a90 	vmov	r0, s13
 8005cc4:	f7fa fc48 	bl	8000558 <__aeabi_f2d>
 8005cc8:	a327      	add	r3, pc, #156	; (adr r3, 8005d68 <MeasureTempHumi+0x100>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fc9b 	bl	8000608 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <MeasureTempHumi+0x118>)
 8005ce0:	f7fa fada 	bl	8000298 <__aeabi_dsub>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	f7fa ff64 	bl	8000bb8 <__aeabi_d2f>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <MeasureTempHumi+0x11c>)
 8005cf4:	6013      	str	r3, [r2, #0]

	  HAL_Delay(10);
 8005cf6:	200a      	movs	r0, #10
 8005cf8:	f000 feac 	bl	8006a54 <HAL_Delay>

	  //trigger humidity measurment
	  buffer[0] = 0x01;
 8005cfc:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <MeasureTempHumi+0x108>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, buffer, 1, 100);
 8005d02:	2364      	movs	r3, #100	; 0x64
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2301      	movs	r3, #1
 8005d08:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <MeasureTempHumi+0x108>)
 8005d0a:	2180      	movs	r1, #128	; 0x80
 8005d0c:	4819      	ldr	r0, [pc, #100]	; (8005d74 <MeasureTempHumi+0x10c>)
 8005d0e:	f001 fc53 	bl	80075b8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(20);
 8005d12:	2014      	movs	r0, #20
 8005d14:	f000 fe9e 	bl	8006a54 <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, 0x40 << 1, buffer, 2, 100);
 8005d18:	2364      	movs	r3, #100	; 0x64
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <MeasureTempHumi+0x108>)
 8005d20:	2180      	movs	r1, #128	; 0x80
 8005d22:	4814      	ldr	r0, [pc, #80]	; (8005d74 <MeasureTempHumi+0x10c>)
 8005d24:	f001 fd46 	bl	80077b4 <HAL_I2C_Master_Receive>

	  rawHumi = buffer[0] << 8 | buffer[1];		//combine 8-bit of 2ea into 1 16-bit
 8005d28:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <MeasureTempHumi+0x108>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <MeasureTempHumi+0x108>)
 8005d30:	7852      	ldrb	r2, [r2, #1]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <MeasureTempHumi+0x120>)
 8005d38:	601a      	str	r2, [r3, #0]
	  HDC1080_Humi = (( (float)rawHumi / 65536 ) * 100.0 );
 8005d3a:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <MeasureTempHumi+0x120>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d46:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005d7c <MeasureTempHumi+0x114>
 8005d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d4e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005d8c <MeasureTempHumi+0x124>
 8005d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d56:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <MeasureTempHumi+0x128>)
 8005d58:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay(10);
 8005d5c:	200a      	movs	r0, #10
 8005d5e:	f000 fe79 	bl	8006a54 <HAL_Delay>

	}



}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	00000000 	.word	0x00000000
 8005d6c:	4064a000 	.word	0x4064a000
 8005d70:	20000b34 	.word	0x20000b34
 8005d74:	20000a1c 	.word	0x20000a1c
 8005d78:	20000ad8 	.word	0x20000ad8
 8005d7c:	47800000 	.word	0x47800000
 8005d80:	40440000 	.word	0x40440000
 8005d84:	20000a70 	.word	0x20000a70
 8005d88:	200009c4 	.word	0x200009c4
 8005d8c:	42c80000 	.word	0x42c80000
 8005d90:	20000b3c 	.word	0x20000b3c

08005d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d9a:	f000 fde9 	bl	8006970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d9e:	f000 f857 	bl	8005e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005da2:	f000 f955 	bl	8006050 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005da6:	f000 f8bf 	bl	8005f28 <MX_I2C1_Init>
  MX_SPI3_Init();
 8005daa:	f000 f919 	bl	8005fe0 <MX_SPI3_Init>
  MX_I2C3_Init();
 8005dae:	f000 f8e9 	bl	8005f84 <MX_I2C3_Init>
  MX_BlueNRG_2_Init();
 8005db2:	f7fb f8cd 	bl	8000f50 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN 2 */

  //LCD
  TFT_init(TFT_ORIENT_LANDSCAPE, &hspi3);
 8005db6:	4921      	ldr	r1, [pc, #132]	; (8005e3c <main+0xa8>)
 8005db8:	2003      	movs	r0, #3
 8005dba:	f7fd f9e3 	bl	8003184 <TFT_init>

  // TFT_clear();

  //main window draw first
  DrawMainWindow(DISP_MODE_3D_IMG);//
 8005dbe:	2005      	movs	r0, #5
 8005dc0:	f7fe fc46 	bl	8004650 <DrawMainWindow>
  while (1)
  {
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  MX_BlueNRG_2_Process();
 8005dc4:	f7fb f8e8 	bl	8000f98 <MX_BlueNRG_2_Process>


	 // if(nRedraw == 1)
	  {
		  MeasureTempHumi();
 8005dc8:	f7ff ff4e 	bl	8005c68 <MeasureTempHumi>

		  MainLCDDisplayMode(setDisplayModeCmd);
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <main+0xac>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fd5d 	bl	8004890 <MainLCDDisplayMode>
	  }

	  //USER BUTTON IO push => false
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == false)
 8005dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dda:	481a      	ldr	r0, [pc, #104]	; (8005e44 <main+0xb0>)
 8005ddc:	f001 fa5c 	bl	8007298 <HAL_GPIO_ReadPin>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <main+0x6a>
	  {
		  setDisplayModeCmd++;
 8005de6:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <main+0xac>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <main+0xac>)
 8005dee:	6013      	str	r3, [r2, #0]
		  if(setDisplayModeCmd > 5)setDisplayModeCmd = 0;
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <main+0xac>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	dd02      	ble.n	8005dfe <main+0x6a>
 8005df8:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <main+0xac>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
	  }

	  //bluetooth ble Set time cmd recieved
	  if(nSetTime == _ON_)
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <main+0xb4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d1de      	bne.n	8005dc4 <main+0x30>
	  {
		  nSetTime = _OFF_;
 8005e06:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <main+0xb4>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
		  Set_Time(time.seconds,time.minutes,time.hour,time.dayofweek ,time.dayofmonth,time.month,time.year );
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <main+0xb8>)
 8005e0e:	7818      	ldrb	r0, [r3, #0]
 8005e10:	4b0e      	ldr	r3, [pc, #56]	; (8005e4c <main+0xb8>)
 8005e12:	785c      	ldrb	r4, [r3, #1]
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <main+0xb8>)
 8005e16:	789d      	ldrb	r5, [r3, #2]
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <main+0xb8>)
 8005e1a:	78de      	ldrb	r6, [r3, #3]
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <main+0xb8>)
 8005e1e:	791b      	ldrb	r3, [r3, #4]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <main+0xb8>)
 8005e22:	7952      	ldrb	r2, [r2, #5]
 8005e24:	4909      	ldr	r1, [pc, #36]	; (8005e4c <main+0xb8>)
 8005e26:	7989      	ldrb	r1, [r1, #6]
 8005e28:	9102      	str	r1, [sp, #8]
 8005e2a:	9201      	str	r2, [sp, #4]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4633      	mov	r3, r6
 8005e30:	462a      	mov	r2, r5
 8005e32:	4621      	mov	r1, r4
 8005e34:	f7fe fc3c 	bl	80046b0 <Set_Time>
	  MX_BlueNRG_2_Process();
 8005e38:	e7c4      	b.n	8005dc4 <main+0x30>
 8005e3a:	bf00      	nop
 8005e3c:	20000adc 	.word	0x20000adc
 8005e40:	2000039c 	.word	0x2000039c
 8005e44:	40020800 	.word	0x40020800
 8005e48:	20000390 	.word	0x20000390
 8005e4c:	2000095c 	.word	0x2000095c

08005e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b094      	sub	sp, #80	; 0x50
 8005e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e56:	f107 0320 	add.w	r3, r7, #32
 8005e5a:	2230      	movs	r2, #48	; 0x30
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f005 fd48 	bl	800b8f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e64:	f107 030c 	add.w	r3, r7, #12
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <SystemClock_Config+0xd0>)
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <SystemClock_Config+0xd0>)
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e82:	6413      	str	r3, [r2, #64]	; 0x40
 8005e84:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <SystemClock_Config+0xd0>)
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e90:	2300      	movs	r3, #0
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <SystemClock_Config+0xd4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e9c:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <SystemClock_Config+0xd4>)
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4b1f      	ldr	r3, [pc, #124]	; (8005f24 <SystemClock_Config+0xd4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005eb8:	2310      	movs	r3, #16
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005ec8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005ece:	2304      	movs	r3, #4
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005ed2:	2307      	movs	r3, #7
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ed6:	f107 0320 	add.w	r3, r7, #32
 8005eda:	4618      	mov	r0, r3
 8005edc:	f002 fe5c 	bl	8008b98 <HAL_RCC_OscConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005ee6:	f000 f96b 	bl	80061c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eea:	230f      	movs	r3, #15
 8005eec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005efa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	2102      	movs	r1, #2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f003 f8be 	bl	8009088 <HAL_RCC_ClockConfig>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005f12:	f000 f955 	bl	80061c0 <Error_Handler>
  }
}
 8005f16:	bf00      	nop
 8005f18:	3750      	adds	r7, #80	; 0x50
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40007000 	.word	0x40007000

08005f28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f2e:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <MX_I2C1_Init+0x54>)
 8005f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f34:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <MX_I2C1_Init+0x58>)
 8005f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005f64:	4804      	ldr	r0, [pc, #16]	; (8005f78 <MX_I2C1_Init+0x50>)
 8005f66:	f001 f9e3 	bl	8007330 <HAL_I2C_Init>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005f70:	f000 f926 	bl	80061c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f74:	bf00      	nop
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000a1c 	.word	0x20000a1c
 8005f7c:	40005400 	.word	0x40005400
 8005f80:	000186a0 	.word	0x000186a0

08005f84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005f8a:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <MX_I2C3_Init+0x54>)
 8005f8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005f90:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <MX_I2C3_Init+0x58>)
 8005f92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f94:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fa6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005fc0:	4804      	ldr	r0, [pc, #16]	; (8005fd4 <MX_I2C3_Init+0x50>)
 8005fc2:	f001 f9b5 	bl	8007330 <HAL_I2C_Init>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005fcc:	f000 f8f8 	bl	80061c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200009c8 	.word	0x200009c8
 8005fd8:	40005c00 	.word	0x40005c00
 8005fdc:	000186a0 	.word	0x000186a0

08005fe0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005fe4:	4b18      	ldr	r3, [pc, #96]	; (8006048 <MX_SPI3_Init+0x68>)
 8005fe6:	4a19      	ldr	r2, [pc, #100]	; (800604c <MX_SPI3_Init+0x6c>)
 8005fe8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005fea:	4b17      	ldr	r3, [pc, #92]	; (8006048 <MX_SPI3_Init+0x68>)
 8005fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ff0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <MX_SPI3_Init+0x68>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8005ff8:	4b13      	ldr	r3, [pc, #76]	; (8006048 <MX_SPI3_Init+0x68>)
 8005ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <MX_SPI3_Init+0x68>)
 8006002:	2200      	movs	r2, #0
 8006004:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <MX_SPI3_Init+0x68>)
 8006008:	2200      	movs	r2, #0
 800600a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800600c:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <MX_SPI3_Init+0x68>)
 800600e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006012:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <MX_SPI3_Init+0x68>)
 8006016:	2200      	movs	r2, #0
 8006018:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <MX_SPI3_Init+0x68>)
 800601c:	2200      	movs	r2, #0
 800601e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <MX_SPI3_Init+0x68>)
 8006022:	2200      	movs	r2, #0
 8006024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <MX_SPI3_Init+0x68>)
 8006028:	2200      	movs	r2, #0
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <MX_SPI3_Init+0x68>)
 800602e:	220a      	movs	r2, #10
 8006030:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006032:	4805      	ldr	r0, [pc, #20]	; (8006048 <MX_SPI3_Init+0x68>)
 8006034:	f003 fa10 	bl	8009458 <HAL_SPI_Init>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800603e:	f000 f8bf 	bl	80061c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006042:	bf00      	nop
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000adc 	.word	0x20000adc
 800604c:	40003c00 	.word	0x40003c00

08006050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	605a      	str	r2, [r3, #4]
 8006060:	609a      	str	r2, [r3, #8]
 8006062:	60da      	str	r2, [r3, #12]
 8006064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	4b50      	ldr	r3, [pc, #320]	; (80061ac <MX_GPIO_Init+0x15c>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	4a4f      	ldr	r2, [pc, #316]	; (80061ac <MX_GPIO_Init+0x15c>)
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	6313      	str	r3, [r2, #48]	; 0x30
 8006076:	4b4d      	ldr	r3, [pc, #308]	; (80061ac <MX_GPIO_Init+0x15c>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	4b49      	ldr	r3, [pc, #292]	; (80061ac <MX_GPIO_Init+0x15c>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	4a48      	ldr	r2, [pc, #288]	; (80061ac <MX_GPIO_Init+0x15c>)
 800608c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006090:	6313      	str	r3, [r2, #48]	; 0x30
 8006092:	4b46      	ldr	r3, [pc, #280]	; (80061ac <MX_GPIO_Init+0x15c>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	4b42      	ldr	r3, [pc, #264]	; (80061ac <MX_GPIO_Init+0x15c>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	4a41      	ldr	r2, [pc, #260]	; (80061ac <MX_GPIO_Init+0x15c>)
 80060a8:	f043 0301 	orr.w	r3, r3, #1
 80060ac:	6313      	str	r3, [r2, #48]	; 0x30
 80060ae:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <MX_GPIO_Init+0x15c>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	60bb      	str	r3, [r7, #8]
 80060b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060ba:	2300      	movs	r3, #0
 80060bc:	607b      	str	r3, [r7, #4]
 80060be:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <MX_GPIO_Init+0x15c>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	4a3a      	ldr	r2, [pc, #232]	; (80061ac <MX_GPIO_Init+0x15c>)
 80060c4:	f043 0302 	orr.w	r3, r3, #2
 80060c8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ca:	4b38      	ldr	r3, [pc, #224]	; (80061ac <MX_GPIO_Init+0x15c>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 80060d6:	2200      	movs	r2, #0
 80060d8:	f240 4102 	movw	r1, #1026	; 0x402
 80060dc:	4834      	ldr	r0, [pc, #208]	; (80061b0 <MX_GPIO_Init+0x160>)
 80060de:	f001 f8f3 	bl	80072c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 80060e2:	2200      	movs	r2, #0
 80060e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060e8:	4832      	ldr	r0, [pc, #200]	; (80061b4 <MX_GPIO_Init+0x164>)
 80060ea:	f001 f8ed 	bl	80072c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 80060ee:	2200      	movs	r2, #0
 80060f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060f4:	4830      	ldr	r0, [pc, #192]	; (80061b8 <MX_GPIO_Init+0x168>)
 80060f6:	f001 f8e7 	bl	80072c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <MX_GPIO_Init+0x16c>)
 8006100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006106:	f107 0314 	add.w	r3, r7, #20
 800610a:	4619      	mov	r1, r3
 800610c:	4828      	ldr	r0, [pc, #160]	; (80061b0 <MX_GPIO_Init+0x160>)
 800610e:	f000 fe5b 	bl	8006dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 8006112:	f240 4302 	movw	r3, #1026	; 0x402
 8006116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006118:	2301      	movs	r3, #1
 800611a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006120:	2300      	movs	r3, #0
 8006122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006124:	f107 0314 	add.w	r3, r7, #20
 8006128:	4619      	mov	r1, r3
 800612a:	4821      	ldr	r0, [pc, #132]	; (80061b0 <MX_GPIO_Init+0x160>)
 800612c:	f000 fe4c 	bl	8006dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin;
 8006130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006136:	2301      	movs	r3, #1
 8006138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613e:	2300      	movs	r3, #0
 8006140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_LCD_GPIO_Port, &GPIO_InitStruct);
 8006142:	f107 0314 	add.w	r3, r7, #20
 8006146:	4619      	mov	r1, r3
 8006148:	481a      	ldr	r0, [pc, #104]	; (80061b4 <MX_GPIO_Init+0x164>)
 800614a:	f000 fe3d 	bl	8006dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RESET_Pin;
 800614e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006154:	2301      	movs	r3, #1
 8006156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615c:	2300      	movs	r3, #0
 800615e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006160:	f107 0314 	add.w	r3, r7, #20
 8006164:	4619      	mov	r1, r3
 8006166:	4814      	ldr	r0, [pc, #80]	; (80061b8 <MX_GPIO_Init+0x168>)
 8006168:	f000 fe2e 	bl	8006dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_LED_Pin */
  GPIO_InitStruct.Pin = BLE_LED_Pin;
 800616c:	2320      	movs	r3, #32
 800616e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006170:	2300      	movs	r3, #0
 8006172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_LED_GPIO_Port, &GPIO_InitStruct);
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	4619      	mov	r1, r3
 800617e:	480d      	ldr	r0, [pc, #52]	; (80061b4 <MX_GPIO_Init+0x164>)
 8006180:	f000 fe22 	bl	8006dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006184:	2200      	movs	r2, #0
 8006186:	2100      	movs	r1, #0
 8006188:	2006      	movs	r0, #6
 800618a:	f000 fd86 	bl	8006c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800618e:	2006      	movs	r0, #6
 8006190:	f000 fd9f 	bl	8006cd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006194:	2200      	movs	r2, #0
 8006196:	2100      	movs	r1, #0
 8006198:	2028      	movs	r0, #40	; 0x28
 800619a:	f000 fd7e 	bl	8006c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800619e:	2028      	movs	r0, #40	; 0x28
 80061a0:	f000 fd97 	bl	8006cd2 <HAL_NVIC_EnableIRQ>

}
 80061a4:	bf00      	nop
 80061a6:	3728      	adds	r7, #40	; 0x28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40023800 	.word	0x40023800
 80061b0:	40020000 	.word	0x40020000
 80061b4:	40020400 	.word	0x40020400
 80061b8:	40020800 	.word	0x40020800
 80061bc:	10110000 	.word	0x10110000

080061c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061c4:	b672      	cpsid	i
}
 80061c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80061c8:	e7fe      	b.n	80061c8 <Error_Handler+0x8>
	...

080061cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	4b10      	ldr	r3, [pc, #64]	; (8006218 <HAL_MspInit+0x4c>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	4a0f      	ldr	r2, [pc, #60]	; (8006218 <HAL_MspInit+0x4c>)
 80061dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061e0:	6453      	str	r3, [r2, #68]	; 0x44
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <HAL_MspInit+0x4c>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ea:	607b      	str	r3, [r7, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_MspInit+0x4c>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	4a08      	ldr	r2, [pc, #32]	; (8006218 <HAL_MspInit+0x4c>)
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	6413      	str	r3, [r2, #64]	; 0x40
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_MspInit+0x4c>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800620a:	2007      	movs	r0, #7
 800620c:	f000 fd3a 	bl	8006c84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800

0800621c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006224:	f107 031c 	add.w	r3, r7, #28
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	609a      	str	r2, [r3, #8]
 8006230:	60da      	str	r2, [r3, #12]
 8006232:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a42      	ldr	r2, [pc, #264]	; (8006344 <HAL_I2C_MspInit+0x128>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d12d      	bne.n	800629a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	4b41      	ldr	r3, [pc, #260]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	4a40      	ldr	r2, [pc, #256]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	6313      	str	r3, [r2, #48]	; 0x30
 800624e:	4b3e      	ldr	r3, [pc, #248]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800625a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800625e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006260:	2312      	movs	r3, #18
 8006262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006264:	2301      	movs	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006268:	2303      	movs	r3, #3
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800626c:	2304      	movs	r3, #4
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006270:	f107 031c 	add.w	r3, r7, #28
 8006274:	4619      	mov	r1, r3
 8006276:	4835      	ldr	r0, [pc, #212]	; (800634c <HAL_I2C_MspInit+0x130>)
 8006278:	f000 fda6 	bl	8006dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	4b31      	ldr	r3, [pc, #196]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	4a30      	ldr	r2, [pc, #192]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800628a:	6413      	str	r3, [r2, #64]	; 0x40
 800628c:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006298:	e050      	b.n	800633c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <HAL_I2C_MspInit+0x134>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d14b      	bne.n	800633c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	4b27      	ldr	r3, [pc, #156]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 80062ae:	f043 0304 	orr.w	r3, r3, #4
 80062b2:	6313      	str	r3, [r2, #48]	; 0x30
 80062b4:	4b24      	ldr	r3, [pc, #144]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	4b20      	ldr	r3, [pc, #128]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	6313      	str	r3, [r2, #48]	; 0x30
 80062d0:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80062dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80062e2:	2312      	movs	r3, #18
 80062e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062e6:	2301      	movs	r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ea:	2303      	movs	r3, #3
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80062ee:	2304      	movs	r3, #4
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062f2:	f107 031c 	add.w	r3, r7, #28
 80062f6:	4619      	mov	r1, r3
 80062f8:	4816      	ldr	r0, [pc, #88]	; (8006354 <HAL_I2C_MspInit+0x138>)
 80062fa:	f000 fd65 	bl	8006dc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80062fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006304:	2312      	movs	r3, #18
 8006306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006308:	2301      	movs	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800630c:	2303      	movs	r3, #3
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006310:	2304      	movs	r3, #4
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006314:	f107 031c 	add.w	r3, r7, #28
 8006318:	4619      	mov	r1, r3
 800631a:	480f      	ldr	r0, [pc, #60]	; (8006358 <HAL_I2C_MspInit+0x13c>)
 800631c:	f000 fd54 	bl	8006dc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006320:	2300      	movs	r3, #0
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	4a07      	ldr	r2, [pc, #28]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 800632a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800632e:	6413      	str	r3, [r2, #64]	; 0x40
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_I2C_MspInit+0x12c>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	68bb      	ldr	r3, [r7, #8]
}
 800633c:	bf00      	nop
 800633e:	3730      	adds	r7, #48	; 0x30
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40005400 	.word	0x40005400
 8006348:	40023800 	.word	0x40023800
 800634c:	40020400 	.word	0x40020400
 8006350:	40005c00 	.word	0x40005c00
 8006354:	40020800 	.word	0x40020800
 8006358:	40020000 	.word	0x40020000

0800635c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_SPI_MspInit+0x84>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d12c      	bne.n	80063d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <HAL_SPI_MspInit+0x88>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <HAL_SPI_MspInit+0x88>)
 8006388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638c:	6413      	str	r3, [r2, #64]	; 0x40
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <HAL_SPI_MspInit+0x88>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_SPI_MspInit+0x88>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a10      	ldr	r2, [pc, #64]	; (80063e4 <HAL_SPI_MspInit+0x88>)
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b0e      	ldr	r3, [pc, #56]	; (80063e4 <HAL_SPI_MspInit+0x88>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80063b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80063ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063bc:	2302      	movs	r3, #2
 80063be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c4:	2303      	movs	r3, #3
 80063c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80063c8:	2306      	movs	r3, #6
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063cc:	f107 0314 	add.w	r3, r7, #20
 80063d0:	4619      	mov	r1, r3
 80063d2:	4805      	ldr	r0, [pc, #20]	; (80063e8 <HAL_SPI_MspInit+0x8c>)
 80063d4:	f000 fcf8 	bl	8006dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80063d8:	bf00      	nop
 80063da:	3728      	adds	r7, #40	; 0x28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40003c00 	.word	0x40003c00
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40020800 	.word	0x40020800

080063ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063f0:	e7fe      	b.n	80063f0 <NMI_Handler+0x4>

080063f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063f2:	b480      	push	{r7}
 80063f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063f6:	e7fe      	b.n	80063f6 <HardFault_Handler+0x4>

080063f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063fc:	e7fe      	b.n	80063fc <MemManage_Handler+0x4>

080063fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063fe:	b480      	push	{r7}
 8006400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006402:	e7fe      	b.n	8006402 <BusFault_Handler+0x4>

08006404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006408:	e7fe      	b.n	8006408 <UsageFault_Handler+0x4>

0800640a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800640a:	b480      	push	{r7}
 800640c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800641c:	bf00      	nop
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006426:	b480      	push	{r7}
 8006428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006438:	f000 faec 	bl	8006a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800643c:	bf00      	nop
 800643e:	bd80      	pop	{r7, pc}

08006440 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8006444:	4802      	ldr	r0, [pc, #8]	; (8006450 <EXTI0_IRQHandler+0x10>)
 8006446:	f000 fc9b 	bl	8006d80 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200009a8 	.word	0x200009a8

08006454 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <EXTI15_10_IRQHandler+0x10>)
 800645a:	f000 fc91 	bl	8006d80 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000054 	.word	0x20000054

08006468 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <BSP_SPI1_Init+0x54>)
 8006474:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <BSP_SPI1_Init+0x58>)
 8006476:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <BSP_SPI1_Init+0x5c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	4911      	ldr	r1, [pc, #68]	; (80064c4 <BSP_SPI1_Init+0x5c>)
 8006480:	600a      	str	r2, [r1, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d114      	bne.n	80064b0 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8006486:	480d      	ldr	r0, [pc, #52]	; (80064bc <BSP_SPI1_Init+0x54>)
 8006488:	f003 fb4d 	bl	8009b26 <HAL_SPI_GetState>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10e      	bne.n	80064b0 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8006492:	480a      	ldr	r0, [pc, #40]	; (80064bc <BSP_SPI1_Init+0x54>)
 8006494:	f000 f87c 	bl	8006590 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d108      	bne.n	80064b0 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800649e:	4807      	ldr	r0, [pc, #28]	; (80064bc <BSP_SPI1_Init+0x54>)
 80064a0:	f000 f83a 	bl	8006518 <MX_SPI1_Init>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80064aa:	f06f 0307 	mvn.w	r3, #7
 80064ae:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80064b0:	687b      	ldr	r3, [r7, #4]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000b48 	.word	0x20000b48
 80064c0:	40013000 	.word	0x40013000
 80064c4:	200003ac 	.word	0x200003ac

080064c8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064e0:	9200      	str	r2, [sp, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	68f9      	ldr	r1, [r7, #12]
 80064e6:	4807      	ldr	r0, [pc, #28]	; (8006504 <BSP_SPI1_SendRecv+0x3c>)
 80064e8:	f003 f97b 	bl	80097e2 <HAL_SPI_TransmitReceive>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80064f2:	f06f 0305 	mvn.w	r3, #5
 80064f6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80064f8:	697b      	ldr	r3, [r7, #20]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000b48 	.word	0x20000b48

08006508 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800650c:	f000 fa96 	bl	8006a3c <HAL_GetTick>
 8006510:	4603      	mov	r3, r0
}
 8006512:	4618      	mov	r0, r3
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a19      	ldr	r2, [pc, #100]	; (800658c <MX_SPI1_Init+0x74>)
 8006528:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006530:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006550:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2228      	movs	r2, #40	; 0x28
 8006556:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	220a      	movs	r2, #10
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 ff71 	bl	8009458 <HAL_SPI_Init>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40013000 	.word	0x40013000

08006590 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	4b2d      	ldr	r3, [pc, #180]	; (8006654 <SPI1_MspInit+0xc4>)
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <SPI1_MspInit+0xc4>)
 80065a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065a6:	6453      	str	r3, [r2, #68]	; 0x44
 80065a8:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <SPI1_MspInit+0xc4>)
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	4b26      	ldr	r3, [pc, #152]	; (8006654 <SPI1_MspInit+0xc4>)
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	4a25      	ldr	r2, [pc, #148]	; (8006654 <SPI1_MspInit+0xc4>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6313      	str	r3, [r2, #48]	; 0x30
 80065c4:	4b23      	ldr	r3, [pc, #140]	; (8006654 <SPI1_MspInit+0xc4>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065d0:	2300      	movs	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <SPI1_MspInit+0xc4>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <SPI1_MspInit+0xc4>)
 80065da:	f043 0302 	orr.w	r3, r3, #2
 80065de:	6313      	str	r3, [r2, #48]	; 0x30
 80065e0:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <SPI1_MspInit+0xc4>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	60bb      	str	r3, [r7, #8]
 80065ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80065ec:	2340      	movs	r3, #64	; 0x40
 80065ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f0:	2302      	movs	r3, #2
 80065f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065f8:	2303      	movs	r3, #3
 80065fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80065fc:	2305      	movs	r3, #5
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	4619      	mov	r1, r3
 8006606:	4814      	ldr	r0, [pc, #80]	; (8006658 <SPI1_MspInit+0xc8>)
 8006608:	f000 fbde 	bl	8006dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006610:	2302      	movs	r3, #2
 8006612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006618:	2303      	movs	r3, #3
 800661a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800661c:	2305      	movs	r3, #5
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4619      	mov	r1, r3
 8006626:	480c      	ldr	r0, [pc, #48]	; (8006658 <SPI1_MspInit+0xc8>)
 8006628:	f000 fbce 	bl	8006dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800662c:	2308      	movs	r3, #8
 800662e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006630:	2302      	movs	r3, #2
 8006632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006638:	2303      	movs	r3, #3
 800663a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800663c:	2305      	movs	r3, #5
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	4619      	mov	r1, r3
 8006646:	4805      	ldr	r0, [pc, #20]	; (800665c <SPI1_MspInit+0xcc>)
 8006648:	f000 fbbe 	bl	8006dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800664c:	bf00      	nop
 800664e:	3728      	adds	r7, #40	; 0x28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40023800 	.word	0x40023800
 8006658:	40020000 	.word	0x40020000
 800665c:	40020400 	.word	0x40020400

08006660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <SystemInit+0x20>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666a:	4a05      	ldr	r2, [pc, #20]	; (8006680 <SystemInit+0x20>)
 800666c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006674:	bf00      	nop
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	e000ed00 	.word	0xe000ed00

08006684 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8006684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006688:	480d      	ldr	r0, [pc, #52]	; (80066c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800668a:	490e      	ldr	r1, [pc, #56]	; (80066c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800668c:	4a0e      	ldr	r2, [pc, #56]	; (80066c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800668e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006690:	e002      	b.n	8006698 <LoopCopyDataInit>

08006692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006696:	3304      	adds	r3, #4

08006698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800669a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800669c:	d3f9      	bcc.n	8006692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800669e:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066a0:	4c0b      	ldr	r4, [pc, #44]	; (80066d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066a4:	e001      	b.n	80066aa <LoopFillZerobss>

080066a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066a8:	3204      	adds	r2, #4

080066aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066ac:	d3fb      	bcc.n	80066a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80066ae:	f7ff ffd7 	bl	8006660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066b2:	f005 f8ed 	bl	800b890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066b6:	f7ff fb6d 	bl	8005d94 <main>
  bx  lr    
 80066ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80066bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80066c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066c4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80066c8:	08072c68 	.word	0x08072c68
  ldr r2, =_sbss
 80066cc:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80066d0:	20000bc4 	.word	0x20000bc4

080066d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066d4:	e7fe      	b.n	80066d4 <ADC_IRQHandler>
	...

080066d8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <BSP_LED_Init+0x20>)
 80066e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ea:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	080727b4 	.word	0x080727b4

080066fc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	4a06      	ldr	r2, [pc, #24]	; (8006724 <BSP_LED_On+0x28>)
 800670a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670e:	2120      	movs	r1, #32
 8006710:	2201      	movs	r2, #1
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fdd8 	bl	80072c8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2000004c 	.word	0x2000004c

08006728 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	4a06      	ldr	r2, [pc, #24]	; (8006750 <BSP_LED_Off+0x28>)
 8006736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673a:	2120      	movs	r1, #32
 800673c:	2200      	movs	r2, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fdc2 	bl	80072c8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	2000004c 	.word	0x2000004c

08006754 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	4a06      	ldr	r2, [pc, #24]	; (800677c <BSP_LED_Toggle+0x28>)
 8006762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006766:	2220      	movs	r2, #32
 8006768:	4611      	mov	r1, r2
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fdc5 	bl	80072fa <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	2000004c 	.word	0x2000004c

08006780 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <LED_USER_GPIO_Init+0x7c>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <LED_USER_GPIO_Init+0x7c>)
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	6313      	str	r3, [r2, #48]	; 0x30
 8006796:	4b19      	ldr	r3, [pc, #100]	; (80067fc <LED_USER_GPIO_Init+0x7c>)
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a2:	f107 030c 	add.w	r3, r7, #12
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	4b11      	ldr	r3, [pc, #68]	; (80067fc <LED_USER_GPIO_Init+0x7c>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	4a10      	ldr	r2, [pc, #64]	; (80067fc <LED_USER_GPIO_Init+0x7c>)
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	6313      	str	r3, [r2, #48]	; 0x30
 80067c2:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <LED_USER_GPIO_Init+0x7c>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	2120      	movs	r1, #32
 80067d2:	480b      	ldr	r0, [pc, #44]	; (8006800 <LED_USER_GPIO_Init+0x80>)
 80067d4:	f000 fd78 	bl	80072c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80067d8:	2320      	movs	r3, #32
 80067da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067dc:	2301      	movs	r3, #1
 80067de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80067e8:	f107 030c 	add.w	r3, r7, #12
 80067ec:	4619      	mov	r1, r3
 80067ee:	4804      	ldr	r0, [pc, #16]	; (8006800 <LED_USER_GPIO_Init+0x80>)
 80067f0:	f000 faea 	bl	8006dc8 <HAL_GPIO_Init>

}
 80067f4:	bf00      	nop
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40023800 	.word	0x40023800
 8006800:	40020000 	.word	0x40020000

08006804 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	460a      	mov	r2, r1
 800680e:	71fb      	strb	r3, [r7, #7]
 8006810:	4613      	mov	r3, r2
 8006812:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	4a1f      	ldr	r2, [pc, #124]	; (8006898 <BSP_PB_Init+0x94>)
 800681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006820:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8006822:	79bb      	ldrb	r3, [r7, #6]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d132      	bne.n	800688e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <BSP_PB_Init+0x98>)
 800682e:	441a      	add	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	491b      	ldr	r1, [pc, #108]	; (80068a0 <BSP_PB_Init+0x9c>)
 8006834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f000 fa8b 	bl	8006d56 <HAL_EXTI_GetHandle>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006846:	f06f 0303 	mvn.w	r3, #3
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e01f      	b.n	800688e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <BSP_PB_Init+0x98>)
 8006854:	1898      	adds	r0, r3, r2
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	4a12      	ldr	r2, [pc, #72]	; (80068a4 <BSP_PB_Init+0xa0>)
 800685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800685e:	461a      	mov	r2, r3
 8006860:	2100      	movs	r1, #0
 8006862:	f000 fa5e 	bl	8006d22 <HAL_EXTI_RegisterCallback>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800686c:	f06f 0303 	mvn.w	r3, #3
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e00c      	b.n	800688e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006874:	2028      	movs	r0, #40	; 0x28
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	4a0b      	ldr	r2, [pc, #44]	; (80068a8 <BSP_PB_Init+0xa4>)
 800687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687e:	2200      	movs	r2, #0
 8006880:	4619      	mov	r1, r3
 8006882:	f000 fa0a 	bl	8006c9a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006886:	2328      	movs	r3, #40	; 0x28
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fa22 	bl	8006cd2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	080727b8 	.word	0x080727b8
 800689c:	20000054 	.word	0x20000054
 80068a0:	080727bc 	.word	0x080727bc
 80068a4:	080727c0 	.word	0x080727c0
 80068a8:	080727c4 	.word	0x080727c4

080068ac <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	4a09      	ldr	r2, [pc, #36]	; (80068e0 <BSP_PB_GetState+0x34>)
 80068ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fce7 	bl	8007298 <HAL_GPIO_ReadPin>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000050 	.word	0x20000050

080068e4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f7fb fc9b 	bl	8002224 <BSP_PB_Callback>
}
 80068ee:	bf00      	nop
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	4b19      	ldr	r3, [pc, #100]	; (8006964 <BUTTON_USER_GPIO_Init+0x70>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	4a18      	ldr	r2, [pc, #96]	; (8006964 <BUTTON_USER_GPIO_Init+0x70>)
 8006904:	f043 0304 	orr.w	r3, r3, #4
 8006908:	6313      	str	r3, [r2, #48]	; 0x30
 800690a:	4b16      	ldr	r3, [pc, #88]	; (8006964 <BUTTON_USER_GPIO_Init+0x70>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006916:	f107 030c 	add.w	r3, r7, #12
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	605a      	str	r2, [r3, #4]
 8006920:	609a      	str	r2, [r3, #8]
 8006922:	60da      	str	r2, [r3, #12]
 8006924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006926:	2300      	movs	r3, #0
 8006928:	607b      	str	r3, [r7, #4]
 800692a:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <BUTTON_USER_GPIO_Init+0x70>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	4a0d      	ldr	r2, [pc, #52]	; (8006964 <BUTTON_USER_GPIO_Init+0x70>)
 8006930:	f043 0304 	orr.w	r3, r3, #4
 8006934:	6313      	str	r3, [r2, #48]	; 0x30
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <BUTTON_USER_GPIO_Init+0x70>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8006942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <BUTTON_USER_GPIO_Init+0x74>)
 800694a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	4619      	mov	r1, r3
 8006956:	4805      	ldr	r0, [pc, #20]	; (800696c <BUTTON_USER_GPIO_Init+0x78>)
 8006958:	f000 fa36 	bl	8006dc8 <HAL_GPIO_Init>

}
 800695c:	bf00      	nop
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40023800 	.word	0x40023800
 8006968:	10210000 	.word	0x10210000
 800696c:	40020800 	.word	0x40020800

08006970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <HAL_Init+0x40>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <HAL_Init+0x40>)
 800697a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800697e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <HAL_Init+0x40>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <HAL_Init+0x40>)
 8006986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800698a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <HAL_Init+0x40>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a07      	ldr	r2, [pc, #28]	; (80069b0 <HAL_Init+0x40>)
 8006992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006998:	2003      	movs	r0, #3
 800699a:	f000 f973 	bl	8006c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800699e:	2000      	movs	r0, #0
 80069a0:	f000 f808 	bl	80069b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069a4:	f7ff fc12 	bl	80061cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40023c00 	.word	0x40023c00

080069b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069bc:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <HAL_InitTick+0x54>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <HAL_InitTick+0x58>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	4619      	mov	r1, r3
 80069c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 f999 	bl	8006d0a <HAL_SYSTICK_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e00e      	b.n	8006a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b0f      	cmp	r3, #15
 80069e6:	d80a      	bhi.n	80069fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069e8:	2200      	movs	r2, #0
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	f000 f953 	bl	8006c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069f4:	4a06      	ldr	r2, [pc, #24]	; (8006a10 <HAL_InitTick+0x5c>)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000048 	.word	0x20000048
 8006a0c:	20000060 	.word	0x20000060
 8006a10:	2000005c 	.word	0x2000005c

08006a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_IncTick+0x20>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <HAL_IncTick+0x24>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4413      	add	r3, r2
 8006a24:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <HAL_IncTick+0x24>)
 8006a26:	6013      	str	r3, [r2, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000060 	.word	0x20000060
 8006a38:	20000ba0 	.word	0x20000ba0

08006a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_GetTick+0x14>)
 8006a42:	681b      	ldr	r3, [r3, #0]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000ba0 	.word	0x20000ba0

08006a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7ff ffee 	bl	8006a3c <HAL_GetTick>
 8006a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d005      	beq.n	8006a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <HAL_Delay+0x44>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a7a:	bf00      	nop
 8006a7c:	f7ff ffde 	bl	8006a3c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d8f7      	bhi.n	8006a7c <HAL_Delay+0x28>
  {
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000060 	.word	0x20000060

08006a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	60d3      	str	r3, [r2, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	e000ed00 	.word	0xe000ed00

08006ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <__NVIC_GetPriorityGrouping+0x18>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	f003 0307 	and.w	r3, r3, #7
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	e000ed00 	.word	0xe000ed00

08006b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	db0b      	blt.n	8006b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	f003 021f 	and.w	r2, r3, #31
 8006b18:	4907      	ldr	r1, [pc, #28]	; (8006b38 <__NVIC_EnableIRQ+0x38>)
 8006b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	2001      	movs	r0, #1
 8006b22:	fa00 f202 	lsl.w	r2, r0, r2
 8006b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000e100 	.word	0xe000e100

08006b3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	db12      	blt.n	8006b74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	f003 021f 	and.w	r2, r3, #31
 8006b54:	490a      	ldr	r1, [pc, #40]	; (8006b80 <__NVIC_DisableIRQ+0x44>)
 8006b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b62:	3320      	adds	r3, #32
 8006b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006b68:	f3bf 8f4f 	dsb	sy
}
 8006b6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b6e:	f3bf 8f6f 	isb	sy
}
 8006b72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	e000e100 	.word	0xe000e100

08006b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	6039      	str	r1, [r7, #0]
 8006b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db0a      	blt.n	8006bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	490c      	ldr	r1, [pc, #48]	; (8006bd0 <__NVIC_SetPriority+0x4c>)
 8006b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba2:	0112      	lsls	r2, r2, #4
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bac:	e00a      	b.n	8006bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4908      	ldr	r1, [pc, #32]	; (8006bd4 <__NVIC_SetPriority+0x50>)
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	3b04      	subs	r3, #4
 8006bbc:	0112      	lsls	r2, r2, #4
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	761a      	strb	r2, [r3, #24]
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	e000e100 	.word	0xe000e100
 8006bd4:	e000ed00 	.word	0xe000ed00

08006bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b089      	sub	sp, #36	; 0x24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f1c3 0307 	rsb	r3, r3, #7
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	bf28      	it	cs
 8006bf6:	2304      	movcs	r3, #4
 8006bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	2b06      	cmp	r3, #6
 8006c00:	d902      	bls.n	8006c08 <NVIC_EncodePriority+0x30>
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	3b03      	subs	r3, #3
 8006c06:	e000      	b.n	8006c0a <NVIC_EncodePriority+0x32>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	43da      	mvns	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c20:	f04f 31ff 	mov.w	r1, #4294967295
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2a:	43d9      	mvns	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c30:	4313      	orrs	r3, r2
         );
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c50:	d301      	bcc.n	8006c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c52:	2301      	movs	r3, #1
 8006c54:	e00f      	b.n	8006c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c56:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <SysTick_Config+0x40>)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c5e:	210f      	movs	r1, #15
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	f7ff ff8e 	bl	8006b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <SysTick_Config+0x40>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <SysTick_Config+0x40>)
 8006c70:	2207      	movs	r2, #7
 8006c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	e000e010 	.word	0xe000e010

08006c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff05 	bl	8006a9c <__NVIC_SetPriorityGrouping>
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006cac:	f7ff ff1a 	bl	8006ae4 <__NVIC_GetPriorityGrouping>
 8006cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	6978      	ldr	r0, [r7, #20]
 8006cb8:	f7ff ff8e 	bl	8006bd8 <NVIC_EncodePriority>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff ff5d 	bl	8006b84 <__NVIC_SetPriority>
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	4603      	mov	r3, r0
 8006cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ff0d 	bl	8006b00 <__NVIC_EnableIRQ>
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff1d 	bl	8006b3c <__NVIC_DisableIRQ>
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ff94 	bl	8006c40 <SysTick_Config>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	605a      	str	r2, [r3, #4]
      break;
 8006d40:	e002      	b.n	8006d48 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
      break;
 8006d46:	bf00      	nop
  }

  return status;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e003      	b.n	8006d72 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006d70:	2300      	movs	r3, #0
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2201      	movs	r2, #1
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <HAL_EXTI_IRQHandler+0x44>)
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006da8:	4a06      	ldr	r2, [pc, #24]	; (8006dc4 <HAL_EXTI_IRQHandler+0x44>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4798      	blx	r3
    }
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40013c00 	.word	0x40013c00

08006dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b089      	sub	sp, #36	; 0x24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	e159      	b.n	8007098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006de4:	2201      	movs	r2, #1
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4013      	ands	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	f040 8148 	bne.w	8007092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d005      	beq.n	8006e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d130      	bne.n	8006e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	2203      	movs	r2, #3
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e50:	2201      	movs	r2, #1
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	fa02 f303 	lsl.w	r3, r2, r3
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	f003 0201 	and.w	r2, r3, #1
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d017      	beq.n	8006eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	2203      	movs	r2, #3
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d123      	bne.n	8006f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	08da      	lsrs	r2, r3, #3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3208      	adds	r2, #8
 8006ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	220f      	movs	r2, #15
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	08da      	lsrs	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3208      	adds	r2, #8
 8006f06:	69b9      	ldr	r1, [r7, #24]
 8006f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	2203      	movs	r2, #3
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4013      	ands	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f003 0203 	and.w	r2, r3, #3
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80a2 	beq.w	8007092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	4b57      	ldr	r3, [pc, #348]	; (80070b0 <HAL_GPIO_Init+0x2e8>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	4a56      	ldr	r2, [pc, #344]	; (80070b0 <HAL_GPIO_Init+0x2e8>)
 8006f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f5e:	4b54      	ldr	r3, [pc, #336]	; (80070b0 <HAL_GPIO_Init+0x2e8>)
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f6a:	4a52      	ldr	r2, [pc, #328]	; (80070b4 <HAL_GPIO_Init+0x2ec>)
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	3302      	adds	r3, #2
 8006f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	220f      	movs	r2, #15
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43db      	mvns	r3, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a49      	ldr	r2, [pc, #292]	; (80070b8 <HAL_GPIO_Init+0x2f0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d019      	beq.n	8006fca <HAL_GPIO_Init+0x202>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a48      	ldr	r2, [pc, #288]	; (80070bc <HAL_GPIO_Init+0x2f4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_GPIO_Init+0x1fe>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_GPIO_Init+0x2f8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_GPIO_Init+0x1fa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <HAL_GPIO_Init+0x2fc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <HAL_GPIO_Init+0x1f6>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a45      	ldr	r2, [pc, #276]	; (80070c8 <HAL_GPIO_Init+0x300>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d101      	bne.n	8006fba <HAL_GPIO_Init+0x1f2>
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	e008      	b.n	8006fcc <HAL_GPIO_Init+0x204>
 8006fba:	2307      	movs	r3, #7
 8006fbc:	e006      	b.n	8006fcc <HAL_GPIO_Init+0x204>
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e004      	b.n	8006fcc <HAL_GPIO_Init+0x204>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e002      	b.n	8006fcc <HAL_GPIO_Init+0x204>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <HAL_GPIO_Init+0x204>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	f002 0203 	and.w	r2, r2, #3
 8006fd2:	0092      	lsls	r2, r2, #2
 8006fd4:	4093      	lsls	r3, r2
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fdc:	4935      	ldr	r1, [pc, #212]	; (80070b4 <HAL_GPIO_Init+0x2ec>)
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	089b      	lsrs	r3, r3, #2
 8006fe2:	3302      	adds	r3, #2
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fea:	4b38      	ldr	r3, [pc, #224]	; (80070cc <HAL_GPIO_Init+0x304>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800700e:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <HAL_GPIO_Init+0x304>)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007014:	4b2d      	ldr	r3, [pc, #180]	; (80070cc <HAL_GPIO_Init+0x304>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	43db      	mvns	r3, r3
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4013      	ands	r3, r2
 8007022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007038:	4a24      	ldr	r2, [pc, #144]	; (80070cc <HAL_GPIO_Init+0x304>)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703e:	4b23      	ldr	r3, [pc, #140]	; (80070cc <HAL_GPIO_Init+0x304>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	43db      	mvns	r3, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4013      	ands	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007062:	4a1a      	ldr	r2, [pc, #104]	; (80070cc <HAL_GPIO_Init+0x304>)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007068:	4b18      	ldr	r3, [pc, #96]	; (80070cc <HAL_GPIO_Init+0x304>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	43db      	mvns	r3, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4013      	ands	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800708c:	4a0f      	ldr	r2, [pc, #60]	; (80070cc <HAL_GPIO_Init+0x304>)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	3301      	adds	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b0f      	cmp	r3, #15
 800709c:	f67f aea2 	bls.w	8006de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3724      	adds	r7, #36	; 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40013800 	.word	0x40013800
 80070b8:	40020000 	.word	0x40020000
 80070bc:	40020400 	.word	0x40020400
 80070c0:	40020800 	.word	0x40020800
 80070c4:	40020c00 	.word	0x40020c00
 80070c8:	40021000 	.word	0x40021000
 80070cc:	40013c00 	.word	0x40013c00

080070d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	e0bb      	b.n	8007264 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070ec:	2201      	movs	r2, #1
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	4013      	ands	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	429a      	cmp	r2, r3
 8007104:	f040 80ab 	bne.w	800725e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007108:	4a5c      	ldr	r2, [pc, #368]	; (800727c <HAL_GPIO_DeInit+0x1ac>)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	089b      	lsrs	r3, r3, #2
 800710e:	3302      	adds	r3, #2
 8007110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007114:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	220f      	movs	r2, #15
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	4013      	ands	r3, r2
 8007128:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a54      	ldr	r2, [pc, #336]	; (8007280 <HAL_GPIO_DeInit+0x1b0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d019      	beq.n	8007166 <HAL_GPIO_DeInit+0x96>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a53      	ldr	r2, [pc, #332]	; (8007284 <HAL_GPIO_DeInit+0x1b4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <HAL_GPIO_DeInit+0x92>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a52      	ldr	r2, [pc, #328]	; (8007288 <HAL_GPIO_DeInit+0x1b8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00d      	beq.n	800715e <HAL_GPIO_DeInit+0x8e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a51      	ldr	r2, [pc, #324]	; (800728c <HAL_GPIO_DeInit+0x1bc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d007      	beq.n	800715a <HAL_GPIO_DeInit+0x8a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a50      	ldr	r2, [pc, #320]	; (8007290 <HAL_GPIO_DeInit+0x1c0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d101      	bne.n	8007156 <HAL_GPIO_DeInit+0x86>
 8007152:	2304      	movs	r3, #4
 8007154:	e008      	b.n	8007168 <HAL_GPIO_DeInit+0x98>
 8007156:	2307      	movs	r3, #7
 8007158:	e006      	b.n	8007168 <HAL_GPIO_DeInit+0x98>
 800715a:	2303      	movs	r3, #3
 800715c:	e004      	b.n	8007168 <HAL_GPIO_DeInit+0x98>
 800715e:	2302      	movs	r3, #2
 8007160:	e002      	b.n	8007168 <HAL_GPIO_DeInit+0x98>
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <HAL_GPIO_DeInit+0x98>
 8007166:	2300      	movs	r3, #0
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	f002 0203 	and.w	r2, r2, #3
 800716e:	0092      	lsls	r2, r2, #2
 8007170:	4093      	lsls	r3, r2
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	429a      	cmp	r2, r3
 8007176:	d132      	bne.n	80071de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007178:	4b46      	ldr	r3, [pc, #280]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	43db      	mvns	r3, r3
 8007180:	4944      	ldr	r1, [pc, #272]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 8007182:	4013      	ands	r3, r2
 8007184:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007186:	4b43      	ldr	r3, [pc, #268]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	43db      	mvns	r3, r3
 800718e:	4941      	ldr	r1, [pc, #260]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 8007190:	4013      	ands	r3, r2
 8007192:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007194:	4b3f      	ldr	r3, [pc, #252]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	43db      	mvns	r3, r3
 800719c:	493d      	ldr	r1, [pc, #244]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 800719e:	4013      	ands	r3, r2
 80071a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80071a2:	4b3c      	ldr	r3, [pc, #240]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	493a      	ldr	r1, [pc, #232]	; (8007294 <HAL_GPIO_DeInit+0x1c4>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	220f      	movs	r2, #15
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80071c0:	4a2e      	ldr	r2, [pc, #184]	; (800727c <HAL_GPIO_DeInit+0x1ac>)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	3302      	adds	r3, #2
 80071c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	43da      	mvns	r2, r3
 80071d0:	482a      	ldr	r0, [pc, #168]	; (800727c <HAL_GPIO_DeInit+0x1ac>)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	089b      	lsrs	r3, r3, #2
 80071d6:	400a      	ands	r2, r1
 80071d8:	3302      	adds	r3, #2
 80071da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	2103      	movs	r1, #3
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	43db      	mvns	r3, r3
 80071ee:	401a      	ands	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	08da      	lsrs	r2, r3, #3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3208      	adds	r2, #8
 80071fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	220f      	movs	r2, #15
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	43db      	mvns	r3, r3
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	08d2      	lsrs	r2, r2, #3
 8007214:	4019      	ands	r1, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3208      	adds	r2, #8
 800721a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	2103      	movs	r1, #3
 8007228:	fa01 f303 	lsl.w	r3, r1, r3
 800722c:	43db      	mvns	r3, r3
 800722e:	401a      	ands	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	2101      	movs	r1, #1
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	43db      	mvns	r3, r3
 8007242:	401a      	ands	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	2103      	movs	r1, #3
 8007252:	fa01 f303 	lsl.w	r3, r1, r3
 8007256:	43db      	mvns	r3, r3
 8007258:	401a      	ands	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3301      	adds	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b0f      	cmp	r3, #15
 8007268:	f67f af40 	bls.w	80070ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40013800 	.word	0x40013800
 8007280:	40020000 	.word	0x40020000
 8007284:	40020400 	.word	0x40020400
 8007288:	40020800 	.word	0x40020800
 800728c:	40020c00 	.word	0x40020c00
 8007290:	40021000 	.word	0x40021000
 8007294:	40013c00 	.word	0x40013c00

08007298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	887b      	ldrh	r3, [r7, #2]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
 80072b4:	e001      	b.n	80072ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	807b      	strh	r3, [r7, #2]
 80072d4:	4613      	mov	r3, r2
 80072d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072d8:	787b      	ldrb	r3, [r7, #1]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072de:	887a      	ldrh	r2, [r7, #2]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80072e4:	e003      	b.n	80072ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80072e6:	887b      	ldrh	r3, [r7, #2]
 80072e8:	041a      	lsls	r2, r3, #16
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	619a      	str	r2, [r3, #24]
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800730c:	887a      	ldrh	r2, [r7, #2]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4013      	ands	r3, r2
 8007312:	041a      	lsls	r2, r3, #16
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	43d9      	mvns	r1, r3
 8007318:	887b      	ldrh	r3, [r7, #2]
 800731a:	400b      	ands	r3, r1
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	619a      	str	r2, [r3, #24]
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e12b      	b.n	800759a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fe ff60 	bl	800621c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2224      	movs	r2, #36	; 0x24
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0201 	bic.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007394:	f002 f84c 	bl	8009430 <HAL_RCC_GetPCLK1Freq>
 8007398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4a81      	ldr	r2, [pc, #516]	; (80075a4 <HAL_I2C_Init+0x274>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d807      	bhi.n	80073b4 <HAL_I2C_Init+0x84>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4a80      	ldr	r2, [pc, #512]	; (80075a8 <HAL_I2C_Init+0x278>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	bf94      	ite	ls
 80073ac:	2301      	movls	r3, #1
 80073ae:	2300      	movhi	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	e006      	b.n	80073c2 <HAL_I2C_Init+0x92>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a7d      	ldr	r2, [pc, #500]	; (80075ac <HAL_I2C_Init+0x27c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	bf94      	ite	ls
 80073bc:	2301      	movls	r3, #1
 80073be:	2300      	movhi	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e0e7      	b.n	800759a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a78      	ldr	r2, [pc, #480]	; (80075b0 <HAL_I2C_Init+0x280>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	0c9b      	lsrs	r3, r3, #18
 80073d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4a6a      	ldr	r2, [pc, #424]	; (80075a4 <HAL_I2C_Init+0x274>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d802      	bhi.n	8007404 <HAL_I2C_Init+0xd4>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	3301      	adds	r3, #1
 8007402:	e009      	b.n	8007418 <HAL_I2C_Init+0xe8>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	4a69      	ldr	r2, [pc, #420]	; (80075b4 <HAL_I2C_Init+0x284>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	099b      	lsrs	r3, r3, #6
 8007416:	3301      	adds	r3, #1
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6812      	ldr	r2, [r2, #0]
 800741c:	430b      	orrs	r3, r1
 800741e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800742a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	495c      	ldr	r1, [pc, #368]	; (80075a4 <HAL_I2C_Init+0x274>)
 8007434:	428b      	cmp	r3, r1
 8007436:	d819      	bhi.n	800746c <HAL_I2C_Init+0x13c>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	1e59      	subs	r1, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	fbb1 f3f3 	udiv	r3, r1, r3
 8007446:	1c59      	adds	r1, r3, #1
 8007448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800744c:	400b      	ands	r3, r1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_I2C_Init+0x138>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1e59      	subs	r1, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007460:	3301      	adds	r3, #1
 8007462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007466:	e051      	b.n	800750c <HAL_I2C_Init+0x1dc>
 8007468:	2304      	movs	r3, #4
 800746a:	e04f      	b.n	800750c <HAL_I2C_Init+0x1dc>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d111      	bne.n	8007498 <HAL_I2C_Init+0x168>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1e58      	subs	r0, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6859      	ldr	r1, [r3, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	440b      	add	r3, r1
 8007482:	fbb0 f3f3 	udiv	r3, r0, r3
 8007486:	3301      	adds	r3, #1
 8007488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e012      	b.n	80074be <HAL_I2C_Init+0x18e>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	1e58      	subs	r0, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6859      	ldr	r1, [r3, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	0099      	lsls	r1, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80074ae:	3301      	adds	r3, #1
 80074b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bf0c      	ite	eq
 80074b8:	2301      	moveq	r3, #1
 80074ba:	2300      	movne	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <HAL_I2C_Init+0x196>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e022      	b.n	800750c <HAL_I2C_Init+0x1dc>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10e      	bne.n	80074ec <HAL_I2C_Init+0x1bc>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1e58      	subs	r0, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	440b      	add	r3, r1
 80074dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80074e0:	3301      	adds	r3, #1
 80074e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ea:	e00f      	b.n	800750c <HAL_I2C_Init+0x1dc>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	1e58      	subs	r0, r3, #1
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6859      	ldr	r1, [r3, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	0099      	lsls	r1, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007502:	3301      	adds	r3, #1
 8007504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	6809      	ldr	r1, [r1, #0]
 8007510:	4313      	orrs	r3, r2
 8007512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69da      	ldr	r2, [r3, #28]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800753a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6911      	ldr	r1, [r2, #16]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68d2      	ldr	r2, [r2, #12]
 8007546:	4311      	orrs	r1, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	430b      	orrs	r3, r1
 800754e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	000186a0 	.word	0x000186a0
 80075a8:	001e847f 	.word	0x001e847f
 80075ac:	003d08ff 	.word	0x003d08ff
 80075b0:	431bde83 	.word	0x431bde83
 80075b4:	10624dd3 	.word	0x10624dd3

080075b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	461a      	mov	r2, r3
 80075c4:	460b      	mov	r3, r1
 80075c6:	817b      	strh	r3, [r7, #10]
 80075c8:	4613      	mov	r3, r2
 80075ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075cc:	f7ff fa36 	bl	8006a3c <HAL_GetTick>
 80075d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b20      	cmp	r3, #32
 80075dc:	f040 80e0 	bne.w	80077a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	2319      	movs	r3, #25
 80075e6:	2201      	movs	r2, #1
 80075e8:	4970      	ldr	r1, [pc, #448]	; (80077ac <HAL_I2C_Master_Transmit+0x1f4>)
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f001 f8f6 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
 80075f8:	e0d3      	b.n	80077a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_I2C_Master_Transmit+0x50>
 8007604:	2302      	movs	r3, #2
 8007606:	e0cc      	b.n	80077a2 <HAL_I2C_Master_Transmit+0x1ea>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b01      	cmp	r3, #1
 800761c:	d007      	beq.n	800762e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800763c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2221      	movs	r2, #33	; 0x21
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2210      	movs	r2, #16
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	893a      	ldrh	r2, [r7, #8]
 800765e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a50      	ldr	r2, [pc, #320]	; (80077b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800766e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007670:	8979      	ldrh	r1, [r7, #10]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fde2 	bl	8008240 <I2C_MasterRequestWrite>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e08d      	b.n	80077a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	613b      	str	r3, [r7, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800769c:	e066      	b.n	800776c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	6a39      	ldr	r1, [r7, #32]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f001 f970 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00d      	beq.n	80076ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d107      	bne.n	80076c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e06b      	b.n	80077a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d11b      	bne.n	8007740 <HAL_I2C_Master_Transmit+0x188>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770c:	2b00      	cmp	r3, #0
 800770e:	d017      	beq.n	8007740 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	6a39      	ldr	r1, [r7, #32]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f001 f960 	bl	8008a0a <I2C_WaitOnBTFFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00d      	beq.n	800776c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	2b04      	cmp	r3, #4
 8007756:	d107      	bne.n	8007768 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007766:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e01a      	b.n	80077a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007770:	2b00      	cmp	r3, #0
 8007772:	d194      	bne.n	800769e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	e000      	b.n	80077a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80077a0:	2302      	movs	r3, #2
  }
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	00100002 	.word	0x00100002
 80077b0:	ffff0000 	.word	0xffff0000

080077b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08c      	sub	sp, #48	; 0x30
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	607a      	str	r2, [r7, #4]
 80077be:	461a      	mov	r2, r3
 80077c0:	460b      	mov	r3, r1
 80077c2:	817b      	strh	r3, [r7, #10]
 80077c4:	4613      	mov	r3, r2
 80077c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077c8:	f7ff f938 	bl	8006a3c <HAL_GetTick>
 80077cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	f040 820b 	bne.w	8007bf2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2319      	movs	r3, #25
 80077e2:	2201      	movs	r2, #1
 80077e4:	497c      	ldr	r1, [pc, #496]	; (80079d8 <HAL_I2C_Master_Receive+0x224>)
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fff8 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80077f2:	2302      	movs	r3, #2
 80077f4:	e1fe      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_I2C_Master_Receive+0x50>
 8007800:	2302      	movs	r3, #2
 8007802:	e1f7      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b01      	cmp	r3, #1
 8007818:	d007      	beq.n	800782a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0201 	orr.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007838:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2222      	movs	r2, #34	; 0x22
 800783e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2210      	movs	r2, #16
 8007846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	893a      	ldrh	r2, [r7, #8]
 800785a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a5c      	ldr	r2, [pc, #368]	; (80079dc <HAL_I2C_Master_Receive+0x228>)
 800786a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800786c:	8979      	ldrh	r1, [r7, #10]
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fd66 	bl	8008344 <I2C_MasterRequestRead>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e1b8      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d113      	bne.n	80078b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	623b      	str	r3, [r7, #32]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	623b      	str	r3, [r7, #32]
 800789e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	e18c      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d11b      	bne.n	80078f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e16c      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d11b      	bne.n	8007932 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800791a:	2300      	movs	r3, #0
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	e14c      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007958:	e138      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795e:	2b03      	cmp	r3, #3
 8007960:	f200 80f1 	bhi.w	8007b46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007968:	2b01      	cmp	r3, #1
 800796a:	d123      	bne.n	80079b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f001 f88b 	bl	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e139      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079b2:	e10b      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d14e      	bne.n	8007a5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	2200      	movs	r2, #0
 80079c4:	4906      	ldr	r1, [pc, #24]	; (80079e0 <HAL_I2C_Master_Receive+0x22c>)
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 ff08 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e10e      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
 80079d6:	bf00      	nop
 80079d8:	00100002 	.word	0x00100002
 80079dc:	ffff0000 	.word	0xffff0000
 80079e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a58:	e0b8      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2200      	movs	r2, #0
 8007a62:	4966      	ldr	r1, [pc, #408]	; (8007bfc <HAL_I2C_Master_Receive+0x448>)
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 feb9 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0bf      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	2200      	movs	r2, #0
 8007abe:	494f      	ldr	r1, [pc, #316]	; (8007bfc <HAL_I2C_Master_Receive+0x448>)
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fe8b 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e091      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b44:	e042      	b.n	8007bcc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 ff9e 	bl	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e04c      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d118      	bne.n	8007bcc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f47f aec2 	bne.w	800795a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3728      	adds	r7, #40	; 0x28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	00010004 	.word	0x00010004

08007c00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	817b      	strh	r3, [r7, #10]
 8007c12:	460b      	mov	r3, r1
 8007c14:	813b      	strh	r3, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c1a:	f7fe ff0f 	bl	8006a3c <HAL_GetTick>
 8007c1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	f040 80d9 	bne.w	8007de0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2319      	movs	r3, #25
 8007c34:	2201      	movs	r2, #1
 8007c36:	496d      	ldr	r1, [pc, #436]	; (8007dec <HAL_I2C_Mem_Write+0x1ec>)
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fdcf 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
 8007c46:	e0cc      	b.n	8007de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_I2C_Mem_Write+0x56>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e0c5      	b.n	8007de2 <HAL_I2C_Mem_Write+0x1e2>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d007      	beq.n	8007c7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2221      	movs	r2, #33	; 0x21
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2240      	movs	r2, #64	; 0x40
 8007c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a3a      	ldr	r2, [r7, #32]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4a4d      	ldr	r2, [pc, #308]	; (8007df0 <HAL_I2C_Mem_Write+0x1f0>)
 8007cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cbe:	88f8      	ldrh	r0, [r7, #6]
 8007cc0:	893a      	ldrh	r2, [r7, #8]
 8007cc2:	8979      	ldrh	r1, [r7, #10]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4603      	mov	r3, r0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fc06 	bl	80084e0 <I2C_RequestMemoryWrite>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d052      	beq.n	8007d80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e081      	b.n	8007de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fe50 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d107      	bne.n	8007d06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e06b      	b.n	8007de2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d11b      	bne.n	8007d80 <HAL_I2C_Mem_Write+0x180>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	781a      	ldrb	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1aa      	bne.n	8007cde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fe3c 	bl	8008a0a <I2C_WaitOnBTFFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d107      	bne.n	8007db0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e016      	b.n	8007de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e000      	b.n	8007de2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007de0:	2302      	movs	r3, #2
  }
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	00100002 	.word	0x00100002
 8007df0:	ffff0000 	.word	0xffff0000

08007df4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	; 0x30
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	461a      	mov	r2, r3
 8007e02:	4603      	mov	r3, r0
 8007e04:	817b      	strh	r3, [r7, #10]
 8007e06:	460b      	mov	r3, r1
 8007e08:	813b      	strh	r3, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e0e:	f7fe fe15 	bl	8006a3c <HAL_GetTick>
 8007e12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	f040 8208 	bne.w	8008232 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	2319      	movs	r3, #25
 8007e28:	2201      	movs	r2, #1
 8007e2a:	497b      	ldr	r1, [pc, #492]	; (8008018 <HAL_I2C_Mem_Read+0x224>)
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fcd5 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e1fb      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <HAL_I2C_Mem_Read+0x56>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e1f4      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d007      	beq.n	8007e70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2222      	movs	r2, #34	; 0x22
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2240      	movs	r2, #64	; 0x40
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a5b      	ldr	r2, [pc, #364]	; (800801c <HAL_I2C_Mem_Read+0x228>)
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007eb2:	88f8      	ldrh	r0, [r7, #6]
 8007eb4:	893a      	ldrh	r2, [r7, #8]
 8007eb6:	8979      	ldrh	r1, [r7, #10]
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fba2 	bl	800860c <I2C_RequestMemoryRead>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e1b0      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d113      	bne.n	8007f02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eda:	2300      	movs	r3, #0
 8007edc:	623b      	str	r3, [r7, #32]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	623b      	str	r3, [r7, #32]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	623b      	str	r3, [r7, #32]
 8007eee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	e184      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d11b      	bne.n	8007f42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61fb      	str	r3, [r7, #28]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	61fb      	str	r3, [r7, #28]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e164      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d11b      	bne.n	8007f82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	61bb      	str	r3, [r7, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	e144      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007f98:	e138      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	f200 80f1 	bhi.w	8008186 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d123      	bne.n	8007ff4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fd6b 	bl	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e139      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691a      	ldr	r2, [r3, #16]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ff2:	e10b      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d14e      	bne.n	800809a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	2200      	movs	r2, #0
 8008004:	4906      	ldr	r1, [pc, #24]	; (8008020 <HAL_I2C_Mem_Read+0x22c>)
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fbe8 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e10e      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
 8008016:	bf00      	nop
 8008018:	00100002 	.word	0x00100002
 800801c:	ffff0000 	.word	0xffff0000
 8008020:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008098:	e0b8      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	2200      	movs	r2, #0
 80080a2:	4966      	ldr	r1, [pc, #408]	; (800823c <HAL_I2C_Mem_Read+0x448>)
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fb99 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0bf      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	2200      	movs	r2, #0
 80080fe:	494f      	ldr	r1, [pc, #316]	; (800823c <HAL_I2C_Mem_Read+0x448>)
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fb6b 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e091      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800811e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008184:	e042      	b.n	800820c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fc7e 	bl	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e04c      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d118      	bne.n	800820c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008202:	b29b      	uxth	r3, r3
 8008204:	3b01      	subs	r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008210:	2b00      	cmp	r3, #0
 8008212:	f47f aec2 	bne.w	8007f9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3728      	adds	r7, #40	; 0x28
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	00010004 	.word	0x00010004

08008240 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	460b      	mov	r3, r1
 800824e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b08      	cmp	r3, #8
 800825a:	d006      	beq.n	800826a <I2C_MasterRequestWrite+0x2a>
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d003      	beq.n	800826a <I2C_MasterRequestWrite+0x2a>
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008268:	d108      	bne.n	800827c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e00b      	b.n	8008294 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	2b12      	cmp	r3, #18
 8008282:	d107      	bne.n	8008294 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008292:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fa9b 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00d      	beq.n	80082c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	d103      	bne.n	80082c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e035      	b.n	8008334 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d0:	d108      	bne.n	80082e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082d2:	897b      	ldrh	r3, [r7, #10]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	461a      	mov	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082e0:	611a      	str	r2, [r3, #16]
 80082e2:	e01b      	b.n	800831c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80082e4:	897b      	ldrh	r3, [r7, #10]
 80082e6:	11db      	asrs	r3, r3, #7
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 0306 	and.w	r3, r3, #6
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f063 030f 	orn	r3, r3, #15
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	490e      	ldr	r1, [pc, #56]	; (800833c <I2C_MasterRequestWrite+0xfc>)
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fac1 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e010      	b.n	8008334 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008312:	897b      	ldrh	r3, [r7, #10]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	4907      	ldr	r1, [pc, #28]	; (8008340 <I2C_MasterRequestWrite+0x100>)
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fab1 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	00010008 	.word	0x00010008
 8008340:	00010002 	.word	0x00010002

08008344 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	607a      	str	r2, [r7, #4]
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	460b      	mov	r3, r1
 8008352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008368:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2b08      	cmp	r3, #8
 800836e:	d006      	beq.n	800837e <I2C_MasterRequestRead+0x3a>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d003      	beq.n	800837e <I2C_MasterRequestRead+0x3a>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800837c:	d108      	bne.n	8008390 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e00b      	b.n	80083a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	2b11      	cmp	r3, #17
 8008396:	d107      	bne.n	80083a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fa11 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00d      	beq.n	80083dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ce:	d103      	bne.n	80083d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e079      	b.n	80084d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083e4:	d108      	bne.n	80083f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083e6:	897b      	ldrh	r3, [r7, #10]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	611a      	str	r2, [r3, #16]
 80083f6:	e05f      	b.n	80084b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083f8:	897b      	ldrh	r3, [r7, #10]
 80083fa:	11db      	asrs	r3, r3, #7
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 0306 	and.w	r3, r3, #6
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f063 030f 	orn	r3, r3, #15
 8008408:	b2da      	uxtb	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4930      	ldr	r1, [pc, #192]	; (80084d8 <I2C_MasterRequestRead+0x194>)
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fa37 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e054      	b.n	80084d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008426:	897b      	ldrh	r3, [r7, #10]
 8008428:	b2da      	uxtb	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	4929      	ldr	r1, [pc, #164]	; (80084dc <I2C_MasterRequestRead+0x198>)
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fa27 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e044      	b.n	80084d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800846a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f9af 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00d      	beq.n	80084a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008492:	d103      	bne.n	800849c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800849a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e017      	b.n	80084d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80084a0:	897b      	ldrh	r3, [r7, #10]
 80084a2:	11db      	asrs	r3, r3, #7
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	f003 0306 	and.w	r3, r3, #6
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f063 030e 	orn	r3, r3, #14
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	4907      	ldr	r1, [pc, #28]	; (80084dc <I2C_MasterRequestRead+0x198>)
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 f9e3 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	00010008 	.word	0x00010008
 80084dc:	00010002 	.word	0x00010002

080084e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	817b      	strh	r3, [r7, #10]
 80084f2:	460b      	mov	r3, r1
 80084f4:	813b      	strh	r3, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008508:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	2200      	movs	r2, #0
 8008512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f960 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00d      	beq.n	800853e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008530:	d103      	bne.n	800853a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008538:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e05f      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800853e:	897b      	ldrh	r3, [r7, #10]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800854c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	6a3a      	ldr	r2, [r7, #32]
 8008552:	492d      	ldr	r1, [pc, #180]	; (8008608 <I2C_RequestMemoryWrite+0x128>)
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f998 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e04c      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857c:	6a39      	ldr	r1, [r7, #32]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fa02 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	2b04      	cmp	r3, #4
 8008590:	d107      	bne.n	80085a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e02b      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d105      	bne.n	80085b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085ac:	893b      	ldrh	r3, [r7, #8]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	611a      	str	r2, [r3, #16]
 80085b6:	e021      	b.n	80085fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085b8:	893b      	ldrh	r3, [r7, #8]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c8:	6a39      	ldr	r1, [r7, #32]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f9dc 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d107      	bne.n	80085ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e005      	b.n	80085fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085f2:	893b      	ldrh	r3, [r7, #8]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	00010002 	.word	0x00010002

0800860c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af02      	add	r7, sp, #8
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	4608      	mov	r0, r1
 8008616:	4611      	mov	r1, r2
 8008618:	461a      	mov	r2, r3
 800861a:	4603      	mov	r3, r0
 800861c:	817b      	strh	r3, [r7, #10]
 800861e:	460b      	mov	r3, r1
 8008620:	813b      	strh	r3, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008634:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	2200      	movs	r2, #0
 800864e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 f8c2 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866c:	d103      	bne.n	8008676 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e0aa      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800867a:	897b      	ldrh	r3, [r7, #10]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	461a      	mov	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	6a3a      	ldr	r2, [r7, #32]
 800868e:	4952      	ldr	r1, [pc, #328]	; (80087d8 <I2C_RequestMemoryRead+0x1cc>)
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f8fa 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e097      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b8:	6a39      	ldr	r1, [r7, #32]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f964 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d107      	bne.n	80086de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e076      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d105      	bne.n	80086f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086e8:	893b      	ldrh	r3, [r7, #8]
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	611a      	str	r2, [r3, #16]
 80086f2:	e021      	b.n	8008738 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086f4:	893b      	ldrh	r3, [r7, #8]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008704:	6a39      	ldr	r1, [r7, #32]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 f93e 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00d      	beq.n	800872e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	2b04      	cmp	r3, #4
 8008718:	d107      	bne.n	800872a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e050      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800872e:	893b      	ldrh	r3, [r7, #8]
 8008730:	b2da      	uxtb	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	6a39      	ldr	r1, [r7, #32]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f923 	bl	8008988 <I2C_WaitOnTXEFlagUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00d      	beq.n	8008764 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	2b04      	cmp	r3, #4
 800874e:	d107      	bne.n	8008760 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e035      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008772:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2200      	movs	r2, #0
 800877c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f82b 	bl	80087dc <I2C_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879a:	d103      	bne.n	80087a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e013      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087a8:	897b      	ldrh	r3, [r7, #10]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	6a3a      	ldr	r2, [r7, #32]
 80087bc:	4906      	ldr	r1, [pc, #24]	; (80087d8 <I2C_RequestMemoryRead+0x1cc>)
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 f863 	bl	800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	00010002 	.word	0x00010002

080087dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ec:	e025      	b.n	800883a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f4:	d021      	beq.n	800883a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f6:	f7fe f921 	bl	8006a3c <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d302      	bcc.n	800880c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d116      	bne.n	800883a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	f043 0220 	orr.w	r2, r3, #32
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e023      	b.n	8008882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	d10d      	bne.n	8008860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	43da      	mvns	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4013      	ands	r3, r2
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	bf0c      	ite	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	2300      	movne	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	e00c      	b.n	800887a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	43da      	mvns	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4013      	ands	r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf0c      	ite	eq
 8008872:	2301      	moveq	r3, #1
 8008874:	2300      	movne	r3, #0
 8008876:	b2db      	uxtb	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	429a      	cmp	r2, r3
 800887e:	d0b6      	beq.n	80087ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
 8008896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008898:	e051      	b.n	800893e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a8:	d123      	bne.n	80088f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	f043 0204 	orr.w	r2, r3, #4
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e046      	b.n	8008980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d021      	beq.n	800893e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fa:	f7fe f89f 	bl	8006a3c <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d116      	bne.n	800893e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e020      	b.n	8008980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	d10c      	bne.n	8008962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	43da      	mvns	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4013      	ands	r3, r2
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf14      	ite	ne
 800895a:	2301      	movne	r3, #1
 800895c:	2300      	moveq	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	e00b      	b.n	800897a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	43da      	mvns	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4013      	ands	r3, r2
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	bf14      	ite	ne
 8008974:	2301      	movne	r3, #1
 8008976:	2300      	moveq	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d18d      	bne.n	800889a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008994:	e02d      	b.n	80089f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f8ce 	bl	8008b38 <I2C_IsAcknowledgeFailed>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e02d      	b.n	8008a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ac:	d021      	beq.n	80089f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ae:	f7fe f845 	bl	8006a3c <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d302      	bcc.n	80089c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d116      	bne.n	80089f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	f043 0220 	orr.w	r2, r3, #32
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e007      	b.n	8008a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fc:	2b80      	cmp	r3, #128	; 0x80
 80089fe:	d1ca      	bne.n	8008996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a16:	e02d      	b.n	8008a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 f88d 	bl	8008b38 <I2C_IsAcknowledgeFailed>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e02d      	b.n	8008a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d021      	beq.n	8008a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a30:	f7fe f804 	bl	8006a3c <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d116      	bne.n	8008a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e007      	b.n	8008a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d1ca      	bne.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a98:	e042      	b.n	8008b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b10      	cmp	r3, #16
 8008aa6:	d119      	bne.n	8008adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f06f 0210 	mvn.w	r2, #16
 8008ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e029      	b.n	8008b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008adc:	f7fd ffae 	bl	8006a3c <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d302      	bcc.n	8008af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d116      	bne.n	8008b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	f043 0220 	orr.w	r2, r3, #32
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e007      	b.n	8008b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2a:	2b40      	cmp	r3, #64	; 0x40
 8008b2c:	d1b5      	bne.n	8008a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4e:	d11b      	bne.n	8008b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	f043 0204 	orr.w	r2, r3, #4
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e000      	b.n	8008b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
	...

08008b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e264      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d075      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bb6:	4ba3      	ldr	r3, [pc, #652]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 030c 	and.w	r3, r3, #12
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d00c      	beq.n	8008bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bc2:	4ba0      	ldr	r3, [pc, #640]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d112      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bce:	4b9d      	ldr	r3, [pc, #628]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bda:	d10b      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bdc:	4b99      	ldr	r3, [pc, #612]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d05b      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x108>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d157      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e23f      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfc:	d106      	bne.n	8008c0c <HAL_RCC_OscConfig+0x74>
 8008bfe:	4b91      	ldr	r3, [pc, #580]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a90      	ldr	r2, [pc, #576]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e01d      	b.n	8008c48 <HAL_RCC_OscConfig+0xb0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c14:	d10c      	bne.n	8008c30 <HAL_RCC_OscConfig+0x98>
 8008c16:	4b8b      	ldr	r3, [pc, #556]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a8a      	ldr	r2, [pc, #552]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	4b88      	ldr	r3, [pc, #544]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a87      	ldr	r2, [pc, #540]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e00b      	b.n	8008c48 <HAL_RCC_OscConfig+0xb0>
 8008c30:	4b84      	ldr	r3, [pc, #528]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a83      	ldr	r2, [pc, #524]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	4b81      	ldr	r3, [pc, #516]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a80      	ldr	r2, [pc, #512]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d013      	beq.n	8008c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c50:	f7fd fef4 	bl	8006a3c <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c56:	e008      	b.n	8008c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c58:	f7fd fef0 	bl	8006a3c <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b64      	cmp	r3, #100	; 0x64
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e204      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c6a:	4b76      	ldr	r3, [pc, #472]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0f0      	beq.n	8008c58 <HAL_RCC_OscConfig+0xc0>
 8008c76:	e014      	b.n	8008ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c78:	f7fd fee0 	bl	8006a3c <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fd fedc 	bl	8006a3c <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	; 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e1f0      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c92:	4b6c      	ldr	r3, [pc, #432]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f0      	bne.n	8008c80 <HAL_RCC_OscConfig+0xe8>
 8008c9e:	e000      	b.n	8008ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d063      	beq.n	8008d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cae:	4b65      	ldr	r3, [pc, #404]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 030c 	and.w	r3, r3, #12
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00b      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cba:	4b62      	ldr	r3, [pc, #392]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d11c      	bne.n	8008d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cc6:	4b5f      	ldr	r3, [pc, #380]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d116      	bne.n	8008d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cd2:	4b5c      	ldr	r3, [pc, #368]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <HAL_RCC_OscConfig+0x152>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d001      	beq.n	8008cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e1c4      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cea:	4b56      	ldr	r3, [pc, #344]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4952      	ldr	r1, [pc, #328]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cfe:	e03a      	b.n	8008d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d020      	beq.n	8008d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d08:	4b4f      	ldr	r3, [pc, #316]	; (8008e48 <HAL_RCC_OscConfig+0x2b0>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0e:	f7fd fe95 	bl	8006a3c <HAL_GetTick>
 8008d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d14:	e008      	b.n	8008d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d16:	f7fd fe91 	bl	8006a3c <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e1a5      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d28:	4b46      	ldr	r3, [pc, #280]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0f0      	beq.n	8008d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d34:	4b43      	ldr	r3, [pc, #268]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	4940      	ldr	r1, [pc, #256]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	600b      	str	r3, [r1, #0]
 8008d48:	e015      	b.n	8008d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d4a:	4b3f      	ldr	r3, [pc, #252]	; (8008e48 <HAL_RCC_OscConfig+0x2b0>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d50:	f7fd fe74 	bl	8006a3c <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d58:	f7fd fe70 	bl	8006a3c <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e184      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d6a:	4b36      	ldr	r3, [pc, #216]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f0      	bne.n	8008d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d030      	beq.n	8008de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d8a:	4b30      	ldr	r3, [pc, #192]	; (8008e4c <HAL_RCC_OscConfig+0x2b4>)
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d90:	f7fd fe54 	bl	8006a3c <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d98:	f7fd fe50 	bl	8006a3c <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e164      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008daa:	4b26      	ldr	r3, [pc, #152]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f0      	beq.n	8008d98 <HAL_RCC_OscConfig+0x200>
 8008db6:	e015      	b.n	8008de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008db8:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <HAL_RCC_OscConfig+0x2b4>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dbe:	f7fd fe3d 	bl	8006a3c <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc6:	f7fd fe39 	bl	8006a3c <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e14d      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f0      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80a0 	beq.w	8008f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10f      	bne.n	8008e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	4a0e      	ldr	r2, [pc, #56]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e10:	6413      	str	r3, [r2, #64]	; 0x40
 8008e12:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <HAL_RCC_OscConfig+0x2ac>)
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1a:	60bb      	str	r3, [r7, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <HAL_RCC_OscConfig+0x2b8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d121      	bne.n	8008e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e2e:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <HAL_RCC_OscConfig+0x2b8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <HAL_RCC_OscConfig+0x2b8>)
 8008e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e3a:	f7fd fdff 	bl	8006a3c <HAL_GetTick>
 8008e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e40:	e011      	b.n	8008e66 <HAL_RCC_OscConfig+0x2ce>
 8008e42:	bf00      	nop
 8008e44:	40023800 	.word	0x40023800
 8008e48:	42470000 	.word	0x42470000
 8008e4c:	42470e80 	.word	0x42470e80
 8008e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e54:	f7fd fdf2 	bl	8006a3c <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e106      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e66:	4b85      	ldr	r3, [pc, #532]	; (800907c <HAL_RCC_OscConfig+0x4e4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f0      	beq.n	8008e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d106      	bne.n	8008e88 <HAL_RCC_OscConfig+0x2f0>
 8008e7a:	4b81      	ldr	r3, [pc, #516]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7e:	4a80      	ldr	r2, [pc, #512]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008e80:	f043 0301 	orr.w	r3, r3, #1
 8008e84:	6713      	str	r3, [r2, #112]	; 0x70
 8008e86:	e01c      	b.n	8008ec2 <HAL_RCC_OscConfig+0x32a>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b05      	cmp	r3, #5
 8008e8e:	d10c      	bne.n	8008eaa <HAL_RCC_OscConfig+0x312>
 8008e90:	4b7b      	ldr	r3, [pc, #492]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e94:	4a7a      	ldr	r2, [pc, #488]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008e96:	f043 0304 	orr.w	r3, r3, #4
 8008e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e9c:	4b78      	ldr	r3, [pc, #480]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea0:	4a77      	ldr	r2, [pc, #476]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea8:	e00b      	b.n	8008ec2 <HAL_RCC_OscConfig+0x32a>
 8008eaa:	4b75      	ldr	r3, [pc, #468]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	4a74      	ldr	r2, [pc, #464]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8008eb6:	4b72      	ldr	r3, [pc, #456]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	4a71      	ldr	r2, [pc, #452]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008ebc:	f023 0304 	bic.w	r3, r3, #4
 8008ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d015      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eca:	f7fd fdb7 	bl	8006a3c <HAL_GetTick>
 8008ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed0:	e00a      	b.n	8008ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed2:	f7fd fdb3 	bl	8006a3c <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e0c5      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee8:	4b65      	ldr	r3, [pc, #404]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0ee      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x33a>
 8008ef4:	e014      	b.n	8008f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ef6:	f7fd fda1 	bl	8006a3c <HAL_GetTick>
 8008efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008efc:	e00a      	b.n	8008f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008efe:	f7fd fd9d 	bl	8006a3c <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e0af      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f14:	4b5a      	ldr	r3, [pc, #360]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1ee      	bne.n	8008efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d105      	bne.n	8008f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f26:	4b56      	ldr	r3, [pc, #344]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	4a55      	ldr	r2, [pc, #340]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 809b 	beq.w	8009072 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f3c:	4b50      	ldr	r3, [pc, #320]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 030c 	and.w	r3, r3, #12
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d05c      	beq.n	8009002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d141      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f50:	4b4c      	ldr	r3, [pc, #304]	; (8009084 <HAL_RCC_OscConfig+0x4ec>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f56:	f7fd fd71 	bl	8006a3c <HAL_GetTick>
 8008f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f5c:	e008      	b.n	8008f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f5e:	f7fd fd6d 	bl	8006a3c <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d901      	bls.n	8008f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e081      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f70:	4b43      	ldr	r3, [pc, #268]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1f0      	bne.n	8008f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69da      	ldr	r2, [r3, #28]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	019b      	lsls	r3, r3, #6
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	3b01      	subs	r3, #1
 8008f96:	041b      	lsls	r3, r3, #16
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	061b      	lsls	r3, r3, #24
 8008fa0:	4937      	ldr	r1, [pc, #220]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fa6:	4b37      	ldr	r3, [pc, #220]	; (8009084 <HAL_RCC_OscConfig+0x4ec>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fac:	f7fd fd46 	bl	8006a3c <HAL_GetTick>
 8008fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fb4:	f7fd fd42 	bl	8006a3c <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e056      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fc6:	4b2e      	ldr	r3, [pc, #184]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0f0      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x41c>
 8008fd2:	e04e      	b.n	8009072 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fd4:	4b2b      	ldr	r3, [pc, #172]	; (8009084 <HAL_RCC_OscConfig+0x4ec>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fda:	f7fd fd2f 	bl	8006a3c <HAL_GetTick>
 8008fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fe0:	e008      	b.n	8008ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fe2:	f7fd fd2b 	bl	8006a3c <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e03f      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1f0      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x44a>
 8009000:	e037      	b.n	8009072 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e032      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800900e:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <HAL_RCC_OscConfig+0x4e8>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d028      	beq.n	800906e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009026:	429a      	cmp	r2, r3
 8009028:	d121      	bne.n	800906e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009034:	429a      	cmp	r2, r3
 8009036:	d11a      	bne.n	800906e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800903e:	4013      	ands	r3, r2
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009044:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009046:	4293      	cmp	r3, r2
 8009048:	d111      	bne.n	800906e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	3b01      	subs	r3, #1
 8009058:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800905a:	429a      	cmp	r2, r3
 800905c:	d107      	bne.n	800906e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800906a:	429a      	cmp	r2, r3
 800906c:	d001      	beq.n	8009072 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40007000 	.word	0x40007000
 8009080:	40023800 	.word	0x40023800
 8009084:	42470060 	.word	0x42470060

08009088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0cc      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800909c:	4b68      	ldr	r3, [pc, #416]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d90c      	bls.n	80090c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090aa:	4b65      	ldr	r3, [pc, #404]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090b2:	4b63      	ldr	r3, [pc, #396]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d001      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0b8      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d020      	beq.n	8009112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090dc:	4b59      	ldr	r3, [pc, #356]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4a58      	ldr	r2, [pc, #352]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0308 	and.w	r3, r3, #8
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090f4:	4b53      	ldr	r3, [pc, #332]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4a52      	ldr	r2, [pc, #328]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009100:	4b50      	ldr	r3, [pc, #320]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	494d      	ldr	r1, [pc, #308]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	4313      	orrs	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d044      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d107      	bne.n	8009136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009126:	4b47      	ldr	r3, [pc, #284]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d119      	bne.n	8009166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e07f      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d003      	beq.n	8009146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009142:	2b03      	cmp	r3, #3
 8009144:	d107      	bne.n	8009156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009146:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e06f      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009156:	4b3b      	ldr	r3, [pc, #236]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e067      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009166:	4b37      	ldr	r3, [pc, #220]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f023 0203 	bic.w	r2, r3, #3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4934      	ldr	r1, [pc, #208]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	4313      	orrs	r3, r2
 8009176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009178:	f7fd fc60 	bl	8006a3c <HAL_GetTick>
 800917c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800917e:	e00a      	b.n	8009196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009180:	f7fd fc5c 	bl	8006a3c <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	f241 3288 	movw	r2, #5000	; 0x1388
 800918e:	4293      	cmp	r3, r2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e04f      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009196:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 020c 	and.w	r2, r3, #12
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d1eb      	bne.n	8009180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091a8:	4b25      	ldr	r3, [pc, #148]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0307 	and.w	r3, r3, #7
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d20c      	bcs.n	80091d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091b6:	4b22      	ldr	r3, [pc, #136]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091be:	4b20      	ldr	r3, [pc, #128]	; (8009240 <HAL_RCC_ClockConfig+0x1b8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d001      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e032      	b.n	8009236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d008      	beq.n	80091ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091dc:	4b19      	ldr	r3, [pc, #100]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	4916      	ldr	r1, [pc, #88]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	490e      	ldr	r1, [pc, #56]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	4313      	orrs	r3, r2
 800920c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800920e:	f000 f821 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 8009212:	4602      	mov	r2, r0
 8009214:	4b0b      	ldr	r3, [pc, #44]	; (8009244 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	091b      	lsrs	r3, r3, #4
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	490a      	ldr	r1, [pc, #40]	; (8009248 <HAL_RCC_ClockConfig+0x1c0>)
 8009220:	5ccb      	ldrb	r3, [r1, r3]
 8009222:	fa22 f303 	lsr.w	r3, r2, r3
 8009226:	4a09      	ldr	r2, [pc, #36]	; (800924c <HAL_RCC_ClockConfig+0x1c4>)
 8009228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <HAL_RCC_ClockConfig+0x1c8>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f7fd fbc0 	bl	80069b4 <HAL_InitTick>

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	40023c00 	.word	0x40023c00
 8009244:	40023800 	.word	0x40023800
 8009248:	0807279c 	.word	0x0807279c
 800924c:	20000048 	.word	0x20000048
 8009250:	2000005c 	.word	0x2000005c

08009254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	2300      	movs	r3, #0
 8009266:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800926c:	4b67      	ldr	r3, [pc, #412]	; (800940c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 030c 	and.w	r3, r3, #12
 8009274:	2b08      	cmp	r3, #8
 8009276:	d00d      	beq.n	8009294 <HAL_RCC_GetSysClockFreq+0x40>
 8009278:	2b08      	cmp	r3, #8
 800927a:	f200 80bd 	bhi.w	80093f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_RCC_GetSysClockFreq+0x34>
 8009282:	2b04      	cmp	r3, #4
 8009284:	d003      	beq.n	800928e <HAL_RCC_GetSysClockFreq+0x3a>
 8009286:	e0b7      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009288:	4b61      	ldr	r3, [pc, #388]	; (8009410 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800928a:	60bb      	str	r3, [r7, #8]
       break;
 800928c:	e0b7      	b.n	80093fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800928e:	4b61      	ldr	r3, [pc, #388]	; (8009414 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009290:	60bb      	str	r3, [r7, #8]
      break;
 8009292:	e0b4      	b.n	80093fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009294:	4b5d      	ldr	r3, [pc, #372]	; (800940c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800929c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800929e:	4b5b      	ldr	r3, [pc, #364]	; (800940c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d04d      	beq.n	8009346 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092aa:	4b58      	ldr	r3, [pc, #352]	; (800940c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	099b      	lsrs	r3, r3, #6
 80092b0:	461a      	mov	r2, r3
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80092ba:	f04f 0100 	mov.w	r1, #0
 80092be:	ea02 0800 	and.w	r8, r2, r0
 80092c2:	ea03 0901 	and.w	r9, r3, r1
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	014b      	lsls	r3, r1, #5
 80092d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80092d8:	0142      	lsls	r2, r0, #5
 80092da:	4610      	mov	r0, r2
 80092dc:	4619      	mov	r1, r3
 80092de:	ebb0 0008 	subs.w	r0, r0, r8
 80092e2:	eb61 0109 	sbc.w	r1, r1, r9
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	018b      	lsls	r3, r1, #6
 80092f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80092f4:	0182      	lsls	r2, r0, #6
 80092f6:	1a12      	subs	r2, r2, r0
 80092f8:	eb63 0301 	sbc.w	r3, r3, r1
 80092fc:	f04f 0000 	mov.w	r0, #0
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	00d9      	lsls	r1, r3, #3
 8009306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800930a:	00d0      	lsls	r0, r2, #3
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	eb12 0208 	adds.w	r2, r2, r8
 8009314:	eb43 0309 	adc.w	r3, r3, r9
 8009318:	f04f 0000 	mov.w	r0, #0
 800931c:	f04f 0100 	mov.w	r1, #0
 8009320:	0259      	lsls	r1, r3, #9
 8009322:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009326:	0250      	lsls	r0, r2, #9
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4610      	mov	r0, r2
 800932e:	4619      	mov	r1, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	461a      	mov	r2, r3
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	f7f7 fc8e 	bl	8000c58 <__aeabi_uldivmod>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4613      	mov	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e04a      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009346:	4b31      	ldr	r3, [pc, #196]	; (800940c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	099b      	lsrs	r3, r3, #6
 800934c:	461a      	mov	r2, r3
 800934e:	f04f 0300 	mov.w	r3, #0
 8009352:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009356:	f04f 0100 	mov.w	r1, #0
 800935a:	ea02 0400 	and.w	r4, r2, r0
 800935e:	ea03 0501 	and.w	r5, r3, r1
 8009362:	4620      	mov	r0, r4
 8009364:	4629      	mov	r1, r5
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	f04f 0300 	mov.w	r3, #0
 800936e:	014b      	lsls	r3, r1, #5
 8009370:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009374:	0142      	lsls	r2, r0, #5
 8009376:	4610      	mov	r0, r2
 8009378:	4619      	mov	r1, r3
 800937a:	1b00      	subs	r0, r0, r4
 800937c:	eb61 0105 	sbc.w	r1, r1, r5
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	018b      	lsls	r3, r1, #6
 800938a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800938e:	0182      	lsls	r2, r0, #6
 8009390:	1a12      	subs	r2, r2, r0
 8009392:	eb63 0301 	sbc.w	r3, r3, r1
 8009396:	f04f 0000 	mov.w	r0, #0
 800939a:	f04f 0100 	mov.w	r1, #0
 800939e:	00d9      	lsls	r1, r3, #3
 80093a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093a4:	00d0      	lsls	r0, r2, #3
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	1912      	adds	r2, r2, r4
 80093ac:	eb45 0303 	adc.w	r3, r5, r3
 80093b0:	f04f 0000 	mov.w	r0, #0
 80093b4:	f04f 0100 	mov.w	r1, #0
 80093b8:	0299      	lsls	r1, r3, #10
 80093ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80093be:	0290      	lsls	r0, r2, #10
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	f7f7 fc42 	bl	8000c58 <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4613      	mov	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093dc:	4b0b      	ldr	r3, [pc, #44]	; (800940c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	3301      	adds	r3, #1
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f4:	60bb      	str	r3, [r7, #8]
      break;
 80093f6:	e002      	b.n	80093fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80093fa:	60bb      	str	r3, [r7, #8]
      break;
 80093fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093fe:	68bb      	ldr	r3, [r7, #8]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800940a:	bf00      	nop
 800940c:	40023800 	.word	0x40023800
 8009410:	00f42400 	.word	0x00f42400
 8009414:	007a1200 	.word	0x007a1200

08009418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800941c:	4b03      	ldr	r3, [pc, #12]	; (800942c <HAL_RCC_GetHCLKFreq+0x14>)
 800941e:	681b      	ldr	r3, [r3, #0]
}
 8009420:	4618      	mov	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20000048 	.word	0x20000048

08009430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009434:	f7ff fff0 	bl	8009418 <HAL_RCC_GetHCLKFreq>
 8009438:	4602      	mov	r2, r0
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	0a9b      	lsrs	r3, r3, #10
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	4903      	ldr	r1, [pc, #12]	; (8009454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009446:	5ccb      	ldrb	r3, [r1, r3]
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40023800 	.word	0x40023800
 8009454:	080727ac 	.word	0x080727ac

08009458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e07b      	b.n	8009562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d108      	bne.n	8009484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800947a:	d009      	beq.n	8009490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	61da      	str	r2, [r3, #28]
 8009482:	e005      	b.n	8009490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7fc ff56 	bl	800635c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094d8:	431a      	orrs	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800950a:	431a      	orrs	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009514:	ea42 0103 	orr.w	r1, r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	0c1b      	lsrs	r3, r3, #16
 800952e:	f003 0104 	and.w	r1, r3, #4
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	f003 0210 	and.w	r2, r3, #16
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b088      	sub	sp, #32
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	603b      	str	r3, [r7, #0]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_SPI_Transmit+0x22>
 8009588:	2302      	movs	r3, #2
 800958a:	e126      	b.n	80097da <HAL_SPI_Transmit+0x270>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009594:	f7fd fa52 	bl	8006a3c <HAL_GetTick>
 8009598:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d002      	beq.n	80095b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80095aa:	2302      	movs	r3, #2
 80095ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095ae:	e10b      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_SPI_Transmit+0x52>
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095c0:	e102      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2203      	movs	r2, #3
 80095c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	88fa      	ldrh	r2, [r7, #6]
 80095da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009608:	d10f      	bne.n	800962a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d007      	beq.n	8009648 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009650:	d14b      	bne.n	80096ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <HAL_SPI_Transmit+0xf6>
 800965a:	8afb      	ldrh	r3, [r7, #22]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d13e      	bne.n	80096de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	881a      	ldrh	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009670:	1c9a      	adds	r2, r3, #2
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009684:	e02b      	b.n	80096de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b02      	cmp	r3, #2
 8009692:	d112      	bne.n	80096ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	881a      	ldrh	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a4:	1c9a      	adds	r2, r3, #2
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80096b8:	e011      	b.n	80096de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ba:	f7fd f9bf 	bl	8006a3c <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d803      	bhi.n	80096d2 <HAL_SPI_Transmit+0x168>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d0:	d102      	bne.n	80096d8 <HAL_SPI_Transmit+0x16e>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096dc:	e074      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1ce      	bne.n	8009686 <HAL_SPI_Transmit+0x11c>
 80096e8:	e04c      	b.n	8009784 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_SPI_Transmit+0x18e>
 80096f2:	8afb      	ldrh	r3, [r7, #22]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d140      	bne.n	800977a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800971e:	e02c      	b.n	800977a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d113      	bne.n	8009756 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974a:	b29b      	uxth	r3, r3
 800974c:	3b01      	subs	r3, #1
 800974e:	b29a      	uxth	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	86da      	strh	r2, [r3, #54]	; 0x36
 8009754:	e011      	b.n	800977a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009756:	f7fd f971 	bl	8006a3c <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d803      	bhi.n	800976e <HAL_SPI_Transmit+0x204>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d102      	bne.n	8009774 <HAL_SPI_Transmit+0x20a>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009778:	e026      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1cd      	bne.n	8009720 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fa63 	bl	8009c54 <SPI_EndRxTxTransaction>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2220      	movs	r2, #32
 8009798:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	77fb      	strb	r3, [r7, #31]
 80097c4:	e000      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80097c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08c      	sub	sp, #48	; 0x30
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097f0:	2301      	movs	r3, #1
 80097f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_SPI_TransmitReceive+0x26>
 8009804:	2302      	movs	r3, #2
 8009806:	e18a      	b.n	8009b1e <HAL_SPI_TransmitReceive+0x33c>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009810:	f7fd f914 	bl	8006a3c <HAL_GetTick>
 8009814:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800981c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009826:	887b      	ldrh	r3, [r7, #2]
 8009828:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800982a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800982e:	2b01      	cmp	r3, #1
 8009830:	d00f      	beq.n	8009852 <HAL_SPI_TransmitReceive+0x70>
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009838:	d107      	bne.n	800984a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d103      	bne.n	800984a <HAL_SPI_TransmitReceive+0x68>
 8009842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009846:	2b04      	cmp	r3, #4
 8009848:	d003      	beq.n	8009852 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800984a:	2302      	movs	r3, #2
 800984c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009850:	e15b      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_SPI_TransmitReceive+0x82>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_SPI_TransmitReceive+0x82>
 800985e:	887b      	ldrh	r3, [r7, #2]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d103      	bne.n	800986c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800986a:	e14e      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b04      	cmp	r3, #4
 8009876:	d003      	beq.n	8009880 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2205      	movs	r2, #5
 800987c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	887a      	ldrh	r2, [r7, #2]
 8009890:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	887a      	ldrh	r2, [r7, #2]
 8009896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	887a      	ldrh	r2, [r7, #2]
 80098a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b40      	cmp	r3, #64	; 0x40
 80098c2:	d007      	beq.n	80098d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098dc:	d178      	bne.n	80099d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x10a>
 80098e6:	8b7b      	ldrh	r3, [r7, #26]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d166      	bne.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f0:	881a      	ldrh	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009910:	e053      	b.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d11b      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x176>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d016      	beq.n	8009958 <HAL_SPI_TransmitReceive+0x176>
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	2b01      	cmp	r3, #1
 800992e:	d113      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	881a      	ldrh	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	1c9a      	adds	r2, r3, #2
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b01      	cmp	r3, #1
 8009964:	d119      	bne.n	800999a <HAL_SPI_TransmitReceive+0x1b8>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800996a:	b29b      	uxth	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d014      	beq.n	800999a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	b292      	uxth	r2, r2
 800997c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	1c9a      	adds	r2, r3, #2
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009996:	2301      	movs	r3, #1
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800999a:	f7fd f84f 	bl	8006a3c <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d807      	bhi.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b0:	d003      	beq.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099b8:	e0a7      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1a6      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x130>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1a1      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x130>
 80099ce:	e07c      	b.n	8009aca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_SPI_TransmitReceive+0x1fc>
 80099d8:	8b7b      	ldrh	r3, [r7, #26]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d16b      	bne.n	8009ab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	330c      	adds	r3, #12
 80099e8:	7812      	ldrb	r2, [r2, #0]
 80099ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a04:	e057      	b.n	8009ab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d11c      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x26c>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d017      	beq.n	8009a4e <HAL_SPI_TransmitReceive+0x26c>
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d114      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	7812      	ldrb	r2, [r2, #0]
 8009a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d119      	bne.n	8009a90 <HAL_SPI_TransmitReceive+0x2ae>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d014      	beq.n	8009a90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a90:	f7fc ffd4 	bl	8006a3c <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d803      	bhi.n	8009aa8 <HAL_SPI_TransmitReceive+0x2c6>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d102      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2cc>
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ab4:	e029      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1a2      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x224>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d19d      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f8c0 	bl	8009c54 <SPI_EndRxTxTransaction>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d006      	beq.n	8009ae8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ae6:	e010      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10b      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	e000      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3730      	adds	r7, #48	; 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b34:	b2db      	uxtb	r3, r3
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
	...

08009b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b54:	f7fc ff72 	bl	8006a3c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b64:	f7fc ff6a 	bl	8006a3c <HAL_GetTick>
 8009b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6a:	4b39      	ldr	r3, [pc, #228]	; (8009c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	015b      	lsls	r3, r3, #5
 8009b70:	0d1b      	lsrs	r3, r3, #20
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	e054      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d050      	beq.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b84:	f7fc ff5a 	bl	8006a3c <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d902      	bls.n	8009b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d13d      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bb2:	d111      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bbc:	d004      	beq.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc6:	d107      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be0:	d10f      	bne.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e017      	b.n	8009c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bf0c      	ite	eq
 8009c36:	2301      	moveq	r3, #1
 8009c38:	2300      	movne	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d19b      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000048 	.word	0x20000048

08009c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c60:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <SPI_EndRxTxTransaction+0x7c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	; (8009cd4 <SPI_EndRxTxTransaction+0x80>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	0d5b      	lsrs	r3, r3, #21
 8009c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c7e:	d112      	bne.n	8009ca6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff ff5a 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d016      	beq.n	8009cc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e00f      	b.n	8009cc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00a      	beq.n	8009cc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cbc:	2b80      	cmp	r3, #128	; 0x80
 8009cbe:	d0f2      	beq.n	8009ca6 <SPI_EndRxTxTransaction+0x52>
 8009cc0:	e000      	b.n	8009cc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009cc2:	bf00      	nop
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000048 	.word	0x20000048
 8009cd4:	165e9f81 	.word	0x165e9f81

08009cd8 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cda:	b08b      	sub	sp, #44	; 0x2c
 8009cdc:	af06      	add	r7, sp, #24
 8009cde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	781d      	ldrb	r5, [r3, #0]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cf2:	b29e      	uxth	r6, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8009d0a:	b292      	uxth	r2, r2
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8009d12:	b289      	uxth	r1, r1
 8009d14:	68b8      	ldr	r0, [r7, #8]
 8009d16:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8009d1a:	b280      	uxth	r0, r0
 8009d1c:	68bc      	ldr	r4, [r7, #8]
 8009d1e:	7c64      	ldrb	r4, [r4, #17]
 8009d20:	9404      	str	r4, [sp, #16]
 8009d22:	9003      	str	r0, [sp, #12]
 8009d24:	9102      	str	r1, [sp, #8]
 8009d26:	9201      	str	r2, [sp, #4]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4673      	mov	r3, lr
 8009d2c:	4662      	mov	r2, ip
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7f8 fa87 	bl	8002244 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d40 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b0a4      	sub	sp, #144	; 0x90
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d60:	e0b8      	b.n	8009ed4 <hci_le_advertising_report_event_process+0x194>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8009d62:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009d66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4413      	add	r3, r2
 8009d74:	440b      	add	r3, r1
 8009d76:	3301      	adds	r3, #1
 8009d78:	7819      	ldrb	r1, [r3, #0]
 8009d7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3b88      	subs	r3, #136	; 0x88
 8009d8e:	460a      	mov	r2, r1
 8009d90:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009d92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009d96:	3301      	adds	r3, #1
 8009d98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8009d9c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009da0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	4413      	add	r3, r2
 8009dae:	440b      	add	r3, r1
 8009db0:	3302      	adds	r3, #2
 8009db2:	7819      	ldrb	r1, [r3, #0]
 8009db4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3b87      	subs	r3, #135	; 0x87
 8009dc8:	460a      	mov	r2, r1
 8009dca:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009dcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8009dd6:	f107 0108 	add.w	r1, r7, #8
 8009dda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	1c98      	adds	r0, r3, #2
 8009dea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	4413      	add	r3, r2
 8009df8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3303      	adds	r3, #3
 8009e00:	2206      	movs	r2, #6
 8009e02:	4619      	mov	r1, r3
 8009e04:	f001 fd68 	bl	800b8d8 <memcpy>
    size += 6;
 8009e08:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e0c:	3306      	adds	r3, #6
 8009e0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8009e12:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009e16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	4413      	add	r3, r2
 8009e24:	440b      	add	r3, r1
 8009e26:	3309      	adds	r3, #9
 8009e28:	7819      	ldrb	r1, [r3, #0]
 8009e2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3b80      	subs	r3, #128	; 0x80
 8009e3e:	460a      	mov	r2, r1
 8009e40:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009e42:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e46:	3301      	adds	r3, #1
 8009e48:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8009e4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e50:	4613      	mov	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	4413      	add	r3, r2
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e60:	4413      	add	r3, r2
 8009e62:	1c99      	adds	r1, r3, #2
 8009e64:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009e74:	4413      	add	r3, r2
 8009e76:	3b7c      	subs	r3, #124	; 0x7c
 8009e78:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8009e7a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009e7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	4413      	add	r3, r2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3309      	adds	r3, #9
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e96:	4413      	add	r3, r2
 8009e98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8009e9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	b259      	sxtb	r1, r3
 8009ea8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009eb8:	4413      	add	r3, r2
 8009eba:	3b78      	subs	r3, #120	; 0x78
 8009ebc:	460a      	mov	r2, r1
 8009ebe:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009ec0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8009eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ece:	3301      	adds	r3, #1
 8009ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	f6ff af3e 	blt.w	8009d62 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8009ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f107 0208 	add.w	r2, r7, #8
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f994 	bl	800a220 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8009ef8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3790      	adds	r7, #144	; 0x90
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	7818      	ldrb	r0, [r3, #0]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f1e:	b299      	uxth	r1, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009f2e:	b29c      	uxth	r4, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	f000 f97c 	bl	800a238 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd90      	pop	{r4, r7, pc}

08009f4a <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	7818      	ldrb	r0, [r3, #0]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f64:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f000 f978 	bl	800a260 <hci_le_read_remote_used_features_complete_event>

  return status;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	895b      	ldrh	r3, [r3, #10]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f000 f96e 	bl	800a27c <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8009faa:	b590      	push	{r4, r7, lr}
 8009fac:	b087      	sub	sp, #28
 8009fae:	af02      	add	r7, sp, #8
 8009fb0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b298      	uxth	r0, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	885b      	ldrh	r3, [r3, #2]
 8009fc4:	b299      	uxth	r1, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	889b      	ldrh	r3, [r3, #4]
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	88db      	ldrh	r3, [r3, #6]
 8009fd0:	b29c      	uxth	r4, r3
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	891b      	ldrh	r3, [r3, #8]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	4623      	mov	r3, r4
 8009fdc:	f000 f95c 	bl	800a298 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd90      	pop	{r4, r7, pc}

08009fea <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a002:	4619      	mov	r1, r3
 800a004:	4610      	mov	r0, r2
 800a006:	f000 f95b 	bl	800a2c0 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f000 f952 	bl	800a2d8 <hci_le_generate_dhkey_complete_event>

  return status;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a03e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a042:	b08d      	sub	sp, #52	; 0x34
 800a044:	af08      	add	r7, sp, #32
 800a046:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f893 c000 	ldrb.w	ip, [r3]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a05c:	fa1f fe83 	uxth.w	lr, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a078:	68b8      	ldr	r0, [r7, #8]
 800a07a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800a07e:	b280      	uxth	r0, r0
 800a080:	68bc      	ldr	r4, [r7, #8]
 800a082:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800a086:	b2a4      	uxth	r4, r4
 800a088:	68bd      	ldr	r5, [r7, #8]
 800a08a:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800a08e:	b2ad      	uxth	r5, r5
 800a090:	68be      	ldr	r6, [r7, #8]
 800a092:	7f76      	ldrb	r6, [r6, #29]
 800a094:	9606      	str	r6, [sp, #24]
 800a096:	9505      	str	r5, [sp, #20]
 800a098:	9404      	str	r4, [sp, #16]
 800a09a:	9003      	str	r0, [sp, #12]
 800a09c:	9102      	str	r1, [sp, #8]
 800a09e:	9201      	str	r2, [sp, #4]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	464b      	mov	r3, r9
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	4671      	mov	r1, lr
 800a0a8:	4660      	mov	r0, ip
 800a0aa:	f000 f921 	bl	800a2f0 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a0ba <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b0a6      	sub	sp, #152	; 0x98
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0da:	e089      	b.n	800a1f0 <hci_le_direct_advertising_report_event_process+0x136>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800a0dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0e4:	011b      	lsls	r3, r3, #4
 800a0e6:	4413      	add	r3, r2
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a0f6:	440b      	add	r3, r1
 800a0f8:	3b90      	subs	r3, #144	; 0x90
 800a0fa:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a0fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a100:	3301      	adds	r3, #1
 800a102:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800a106:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a10a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	4413      	add	r3, r2
 800a112:	3302      	adds	r3, #2
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a11a:	011b      	lsls	r3, r3, #4
 800a11c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a120:	440b      	add	r3, r1
 800a122:	3b8f      	subs	r3, #143	; 0x8f
 800a124:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a126:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a12a:	3301      	adds	r3, #1
 800a12c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800a130:	f107 0208 	add.w	r2, r7, #8
 800a134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	4413      	add	r3, r2
 800a13c:	1c98      	adds	r0, r3, #2
 800a13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a148:	4413      	add	r3, r2
 800a14a:	3303      	adds	r3, #3
 800a14c:	2206      	movs	r2, #6
 800a14e:	4619      	mov	r1, r3
 800a150:	f001 fbc2 	bl	800b8d8 <memcpy>
    size += 6;
 800a154:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a158:	3306      	adds	r3, #6
 800a15a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800a15e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a162:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	4413      	add	r3, r2
 800a16a:	3309      	adds	r3, #9
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a172:	011b      	lsls	r3, r3, #4
 800a174:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a178:	440b      	add	r3, r1
 800a17a:	3b88      	subs	r3, #136	; 0x88
 800a17c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a17e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a182:	3301      	adds	r3, #1
 800a184:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800a188:	f107 0208 	add.w	r2, r7, #8
 800a18c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	3308      	adds	r3, #8
 800a194:	4413      	add	r3, r2
 800a196:	1c58      	adds	r0, r3, #1
 800a198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	3308      	adds	r3, #8
 800a1a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1a4:	4413      	add	r3, r2
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	2206      	movs	r2, #6
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	f001 fb94 	bl	800b8d8 <memcpy>
    size += 6;
 800a1b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a1b4:	3306      	adds	r3, #6
 800a1b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800a1ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	f993 2000 	ldrsb.w	r2, [r3]
 800a1cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3b81      	subs	r3, #129	; 0x81
 800a1da:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a1dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a1e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	f6ff af6d 	blt.w	800a0dc <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800a202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	f107 0208 	add.w	r2, r7, #8
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f882 	bl	800a318 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800a214:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3798      	adds	r7, #152	; 0x98
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800a238:	b490      	push	{r4, r7}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	4611      	mov	r1, r2
 800a244:	461a      	mov	r2, r3
 800a246:	4623      	mov	r3, r4
 800a248:	71fb      	strb	r3, [r7, #7]
 800a24a:	4603      	mov	r3, r0
 800a24c:	80bb      	strh	r3, [r7, #4]
 800a24e:	460b      	mov	r3, r1
 800a250:	807b      	strh	r3, [r7, #2]
 800a252:	4613      	mov	r3, r2
 800a254:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bc90      	pop	{r4, r7}
 800a25e:	4770      	bx	lr

0800a260 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	603a      	str	r2, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
 800a26c:	460b      	mov	r3, r1
 800a26e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	80fb      	strh	r3, [r7, #6]
 800a288:	4613      	mov	r3, r2
 800a28a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800a298:	b490      	push	{r4, r7}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4623      	mov	r3, r4
 800a2a8:	80fb      	strh	r3, [r7, #6]
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	80bb      	strh	r3, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	807b      	strh	r3, [r7, #2]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bc90      	pop	{r4, r7}
 800a2be:	4770      	bx	lr

0800a2c0 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6039      	str	r1, [r7, #0]
 800a2e2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800a2f0:	b490      	push	{r4, r7}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	4623      	mov	r3, r4
 800a300:	71fb      	strb	r3, [r7, #7]
 800a302:	4603      	mov	r3, r0
 800a304:	80bb      	strh	r3, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	71bb      	strb	r3, [r7, #6]
 800a30a:	4613      	mov	r3, r2
 800a30c:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bc90      	pop	{r4, r7}
 800a316:	4770      	bx	lr

0800a318 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	6039      	str	r1, [r7, #0]
 800a322:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a33a:	f107 0308 	add.w	r3, r7, #8
 800a33e:	2218      	movs	r2, #24
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f001 fad6 	bl	800b8f4 <memset>
  rq.ogf = 0x03;
 800a348:	2303      	movs	r3, #3
 800a34a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a34c:	2303      	movs	r3, #3
 800a34e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a350:	1dfb      	adds	r3, r7, #7
 800a352:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a354:	2301      	movs	r3, #1
 800a356:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a358:	f107 0308 	add.w	r3, r7, #8
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 ffec 	bl	800b33c <hci_send_req>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	da01      	bge.n	800a36e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a36a:	23ff      	movs	r3, #255	; 0xff
 800a36c:	e005      	b.n	800a37a <hci_reset+0x4a>
  if (status) {
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <hci_reset+0x48>
    return status;
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	e000      	b.n	800a37a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b08e      	sub	sp, #56	; 0x38
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a390:	f107 0314 	add.w	r3, r7, #20
 800a394:	2209      	movs	r2, #9
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f001 faab 	bl	800b8f4 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a39e:	f107 0320 	add.w	r3, r7, #32
 800a3a2:	2218      	movs	r2, #24
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 faa4 	bl	800b8f4 <memset>
  rq.ogf = 0x04;
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 800a3b4:	f107 0314 	add.w	r3, r7, #20
 800a3b8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800a3ba:	2309      	movs	r3, #9
 800a3bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800a3be:	f107 0320 	add.w	r3, r7, #32
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 ffb9 	bl	800b33c <hci_send_req>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da01      	bge.n	800a3d4 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800a3d0:	23ff      	movs	r3, #255	; 0xff
 800a3d2:	e018      	b.n	800a406 <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800a3d4:	7d3b      	ldrb	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <hci_read_local_version_information+0x5c>
    return resp.Status;
 800a3da:	7d3b      	ldrb	r3, [r7, #20]
 800a3dc:	e013      	b.n	800a406 <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800a3de:	7d7a      	ldrb	r2, [r7, #21]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800a3e4:	8afa      	ldrh	r2, [r7, #22]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800a3ea:	7e3a      	ldrb	r2, [r7, #24]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800a3f0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800a3fa:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a402:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3738      	adds	r7, #56	; 0x38
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b0cc      	sub	sp, #304	; 0x130
 800a412:	af00      	add	r7, sp, #0
 800a414:	4602      	mov	r2, r0
 800a416:	463b      	mov	r3, r7
 800a418:	6019      	str	r1, [r3, #0]
 800a41a:	1dfb      	adds	r3, r7, #7
 800a41c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800a41e:	f107 030c 	add.w	r3, r7, #12
 800a422:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a426:	f107 030b 	add.w	r3, r7, #11
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800a434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a438:	1dfa      	adds	r2, r7, #7
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a43e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a442:	3301      	adds	r3, #1
 800a444:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800a448:	463b      	mov	r3, r7
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <hci_le_set_scan_response_data+0x52>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800a450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a454:	1c58      	adds	r0, r3, #1
 800a456:	463b      	mov	r3, r7
 800a458:	221f      	movs	r2, #31
 800a45a:	6819      	ldr	r1, [r3, #0]
 800a45c:	f001 fa3c 	bl	800b8d8 <memcpy>
  }
  index_input += 31;
 800a460:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a464:	331f      	adds	r3, #31
 800a466:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a46a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a46e:	2218      	movs	r2, #24
 800a470:	2100      	movs	r1, #0
 800a472:	4618      	mov	r0, r3
 800a474:	f001 fa3e 	bl	800b8f4 <memset>
  rq.ogf = 0x08;
 800a478:	2308      	movs	r3, #8
 800a47a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800a47e:	2309      	movs	r3, #9
 800a480:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a484:	f107 030c 	add.w	r3, r7, #12
 800a488:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a48c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a490:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a494:	f107 030b 	add.w	r3, r7, #11
 800a498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a4a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 ff47 	bl	800b33c <hci_send_req>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da01      	bge.n	800a4b8 <hci_le_set_scan_response_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a4b4:	23ff      	movs	r3, #255	; 0xff
 800a4b6:	e009      	b.n	800a4cc <hci_le_set_scan_response_data+0xbe>
  if (status) {
 800a4b8:	f107 030b 	add.w	r3, r7, #11
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <hci_le_set_scan_response_data+0xbc>
    return status;
 800a4c2:	f107 030b 	add.w	r3, r7, #11
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	e000      	b.n	800a4cc <hci_le_set_scan_response_data+0xbe>
  }
  return BLE_STATUS_SUCCESS;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800a4d6:	b5b0      	push	{r4, r5, r7, lr}
 800a4d8:	b0ce      	sub	sp, #312	; 0x138
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	4605      	mov	r5, r0
 800a4de:	460c      	mov	r4, r1
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	1dfb      	adds	r3, r7, #7
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	1d3b      	adds	r3, r7, #4
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	801a      	strh	r2, [r3, #0]
 800a4f0:	1cbb      	adds	r3, r7, #2
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	801a      	strh	r2, [r3, #0]
 800a4f6:	1dbb      	adds	r3, r7, #6
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a4fc:	f107 030c 	add.w	r3, r7, #12
 800a500:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a504:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a508:	3308      	adds	r3, #8
 800a50a:	f107 020c 	add.w	r2, r7, #12
 800a50e:	4413      	add	r3, r2
 800a510:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a514:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a518:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a51c:	4413      	add	r3, r2
 800a51e:	3309      	adds	r3, #9
 800a520:	f107 020c 	add.w	r2, r7, #12
 800a524:	4413      	add	r3, r2
 800a526:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a52a:	f107 030b 	add.w	r3, r7, #11
 800a52e:	2200      	movs	r2, #0
 800a530:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800a538:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a53c:	1dfa      	adds	r2, r7, #7
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a542:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a546:	3301      	adds	r3, #1
 800a548:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800a54c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a550:	1d3a      	adds	r2, r7, #4
 800a552:	8812      	ldrh	r2, [r2, #0]
 800a554:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a558:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a55c:	3302      	adds	r3, #2
 800a55e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800a562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a566:	1cba      	adds	r2, r7, #2
 800a568:	8812      	ldrh	r2, [r2, #0]
 800a56a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a56e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a572:	3302      	adds	r3, #2
 800a574:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800a578:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a57c:	1dba      	adds	r2, r7, #6
 800a57e:	7812      	ldrb	r2, [r2, #0]
 800a580:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a582:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a586:	3301      	adds	r3, #1
 800a588:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800a58c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a590:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a594:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a596:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a59a:	3301      	adds	r3, #1
 800a59c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800a5a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5a4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a5a8:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a5aa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800a5b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a5be:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f001 f988 	bl	800b8d8 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800a5c8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800a5cc:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800a5d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5da:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a5de:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a5e0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800a5ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a5f4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f001 f96d 	bl	800b8d8 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800a5fe:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800a602:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a606:	4413      	add	r3, r2
 800a608:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800a60c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a610:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a614:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a616:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a61a:	3302      	adds	r3, #2
 800a61c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800a620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a624:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a628:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a62a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a62e:	3302      	adds	r3, #2
 800a630:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a638:	2218      	movs	r2, #24
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f959 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800a642:	233f      	movs	r3, #63	; 0x3f
 800a644:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800a648:	2383      	movs	r3, #131	; 0x83
 800a64a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a656:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a65a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a65e:	f107 030b 	add.w	r3, r7, #11
 800a662:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a666:	2301      	movs	r3, #1
 800a668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a66c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fe62 	bl	800b33c <hci_send_req>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	da01      	bge.n	800a682 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800a67e:	23ff      	movs	r3, #255	; 0xff
 800a680:	e009      	b.n	800a696 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 800a682:	f107 030b 	add.w	r3, r7, #11
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <aci_gap_set_discoverable+0x1be>
    return status;
 800a68c:	f107 030b 	add.w	r3, r7, #11
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	e000      	b.n	800a696 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bdb0      	pop	{r4, r5, r7, pc}

0800a6a0 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800a6a0:	b5b0      	push	{r4, r5, r7, lr}
 800a6a2:	b0cc      	sub	sp, #304	; 0x130
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	1dfb      	adds	r3, r7, #7
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	701a      	strb	r2, [r3, #0]
 800a6b4:	1dbb      	adds	r3, r7, #6
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	1d7b      	adds	r3, r7, #5
 800a6bc:	4602      	mov	r2, r0
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	1d3b      	adds	r3, r7, #4
 800a6c2:	460a      	mov	r2, r1
 800a6c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a6ce:	f107 030b 	add.w	r3, r7, #11
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800a6dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6e0:	1dfa      	adds	r2, r7, #7
 800a6e2:	7812      	ldrb	r2, [r2, #0]
 800a6e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a6e6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800a6f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6f4:	1dba      	adds	r2, r7, #6
 800a6f6:	7812      	ldrb	r2, [r2, #0]
 800a6f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a6fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a6fe:	3301      	adds	r3, #1
 800a700:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 800a704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a708:	1d7a      	adds	r2, r7, #5
 800a70a:	7812      	ldrb	r2, [r2, #0]
 800a70c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a70e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a712:	3301      	adds	r3, #1
 800a714:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800a718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a71c:	1d3a      	adds	r2, r7, #4
 800a71e:	7812      	ldrb	r2, [r2, #0]
 800a720:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a722:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a726:	3301      	adds	r3, #1
 800a728:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800a72c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a730:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a734:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a736:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a73a:	3301      	adds	r3, #1
 800a73c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800a740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a744:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a748:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a74a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a74e:	3301      	adds	r3, #1
 800a750:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800a754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a758:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a75c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a75e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a762:	3301      	adds	r3, #1
 800a764:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800a768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a76c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a770:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a774:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a778:	3304      	adds	r3, #4
 800a77a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800a77e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a782:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a786:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a788:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a78c:	3301      	adds	r3, #1
 800a78e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a796:	2218      	movs	r2, #24
 800a798:	2100      	movs	r1, #0
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 f8aa 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800a7a0:	233f      	movs	r3, #63	; 0x3f
 800a7a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a7a6:	2386      	movs	r3, #134	; 0x86
 800a7a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a7ac:	f107 030c 	add.w	r3, r7, #12
 800a7b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a7b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a7b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a7bc:	f107 030b 	add.w	r3, r7, #11
 800a7c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a7ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fdb3 	bl	800b33c <hci_send_req>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	da01      	bge.n	800a7e0 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800a7dc:	23ff      	movs	r3, #255	; 0xff
 800a7de:	e009      	b.n	800a7f4 <aci_gap_set_authentication_requirement+0x154>
  if (status) {
 800a7e0:	f107 030b 	add.w	r3, r7, #11
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <aci_gap_set_authentication_requirement+0x152>
    return status;
 800a7ea:	f107 030b 	add.w	r3, r7, #11
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	e000      	b.n	800a7f4 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bdb0      	pop	{r4, r5, r7, pc}

0800a7fe <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800a7fe:	b590      	push	{r4, r7, lr}
 800a800:	b0cf      	sub	sp, #316	; 0x13c
 800a802:	af00      	add	r7, sp, #0
 800a804:	4604      	mov	r4, r0
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	463a      	mov	r2, r7
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	1dfb      	adds	r3, r7, #7
 800a810:	4622      	mov	r2, r4
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	1dbb      	adds	r3, r7, #6
 800a816:	4602      	mov	r2, r0
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	1d7b      	adds	r3, r7, #5
 800a81c:	460a      	mov	r2, r1
 800a81e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a820:	f107 0314 	add.w	r3, r7, #20
 800a824:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a828:	f107 030c 	add.w	r3, r7, #12
 800a82c:	2207      	movs	r2, #7
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f001 f85f 	bl	800b8f4 <memset>
  uint8_t index_input = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 800a83c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a840:	1dfa      	adds	r2, r7, #7
 800a842:	7812      	ldrb	r2, [r2, #0]
 800a844:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a846:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800a84a:	3301      	adds	r3, #1
 800a84c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800a850:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a854:	1dba      	adds	r2, r7, #6
 800a856:	7812      	ldrb	r2, [r2, #0]
 800a858:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a85a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800a85e:	3301      	adds	r3, #1
 800a860:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800a864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a868:	1d7a      	adds	r2, r7, #5
 800a86a:	7812      	ldrb	r2, [r2, #0]
 800a86c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a86e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800a872:	3301      	adds	r3, #1
 800a874:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a878:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a87c:	2218      	movs	r2, #24
 800a87e:	2100      	movs	r1, #0
 800a880:	4618      	mov	r0, r3
 800a882:	f001 f837 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800a886:	233f      	movs	r3, #63	; 0x3f
 800a888:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800a88c:	238a      	movs	r3, #138	; 0x8a
 800a88e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a892:	f107 0314 	add.w	r3, r7, #20
 800a896:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a89a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800a89e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a8a2:	f107 030c 	add.w	r3, r7, #12
 800a8a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a8aa:	2307      	movs	r3, #7
 800a8ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800a8b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fd40 	bl	800b33c <hci_send_req>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da01      	bge.n	800a8c6 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800a8c2:	23ff      	movs	r3, #255	; 0xff
 800a8c4:	e021      	b.n	800a90a <aci_gap_init+0x10c>
  if (resp.Status) {
 800a8c6:	f107 030c 	add.w	r3, r7, #12
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <aci_gap_init+0xda>
    return resp.Status;
 800a8d0:	f107 030c 	add.w	r3, r7, #12
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	e018      	b.n	800a90a <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800a8e8:	f107 030c 	add.w	r3, r7, #12
 800a8ec:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a8f6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800a8f8:	f107 030c 	add.w	r3, r7, #12
 800a8fc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a900:	b29a      	uxth	r2, r3
 800a902:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a906:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a910:	46bd      	mov	sp, r7
 800a912:	bd90      	pop	{r4, r7, pc}

0800a914 <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b0cc      	sub	sp, #304	; 0x130
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4602      	mov	r2, r0
 800a91c:	463b      	mov	r3, r7
 800a91e:	6019      	str	r1, [r3, #0]
 800a920:	1dfb      	adds	r3, r7, #7
 800a922:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a924:	f107 030c 	add.w	r3, r7, #12
 800a928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a92c:	f107 030b 	add.w	r3, r7, #11
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800a93a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a93e:	1dfa      	adds	r2, r7, #7
 800a940:	7812      	ldrb	r2, [r2, #0]
 800a942:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a944:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a948:	3301      	adds	r3, #1
 800a94a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800a94e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a952:	1c58      	adds	r0, r3, #1
 800a954:	1dfb      	adds	r3, r7, #7
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	463b      	mov	r3, r7
 800a95a:	6819      	ldr	r1, [r3, #0]
 800a95c:	f000 ffbc 	bl	800b8d8 <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 800a960:	1dfb      	adds	r3, r7, #7
 800a962:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	4413      	add	r3, r2
 800a96a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a96e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a972:	2218      	movs	r2, #24
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f000 ffbc 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800a97c:	233f      	movs	r3, #63	; 0x3f
 800a97e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a982:	238e      	movs	r3, #142	; 0x8e
 800a984:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a990:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a994:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a998:	f107 030b 	add.w	r3, r7, #11
 800a99c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a9a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 fcc5 	bl	800b33c <hci_send_req>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	da01      	bge.n	800a9bc <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800a9b8:	23ff      	movs	r3, #255	; 0xff
 800a9ba:	e009      	b.n	800a9d0 <aci_gap_update_adv_data+0xbc>
  if (status) {
 800a9bc:	f107 030b 	add.w	r3, r7, #11
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <aci_gap_update_adv_data+0xba>
    return status;
 800a9c6:	f107 030b 	add.w	r3, r7, #11
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	e000      	b.n	800a9d0 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b088      	sub	sp, #32
 800a9de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	2218      	movs	r2, #24
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 ff81 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800a9f2:	233f      	movs	r3, #63	; 0x3f
 800a9f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a9f6:	f240 1301 	movw	r3, #257	; 0x101
 800a9fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a9fc:	1dfb      	adds	r3, r7, #7
 800a9fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800aa00:	2301      	movs	r3, #1
 800aa02:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800aa04:	f107 0308 	add.w	r3, r7, #8
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fc96 	bl	800b33c <hci_send_req>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	da01      	bge.n	800aa1a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800aa16:	23ff      	movs	r3, #255	; 0xff
 800aa18:	e005      	b.n	800aa26 <aci_gatt_init+0x4c>
  if (status) {
 800aa1a:	79fb      	ldrb	r3, [r7, #7]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <aci_gatt_init+0x4a>
    return status;
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	e000      	b.n	800aa26 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800aa2e:	b590      	push	{r4, r7, lr}
 800aa30:	b0cf      	sub	sp, #316	; 0x13c
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	4604      	mov	r4, r0
 800aa36:	4638      	mov	r0, r7
 800aa38:	6001      	str	r1, [r0, #0]
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	1dfb      	adds	r3, r7, #7
 800aa40:	4622      	mov	r2, r4
 800aa42:	701a      	strb	r2, [r3, #0]
 800aa44:	1dbb      	adds	r3, r7, #6
 800aa46:	4602      	mov	r2, r0
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	1d7b      	adds	r3, r7, #5
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800aa50:	f107 030c 	add.w	r3, r7, #12
 800aa54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800aa58:	1dfb      	adds	r3, r7, #7
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d007      	beq.n	800aa70 <aci_gatt_add_service+0x42>
 800aa60:	1dfb      	adds	r3, r7, #7
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d101      	bne.n	800aa6c <aci_gatt_add_service+0x3e>
 800aa68:	2311      	movs	r3, #17
 800aa6a:	e002      	b.n	800aa72 <aci_gatt_add_service+0x44>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <aci_gatt_add_service+0x44>
 800aa70:	2303      	movs	r3, #3
 800aa72:	f107 020c 	add.w	r2, r7, #12
 800aa76:	4413      	add	r3, r2
 800aa78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800aa7c:	f107 0308 	add.w	r3, r7, #8
 800aa80:	2203      	movs	r2, #3
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 ff35 	bl	800b8f4 <memset>
  uint8_t index_input = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800aa90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa94:	1dfa      	adds	r2, r7, #7
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa9a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800aaa4:	1dfb      	adds	r3, r7, #7
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d002      	beq.n	800aab2 <aci_gatt_add_service+0x84>
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d004      	beq.n	800aaba <aci_gatt_add_service+0x8c>
 800aab0:	e007      	b.n	800aac2 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800aab2:	2302      	movs	r3, #2
 800aab4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800aab8:	e005      	b.n	800aac6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800aaba:	2310      	movs	r3, #16
 800aabc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800aac0:	e001      	b.n	800aac6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800aac2:	2347      	movs	r3, #71	; 0x47
 800aac4:	e05d      	b.n	800ab82 <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800aac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aaca:	1c58      	adds	r0, r3, #1
 800aacc:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800aad0:	463b      	mov	r3, r7
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	f000 ff00 	bl	800b8d8 <memcpy>
    index_input += size;
 800aad8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800aadc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800aae0:	4413      	add	r3, r2
 800aae2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800aae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaea:	1dba      	adds	r2, r7, #6
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800aaf0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800aafa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aafe:	1d7a      	adds	r2, r7, #5
 800ab00:	7812      	ldrb	r2, [r2, #0]
 800ab02:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ab04:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ab08:	3301      	adds	r3, #1
 800ab0a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab12:	2218      	movs	r2, #24
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 feec 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800ab1c:	233f      	movs	r3, #63	; 0x3f
 800ab1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800ab22:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ab26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab2a:	f107 030c 	add.w	r3, r7, #12
 800ab2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab32:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ab36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ab42:	2303      	movs	r3, #3
 800ab44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ab48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fbf4 	bl	800b33c <hci_send_req>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	da01      	bge.n	800ab5e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800ab5a:	23ff      	movs	r3, #255	; 0xff
 800ab5c:	e011      	b.n	800ab82 <aci_gatt_add_service+0x154>
  if (resp.Status) {
 800ab5e:	f107 0308 	add.w	r3, r7, #8
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d003      	beq.n	800ab70 <aci_gatt_add_service+0x142>
    return resp.Status;
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	e008      	b.n	800ab82 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ab70:	f107 0308 	add.w	r3, r7, #8
 800ab74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ab7e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd90      	pop	{r4, r7, pc}

0800ab8c <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b0d1      	sub	sp, #324	; 0x144
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	f107 0108 	add.w	r1, r7, #8
 800ab9a:	600a      	str	r2, [r1, #0]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	f107 030e 	add.w	r3, r7, #14
 800aba2:	4622      	mov	r2, r4
 800aba4:	801a      	strh	r2, [r3, #0]
 800aba6:	f107 030d 	add.w	r3, r7, #13
 800abaa:	4602      	mov	r2, r0
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	1dbb      	adds	r3, r7, #6
 800abb0:	460a      	mov	r2, r1
 800abb2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800abb4:	f107 0314 	add.w	r3, r7, #20
 800abb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800abbc:	f107 030d 	add.w	r3, r7, #13
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d008      	beq.n	800abd8 <aci_gatt_add_char+0x4c>
 800abc6:	f107 030d 	add.w	r3, r7, #13
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d101      	bne.n	800abd4 <aci_gatt_add_char+0x48>
 800abd0:	2313      	movs	r3, #19
 800abd2:	e002      	b.n	800abda <aci_gatt_add_char+0x4e>
 800abd4:	2303      	movs	r3, #3
 800abd6:	e000      	b.n	800abda <aci_gatt_add_char+0x4e>
 800abd8:	2305      	movs	r3, #5
 800abda:	f107 0214 	add.w	r2, r7, #20
 800abde:	4413      	add	r3, r2
 800abe0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800abe4:	f107 0310 	add.w	r3, r7, #16
 800abe8:	2203      	movs	r2, #3
 800abea:	2100      	movs	r1, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fe81 	bl	800b8f4 <memset>
  uint8_t index_input = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 800abf8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800abfc:	f107 020e 	add.w	r2, r7, #14
 800ac00:	8812      	ldrh	r2, [r2, #0]
 800ac02:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ac04:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800ac08:	3302      	adds	r3, #2
 800ac0a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800ac0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ac12:	f107 020d 	add.w	r2, r7, #13
 800ac16:	7812      	ldrb	r2, [r2, #0]
 800ac18:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ac1a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800ac1e:	3301      	adds	r3, #1
 800ac20:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800ac24:	f107 030d 	add.w	r3, r7, #13
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d002      	beq.n	800ac34 <aci_gatt_add_char+0xa8>
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d004      	beq.n	800ac3c <aci_gatt_add_char+0xb0>
 800ac32:	e007      	b.n	800ac44 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800ac34:	2302      	movs	r3, #2
 800ac36:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ac3a:	e005      	b.n	800ac48 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800ac3c:	2310      	movs	r3, #16
 800ac3e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ac42:	e001      	b.n	800ac48 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800ac44:	2347      	movs	r3, #71	; 0x47
 800ac46:	e086      	b.n	800ad56 <aci_gatt_add_char+0x1ca>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800ac48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ac4c:	1cd8      	adds	r0, r3, #3
 800ac4e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ac52:	f107 0308 	add.w	r3, r7, #8
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	f000 fe3e 	bl	800b8d8 <memcpy>
    index_input += size;
 800ac5c:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800ac60:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ac64:	4413      	add	r3, r2
 800ac66:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800ac6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac6e:	1dba      	adds	r2, r7, #6
 800ac70:	8812      	ldrh	r2, [r2, #0]
 800ac72:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ac74:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800ac78:	3302      	adds	r3, #2
 800ac7a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800ac7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac82:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ac86:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ac88:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800ac92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac96:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ac9a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ac9c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800aca0:	3301      	adds	r3, #1
 800aca2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800aca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800acaa:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800acae:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800acb0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800acb4:	3301      	adds	r3, #1
 800acb6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800acba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800acbe:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800acc2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800acc4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800acc8:	3301      	adds	r3, #1
 800acca:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800acce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800acd2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800acd6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800acd8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800acdc:	3301      	adds	r3, #1
 800acde:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ace2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ace6:	2218      	movs	r2, #24
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fe02 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800acf0:	233f      	movs	r3, #63	; 0x3f
 800acf2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800acf6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800acfa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800acfe:	f107 0314 	add.w	r3, r7, #20
 800ad02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ad06:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800ad0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ad0e:	f107 0310 	add.w	r3, r7, #16
 800ad12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ad16:	2303      	movs	r3, #3
 800ad18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800ad1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad20:	2100      	movs	r1, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fb0a 	bl	800b33c <hci_send_req>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da01      	bge.n	800ad32 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800ad2e:	23ff      	movs	r3, #255	; 0xff
 800ad30:	e011      	b.n	800ad56 <aci_gatt_add_char+0x1ca>
  if (resp.Status) {
 800ad32:	f107 0310 	add.w	r3, r7, #16
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800ad3c:	f107 0310 	add.w	r3, r7, #16
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	e008      	b.n	800ad56 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800ad44:	f107 0310 	add.w	r3, r7, #16
 800ad48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ad52:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd90      	pop	{r4, r7, pc}

0800ad60 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800ad60:	b5b0      	push	{r4, r5, r7, lr}
 800ad62:	b0cc      	sub	sp, #304	; 0x130
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4605      	mov	r5, r0
 800ad68:	460c      	mov	r4, r1
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	1dbb      	adds	r3, r7, #6
 800ad70:	462a      	mov	r2, r5
 800ad72:	801a      	strh	r2, [r3, #0]
 800ad74:	1d3b      	adds	r3, r7, #4
 800ad76:	4622      	mov	r2, r4
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	1cfb      	adds	r3, r7, #3
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	1cbb      	adds	r3, r7, #2
 800ad82:	460a      	mov	r2, r1
 800ad84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ad86:	f107 030c 	add.w	r3, r7, #12
 800ad8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad8e:	f107 030b 	add.w	r3, r7, #11
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800ad9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ada0:	1dba      	adds	r2, r7, #6
 800ada2:	8812      	ldrh	r2, [r2, #0]
 800ada4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ada6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800adaa:	3302      	adds	r3, #2
 800adac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800adb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adb4:	1d3a      	adds	r2, r7, #4
 800adb6:	8812      	ldrh	r2, [r2, #0]
 800adb8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800adba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800adbe:	3302      	adds	r3, #2
 800adc0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800adc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc8:	1cfa      	adds	r2, r7, #3
 800adca:	7812      	ldrb	r2, [r2, #0]
 800adcc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800adce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800add2:	3301      	adds	r3, #1
 800add4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800add8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800addc:	1cba      	adds	r2, r7, #2
 800adde:	7812      	ldrb	r2, [r2, #0]
 800ade0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ade2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ade6:	3301      	adds	r3, #1
 800ade8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800adec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adf0:	1d98      	adds	r0, r3, #6
 800adf2:	1cbb      	adds	r3, r7, #2
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800adfc:	f000 fd6c 	bl	800b8d8 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800ae00:	1cbb      	adds	r3, r7, #2
 800ae02:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ae0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae12:	2218      	movs	r2, #24
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 fd6c 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800ae1c:	233f      	movs	r3, #63	; 0x3f
 800ae1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800ae22:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ae26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ae2a:	f107 030c 	add.w	r3, r7, #12
 800ae2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae32:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ae36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ae3a:	f107 030b 	add.w	r3, r7, #11
 800ae3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae42:	2301      	movs	r3, #1
 800ae44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ae48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fa74 	bl	800b33c <hci_send_req>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	da01      	bge.n	800ae5e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800ae5a:	23ff      	movs	r3, #255	; 0xff
 800ae5c:	e009      	b.n	800ae72 <aci_gatt_update_char_value+0x112>
  if (status) {
 800ae5e:	f107 030b 	add.w	r3, r7, #11
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d003      	beq.n	800ae70 <aci_gatt_update_char_value+0x110>
    return status;
 800ae68:	f107 030b 	add.w	r3, r7, #11
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	e000      	b.n	800ae72 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae7c <aci_gatt_write_resp>:
                               uint16_t Attr_Handle,
                               uint8_t Write_status,
                               uint8_t Error_Code,
                               uint8_t Attribute_Val_Length,
                               uint8_t Attribute_Val[])
{
 800ae7c:	b5b0      	push	{r4, r5, r7, lr}
 800ae7e:	b0cc      	sub	sp, #304	; 0x130
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	4605      	mov	r5, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	4610      	mov	r0, r2
 800ae88:	4619      	mov	r1, r3
 800ae8a:	1dbb      	adds	r3, r7, #6
 800ae8c:	462a      	mov	r2, r5
 800ae8e:	801a      	strh	r2, [r3, #0]
 800ae90:	1d3b      	adds	r3, r7, #4
 800ae92:	4622      	mov	r2, r4
 800ae94:	801a      	strh	r2, [r3, #0]
 800ae96:	1cfb      	adds	r3, r7, #3
 800ae98:	4602      	mov	r2, r0
 800ae9a:	701a      	strb	r2, [r3, #0]
 800ae9c:	1cbb      	adds	r3, r7, #2
 800ae9e:	460a      	mov	r2, r1
 800aea0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800aea2:	f107 030c 	add.w	r3, r7, #12
 800aea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aeaa:	f107 030b 	add.w	r3, r7, #11
 800aeae:	2200      	movs	r2, #0
 800aeb0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800aeb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aebc:	1dba      	adds	r2, r7, #6
 800aebe:	8812      	ldrh	r2, [r2, #0]
 800aec0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aec2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800aec6:	3302      	adds	r3, #2
 800aec8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800aecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed0:	1d3a      	adds	r2, r7, #4
 800aed2:	8812      	ldrh	r2, [r2, #0]
 800aed4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800aed6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800aeda:	3302      	adds	r3, #2
 800aedc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Write_status = htob(Write_status, 1);
 800aee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aee4:	1cfa      	adds	r2, r7, #3
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800aeea:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800aeee:	3301      	adds	r3, #1
 800aef0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Error_Code = htob(Error_Code, 1);
 800aef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aef8:	1cba      	adds	r2, r7, #2
 800aefa:	7812      	ldrb	r2, [r2, #0]
 800aefc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800aefe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800af02:	3301      	adds	r3, #1
 800af04:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800af08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af0c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800af10:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800af12:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800af16:	3301      	adds	r3, #1
 800af18:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 800af1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af20:	3307      	adds	r3, #7
 800af22:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800af26:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fcd4 	bl	800b8d8 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 800af30:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800af34:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800af38:	4413      	add	r3, r2
 800af3a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800af3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af42:	2218      	movs	r2, #24
 800af44:	2100      	movs	r1, #0
 800af46:	4618      	mov	r0, r3
 800af48:	f000 fcd4 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800af4c:	233f      	movs	r3, #63	; 0x3f
 800af4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 800af52:	f44f 7393 	mov.w	r3, #294	; 0x126
 800af56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af5a:	f107 030c 	add.w	r3, r7, #12
 800af5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af62:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800af66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af6a:	f107 030b 	add.w	r3, r7, #11
 800af6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af72:	2301      	movs	r3, #1
 800af74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800af78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af7c:	2100      	movs	r1, #0
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f9dc 	bl	800b33c <hci_send_req>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	da01      	bge.n	800af8e <aci_gatt_write_resp+0x112>
    return BLE_STATUS_TIMEOUT;
 800af8a:	23ff      	movs	r3, #255	; 0xff
 800af8c:	e009      	b.n	800afa2 <aci_gatt_write_resp+0x126>
  if (status) {
 800af8e:	f107 030b 	add.w	r3, r7, #11
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <aci_gatt_write_resp+0x124>
    return status;
 800af98:	f107 030b 	add.w	r3, r7, #11
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	e000      	b.n	800afa2 <aci_gatt_write_resp+0x126>
  }
  return BLE_STATUS_SUCCESS;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bdb0      	pop	{r4, r5, r7, pc}

0800afac <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b0ee      	sub	sp, #440	; 0x1b8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	f107 0308 	add.w	r3, r7, #8
 800afb6:	6019      	str	r1, [r3, #0]
 800afb8:	1d3b      	adds	r3, r7, #4
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	f107 030f 	add.w	r3, r7, #15
 800afc0:	4602      	mov	r2, r0
 800afc2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 800afc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800afc8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800afcc:	f107 0314 	add.w	r3, r7, #20
 800afd0:	2280      	movs	r2, #128	; 0x80
 800afd2:	2100      	movs	r1, #0
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fc8d 	bl	800b8f4 <memset>
  uint8_t index_input = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 800afe0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800afe4:	f107 020f 	add.w	r2, r7, #15
 800afe8:	7812      	ldrb	r2, [r2, #0]
 800afea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800afec:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800aff0:	3301      	adds	r3, #1
 800aff2:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aff6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800affa:	2218      	movs	r2, #24
 800affc:	2100      	movs	r1, #0
 800affe:	4618      	mov	r0, r3
 800b000:	f000 fc78 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800b004:	233f      	movs	r3, #63	; 0x3f
 800b006:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 800b00a:	230d      	movs	r3, #13
 800b00c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 800b010:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b014:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 800b018:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800b01c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 800b020:	f107 0314 	add.w	r3, r7, #20
 800b024:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 800b028:	2380      	movs	r3, #128	; 0x80
 800b02a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 800b02e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800b032:	2100      	movs	r1, #0
 800b034:	4618      	mov	r0, r3
 800b036:	f000 f981 	bl	800b33c <hci_send_req>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	da01      	bge.n	800b044 <aci_hal_read_config_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800b040:	23ff      	movs	r3, #255	; 0xff
 800b042:	e01c      	b.n	800b07e <aci_hal_read_config_data+0xd2>
  if (resp.Status) {
 800b044:	f107 0314 	add.w	r3, r7, #20
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <aci_hal_read_config_data+0xaa>
    return resp.Status;
 800b04e:	f107 0314 	add.w	r3, r7, #20
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	e013      	b.n	800b07e <aci_hal_read_config_data+0xd2>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800b056:	f107 0314 	add.w	r3, r7, #20
 800b05a:	785a      	ldrb	r2, [r3, #1]
 800b05c:	f107 0308 	add.w	r3, r7, #8
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800b064:	f107 0308 	add.w	r3, r7, #8
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	461a      	mov	r2, r3
 800b06e:	f107 0314 	add.w	r3, r7, #20
 800b072:	1c99      	adds	r1, r3, #2
 800b074:	1d3b      	adds	r3, r7, #4
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	f000 fc2e 	bl	800b8d8 <memcpy>
  return BLE_STATUS_SUCCESS;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b0cc      	sub	sp, #304	; 0x130
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4602      	mov	r2, r0
 800b090:	1dfb      	adds	r3, r7, #7
 800b092:	701a      	strb	r2, [r3, #0]
 800b094:	1dbb      	adds	r3, r7, #6
 800b096:	460a      	mov	r2, r1
 800b098:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b09a:	f107 030c 	add.w	r3, r7, #12
 800b09e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b0a2:	f107 030b 	add.w	r3, r7, #11
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b0b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0b4:	1dfa      	adds	r2, r7, #7
 800b0b6:	7812      	ldrb	r2, [r2, #0]
 800b0b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b0ba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800b0be:	3301      	adds	r3, #1
 800b0c0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 800b0c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c8:	1dba      	adds	r2, r7, #6
 800b0ca:	7812      	ldrb	r2, [r2, #0]
 800b0cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b0ce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b0d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0dc:	2218      	movs	r2, #24
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fc07 	bl	800b8f4 <memset>
  rq.ogf = 0x3f;
 800b0e6:	233f      	movs	r3, #63	; 0x3f
 800b0e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b0ec:	230f      	movs	r3, #15
 800b0ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b0fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800b0fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b102:	f107 030b 	add.w	r3, r7, #11
 800b106:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b10a:	2301      	movs	r3, #1
 800b10c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b114:	2100      	movs	r1, #0
 800b116:	4618      	mov	r0, r3
 800b118:	f000 f910 	bl	800b33c <hci_send_req>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da01      	bge.n	800b126 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b122:	23ff      	movs	r3, #255	; 0xff
 800b124:	e009      	b.n	800b13a <aci_hal_set_tx_power_level+0xb2>
  if (status) {
 800b126:	f107 030b 	add.w	r3, r7, #11
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <aci_hal_set_tx_power_level+0xb0>
    return status;
 800b130:	f107 030b 	add.w	r3, r7, #11
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	e000      	b.n	800b13a <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3308      	adds	r3, #8
 800b150:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	2b04      	cmp	r3, #4
 800b158:	d001      	beq.n	800b15e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800b15a:	2301      	movs	r3, #1
 800b15c:	e00c      	b.n	800b178 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3302      	adds	r3, #2
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b16c:	3b03      	subs	r3, #3
 800b16e:	429a      	cmp	r2, r3
 800b170:	d001      	beq.n	800b176 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800b172:	2302      	movs	r3, #2
 800b174:	e000      	b.n	800b178 <verify_packet+0x34>
  
  return 0;      
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b0a6      	sub	sp, #152	; 0x98
 800b188:	af00      	add	r7, sp, #0
 800b18a:	607b      	str	r3, [r7, #4]
 800b18c:	4603      	mov	r3, r0
 800b18e:	81fb      	strh	r3, [r7, #14]
 800b190:	460b      	mov	r3, r1
 800b192:	81bb      	strh	r3, [r7, #12]
 800b194:	4613      	mov	r3, r2
 800b196:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b198:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b19c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1a0:	b21a      	sxth	r2, r3
 800b1a2:	89fb      	ldrh	r3, [r7, #14]
 800b1a4:	029b      	lsls	r3, r3, #10
 800b1a6:	b21b      	sxth	r3, r3
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	b21b      	sxth	r3, r3
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b1b8:	f107 0318 	add.w	r3, r7, #24
 800b1bc:	3301      	adds	r3, #1
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f107 0314 	add.w	r3, r7, #20
 800b1c4:	8819      	ldrh	r1, [r3, #0]
 800b1c6:	789b      	ldrb	r3, [r3, #2]
 800b1c8:	8011      	strh	r1, [r2, #0]
 800b1ca:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b1cc:	f107 0318 	add.w	r3, r7, #24
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	7afa      	ldrb	r2, [r7, #11]
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 fb7e 	bl	800b8d8 <memcpy>
  
  if (hciContext.io.Send)
 800b1dc:	4b08      	ldr	r3, [pc, #32]	; (800b200 <send_cmd+0x7c>)
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800b1e4:	4b06      	ldr	r3, [pc, #24]	; (800b200 <send_cmd+0x7c>)
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	7afa      	ldrb	r2, [r7, #11]
 800b1ea:	b292      	uxth	r2, r2
 800b1ec:	3204      	adds	r2, #4
 800b1ee:	b291      	uxth	r1, r2
 800b1f0:	f107 0218 	add.w	r2, r7, #24
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	3798      	adds	r7, #152	; 0x98
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	20000928 	.word	0x20000928

0800b204 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800b20e:	e00a      	b.n	800b226 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800b210:	f107 030c 	add.w	r3, r7, #12
 800b214:	4619      	mov	r1, r3
 800b216:	6838      	ldr	r0, [r7, #0]
 800b218:	f000 faea 	bl	800b7f0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa51 	bl	800b6c8 <list_insert_head>
  while (!list_is_empty(src_list))
 800b226:	6838      	ldr	r0, [r7, #0]
 800b228:	f000 fa2c 	bl	800b684 <list_is_empty>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0ee      	beq.n	800b210 <move_list+0xc>
  }
}
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b242:	e009      	b.n	800b258 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800b244:	1d3b      	adds	r3, r7, #4
 800b246:	4619      	mov	r1, r3
 800b248:	4809      	ldr	r0, [pc, #36]	; (800b270 <free_event_list+0x34>)
 800b24a:	f000 faaa 	bl	800b7a2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4619      	mov	r1, r3
 800b252:	4808      	ldr	r0, [pc, #32]	; (800b274 <free_event_list+0x38>)
 800b254:	f000 fa5e 	bl	800b714 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b258:	4806      	ldr	r0, [pc, #24]	; (800b274 <free_event_list+0x38>)
 800b25a:	f000 faf0 	bl	800b83e <list_get_size>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b04      	cmp	r3, #4
 800b262:	ddef      	ble.n	800b244 <free_event_list+0x8>
  }
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20000bac 	.word	0x20000bac
 800b274:	20000ba4 	.word	0x20000ba4

0800b278 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800b288:	4a18      	ldr	r2, [pc, #96]	; (800b2ec <hci_init+0x74>)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800b28e:	4818      	ldr	r0, [pc, #96]	; (800b2f0 <hci_init+0x78>)
 800b290:	f000 f9e8 	bl	800b664 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800b294:	4817      	ldr	r0, [pc, #92]	; (800b2f4 <hci_init+0x7c>)
 800b296:	f000 f9e5 	bl	800b664 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800b29a:	f7f7 ff0f 	bl	80030bc <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73fb      	strb	r3, [r7, #15]
 800b2a2:	e00c      	b.n	800b2be <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	228c      	movs	r2, #140	; 0x8c
 800b2a8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ac:	4a12      	ldr	r2, [pc, #72]	; (800b2f8 <hci_init+0x80>)
 800b2ae:	4413      	add	r3, r2
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	480f      	ldr	r0, [pc, #60]	; (800b2f0 <hci_init+0x78>)
 800b2b4:	f000 fa2e 	bl	800b714 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	73fb      	strb	r3, [r7, #15]
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	2b09      	cmp	r3, #9
 800b2c2:	d9ef      	bls.n	800b2a4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800b2c4:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <hci_init+0x74>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <hci_init+0x5c>
 800b2cc:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <hci_init+0x74>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b2d4:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <hci_init+0x74>)
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <hci_init+0x6a>
 800b2dc:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <hci_init+0x74>)
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	4798      	blx	r3
}
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20000928 	.word	0x20000928
 800b2f0:	20000ba4 	.word	0x20000ba4
 800b2f4:	20000bac 	.word	0x20000bac
 800b2f8:	200003b0 	.word	0x200003b0

0800b2fc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a0b      	ldr	r2, [pc, #44]	; (800b338 <hci_register_io_bus+0x3c>)
 800b30a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	4a09      	ldr	r2, [pc, #36]	; (800b338 <hci_register_io_bus+0x3c>)
 800b312:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4a07      	ldr	r2, [pc, #28]	; (800b338 <hci_register_io_bus+0x3c>)
 800b31a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	4a05      	ldr	r2, [pc, #20]	; (800b338 <hci_register_io_bus+0x3c>)
 800b322:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	4a03      	ldr	r2, [pc, #12]	; (800b338 <hci_register_io_bus+0x3c>)
 800b32a:	6093      	str	r3, [r2, #8]
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	20000928 	.word	0x20000928

0800b33c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08e      	sub	sp, #56	; 0x38
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	885b      	ldrh	r3, [r3, #2]
 800b34c:	b21b      	sxth	r3, r3
 800b34e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b352:	b21a      	sxth	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	029b      	lsls	r3, r3, #10
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	4313      	orrs	r3, r2
 800b35e:	b21b      	sxth	r3, r3
 800b360:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b366:	f107 0308 	add.w	r3, r7, #8
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 f97a 	bl	800b664 <list_init_head>

  free_event_list();
 800b370:	f7ff ff64 	bl	800b23c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8818      	ldrh	r0, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	8859      	ldrh	r1, [r3, #2]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	b2da      	uxtb	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f7ff fefd 	bl	800b184 <send_cmd>
  
  if (async)
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <hci_send_req+0x58>
  {
    return 0;
 800b390:	2300      	movs	r3, #0
 800b392:	e0e5      	b.n	800b560 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b394:	f7fb fb52 	bl	8006a3c <HAL_GetTick>
 800b398:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b39a:	f7fb fb4f 	bl	8006a3c <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3a8:	f200 80b6 	bhi.w	800b518 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b3ac:	486e      	ldr	r0, [pc, #440]	; (800b568 <hci_send_req+0x22c>)
 800b3ae:	f000 f969 	bl	800b684 <list_is_empty>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d000      	beq.n	800b3ba <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b3b8:	e7ef      	b.n	800b39a <hci_send_req+0x5e>
      {
        break;
 800b3ba:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b3bc:	f107 0310 	add.w	r3, r7, #16
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4869      	ldr	r0, [pc, #420]	; (800b568 <hci_send_req+0x22c>)
 800b3c4:	f000 f9ed 	bl	800b7a2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d17b      	bne.n	800b4ce <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	3301      	adds	r3, #1
 800b3da:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	3308      	adds	r3, #8
 800b3e0:	3303      	adds	r3, #3
 800b3e2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b3ea:	3b03      	subs	r3, #3
 800b3ec:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b3f4:	d04d      	beq.n	800b492 <hci_send_req+0x156>
 800b3f6:	2b3e      	cmp	r3, #62	; 0x3e
 800b3f8:	dc6b      	bgt.n	800b4d2 <hci_send_req+0x196>
 800b3fa:	2b10      	cmp	r3, #16
 800b3fc:	f000 808e 	beq.w	800b51c <hci_send_req+0x1e0>
 800b400:	2b10      	cmp	r3, #16
 800b402:	dc66      	bgt.n	800b4d2 <hci_send_req+0x196>
 800b404:	2b0e      	cmp	r3, #14
 800b406:	d024      	beq.n	800b452 <hci_send_req+0x116>
 800b408:	2b0f      	cmp	r3, #15
 800b40a:	d162      	bne.n	800b4d2 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	885b      	ldrh	r3, [r3, #2]
 800b414:	b29b      	uxth	r3, r3
 800b416:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b418:	429a      	cmp	r2, r3
 800b41a:	f040 8081 	bne.w	800b520 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	2b0f      	cmp	r3, #15
 800b424:	d004      	beq.n	800b430 <hci_send_req+0xf4>
          if (cs->status) {
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d053      	beq.n	800b4d6 <hci_send_req+0x19a>
            goto failed;
 800b42e:	e07a      	b.n	800b526 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	695a      	ldr	r2, [r3, #20]
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	429a      	cmp	r2, r3
 800b438:	bf28      	it	cs
 800b43a:	461a      	movcs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6918      	ldr	r0, [r3, #16]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	461a      	mov	r2, r3
 800b44a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b44c:	f000 fa44 	bl	800b8d8 <memcpy>
        goto done;
 800b450:	e07a      	b.n	800b548 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b460:	429a      	cmp	r2, r3
 800b462:	d15f      	bne.n	800b524 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	3303      	adds	r3, #3
 800b468:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	3b03      	subs	r3, #3
 800b46e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	695a      	ldr	r2, [r3, #20]
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	429a      	cmp	r2, r3
 800b478:	bf28      	it	cs
 800b47a:	461a      	movcs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6918      	ldr	r0, [r3, #16]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	461a      	mov	r2, r3
 800b48a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b48c:	f000 fa24 	bl	800b8d8 <memcpy>
        goto done;
 800b490:	e05a      	b.n	800b548 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d11a      	bne.n	800b4da <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	695a      	ldr	r2, [r3, #20]
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	bf28      	it	cs
 800b4b4:	461a      	movcs	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6918      	ldr	r0, [r3, #16]
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	1c59      	adds	r1, r3, #1
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f000 fa06 	bl	800b8d8 <memcpy>
        goto done;
 800b4cc:	e03c      	b.n	800b548 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800b4ce:	bf00      	nop
 800b4d0:	e004      	b.n	800b4dc <hci_send_req+0x1a0>
        break;
 800b4d2:	bf00      	nop
 800b4d4:	e002      	b.n	800b4dc <hci_send_req+0x1a0>
          break;
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <hci_send_req+0x1a0>
          break;
 800b4da:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b4dc:	4823      	ldr	r0, [pc, #140]	; (800b56c <hci_send_req+0x230>)
 800b4de:	f000 f8d1 	bl	800b684 <list_is_empty>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00d      	beq.n	800b504 <hci_send_req+0x1c8>
 800b4e8:	481f      	ldr	r0, [pc, #124]	; (800b568 <hci_send_req+0x22c>)
 800b4ea:	f000 f8cb 	bl	800b684 <list_is_empty>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d007      	beq.n	800b504 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	481c      	ldr	r0, [pc, #112]	; (800b56c <hci_send_req+0x230>)
 800b4fa:	f000 f90b 	bl	800b714 <list_insert_tail>
      hciReadPacket=NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	e008      	b.n	800b516 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	f107 0308 	add.w	r3, r7, #8
 800b50a:	4611      	mov	r1, r2
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 f901 	bl	800b714 <list_insert_tail>
      hciReadPacket=NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	613b      	str	r3, [r7, #16]
  {
 800b516:	e73d      	b.n	800b394 <hci_send_req+0x58>
        goto failed;
 800b518:	bf00      	nop
 800b51a:	e004      	b.n	800b526 <hci_send_req+0x1ea>
        goto failed;
 800b51c:	bf00      	nop
 800b51e:	e002      	b.n	800b526 <hci_send_req+0x1ea>
          goto failed;
 800b520:	bf00      	nop
 800b522:	e000      	b.n	800b526 <hci_send_req+0x1ea>
          goto failed;
 800b524:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d004      	beq.n	800b536 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	4619      	mov	r1, r3
 800b530:	480e      	ldr	r0, [pc, #56]	; (800b56c <hci_send_req+0x230>)
 800b532:	f000 f8c9 	bl	800b6c8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b536:	f107 0308 	add.w	r3, r7, #8
 800b53a:	4619      	mov	r1, r3
 800b53c:	480a      	ldr	r0, [pc, #40]	; (800b568 <hci_send_req+0x22c>)
 800b53e:	f7ff fe61 	bl	800b204 <move_list>

  return -1;
 800b542:	f04f 33ff 	mov.w	r3, #4294967295
 800b546:	e00b      	b.n	800b560 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	4619      	mov	r1, r3
 800b54c:	4807      	ldr	r0, [pc, #28]	; (800b56c <hci_send_req+0x230>)
 800b54e:	f000 f8bb 	bl	800b6c8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b552:	f107 0308 	add.w	r3, r7, #8
 800b556:	4619      	mov	r1, r3
 800b558:	4803      	ldr	r0, [pc, #12]	; (800b568 <hci_send_req+0x22c>)
 800b55a:	f7ff fe53 	bl	800b204 <move_list>

  return 0;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3738      	adds	r7, #56	; 0x38
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000bac 	.word	0x20000bac
 800b56c:	20000ba4 	.word	0x20000ba4

0800b570 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b57a:	e013      	b.n	800b5a4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b57c:	1d3b      	adds	r3, r7, #4
 800b57e:	4619      	mov	r1, r3
 800b580:	480e      	ldr	r0, [pc, #56]	; (800b5bc <hci_user_evt_proc+0x4c>)
 800b582:	f000 f90e 	bl	800b7a2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b586:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <hci_user_evt_proc+0x50>)
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d005      	beq.n	800b59a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b58e:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <hci_user_evt_proc+0x50>)
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	3208      	adds	r2, #8
 800b596:	4610      	mov	r0, r2
 800b598:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4619      	mov	r1, r3
 800b59e:	4809      	ldr	r0, [pc, #36]	; (800b5c4 <hci_user_evt_proc+0x54>)
 800b5a0:	f000 f8b8 	bl	800b714 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b5a4:	4805      	ldr	r0, [pc, #20]	; (800b5bc <hci_user_evt_proc+0x4c>)
 800b5a6:	f000 f86d 	bl	800b684 <list_is_empty>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0e5      	beq.n	800b57c <hci_user_evt_proc+0xc>
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	bf00      	nop
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000bac 	.word	0x20000bac
 800b5c0:	20000928 	.word	0x20000928
 800b5c4:	20000ba4 	.word	0x20000ba4

0800b5c8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b5d8:	481f      	ldr	r0, [pc, #124]	; (800b658 <hci_notify_asynch_evt+0x90>)
 800b5da:	f000 f853 	bl	800b684 <list_is_empty>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d132      	bne.n	800b64a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	481b      	ldr	r0, [pc, #108]	; (800b658 <hci_notify_asynch_evt+0x90>)
 800b5ec:	f000 f8d9 	bl	800b7a2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800b5f0:	4b1a      	ldr	r3, [pc, #104]	; (800b65c <hci_notify_asynch_evt+0x94>)
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d02a      	beq.n	800b64e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b5f8:	4b18      	ldr	r3, [pc, #96]	; (800b65c <hci_notify_asynch_evt+0x94>)
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	3208      	adds	r2, #8
 800b600:	2180      	movs	r1, #128	; 0x80
 800b602:	4610      	mov	r0, r2
 800b604:	4798      	blx	r3
 800b606:	4603      	mov	r3, r0
 800b608:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800b60a:	7cfb      	ldrb	r3, [r7, #19]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d016      	beq.n	800b63e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	7cfa      	ldrb	r2, [r7, #19]
 800b614:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7ff fd92 	bl	800b144 <verify_packet>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d105      	bne.n	800b632 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4619      	mov	r1, r3
 800b62a:	480d      	ldr	r0, [pc, #52]	; (800b660 <hci_notify_asynch_evt+0x98>)
 800b62c:	f000 f872 	bl	800b714 <list_insert_tail>
 800b630:	e00d      	b.n	800b64e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4619      	mov	r1, r3
 800b636:	4808      	ldr	r0, [pc, #32]	; (800b658 <hci_notify_asynch_evt+0x90>)
 800b638:	f000 f846 	bl	800b6c8 <list_insert_head>
 800b63c:	e007      	b.n	800b64e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4619      	mov	r1, r3
 800b642:	4805      	ldr	r0, [pc, #20]	; (800b658 <hci_notify_asynch_evt+0x90>)
 800b644:	f000 f840 	bl	800b6c8 <list_insert_head>
 800b648:	e001      	b.n	800b64e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800b64a:	2301      	movs	r3, #1
 800b64c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800b64e:	697b      	ldr	r3, [r7, #20]
  
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20000ba4 	.word	0x20000ba4
 800b65c:	20000928 	.word	0x20000928
 800b660:	20000bac 	.word	0x20000bac

0800b664 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	605a      	str	r2, [r3, #4]
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b68c:	f3ef 8310 	mrs	r3, PRIMASK
 800b690:	60fb      	str	r3, [r7, #12]
  return(result);
 800b692:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b696:	b672      	cpsid	i
}
 800b698:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d102      	bne.n	800b6aa <list_is_empty+0x26>
  {
    return_value = 1;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	75fb      	strb	r3, [r7, #23]
 800b6a8:	e001      	b.n	800b6ae <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	75fb      	strb	r3, [r7, #23]
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f383 8810 	msr	PRIMASK, r3
}
 800b6b8:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b6da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6dc:	b672      	cpsid	i
}
 800b6de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	605a      	str	r2, [r3, #4]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	f383 8810 	msr	PRIMASK, r3
}
 800b706:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b708:	bf00      	nop
 800b70a:	371c      	adds	r7, #28
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800b714:	b480      	push	{r7}
 800b716:	b087      	sub	sp, #28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b71e:	f3ef 8310 	mrs	r3, PRIMASK
 800b722:	60fb      	str	r3, [r7, #12]
  return(result);
 800b724:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b726:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b728:	b672      	cpsid	i
}
 800b72a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f383 8810 	msr	PRIMASK, r3
}
 800b752:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b754:	bf00      	nop
 800b756:	371c      	adds	r7, #28
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b768:	f3ef 8310 	mrs	r3, PRIMASK
 800b76c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b76e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b770:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b772:	b672      	cpsid	i
}
 800b774:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	6812      	ldr	r2, [r2, #0]
 800b77e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	6852      	ldr	r2, [r2, #4]
 800b788:	605a      	str	r2, [r3, #4]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f383 8810 	msr	PRIMASK, r3
}
 800b794:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b086      	sub	sp, #24
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b7b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b7b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7b6:	b672      	cpsid	i
}
 800b7b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff ffca 	bl	800b760 <list_remove_node>
  (*node)->next = NULL;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	605a      	str	r2, [r3, #4]
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	f383 8810 	msr	PRIMASK, r3
}
 800b7e6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b7e8:	bf00      	nop
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b7fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800b800:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b804:	b672      	cpsid	i
}
 800b806:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff ffa3 	bl	800b760 <list_remove_node>
  (*node)->next = NULL;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2200      	movs	r2, #0
 800b820:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2200      	movs	r2, #0
 800b828:	605a      	str	r2, [r3, #4]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	f383 8810 	msr	PRIMASK, r3
}
 800b834:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b836:	bf00      	nop
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b83e:	b480      	push	{r7}
 800b840:	b089      	sub	sp, #36	; 0x24
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  int size = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b84a:	f3ef 8310 	mrs	r3, PRIMASK
 800b84e:	613b      	str	r3, [r7, #16]
  return(result);
 800b850:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b854:	b672      	cpsid	i
}
 800b856:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b85e:	e005      	b.n	800b86c <list_get_size+0x2e>
  {
    size++;
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	3301      	adds	r3, #1
 800b864:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b86c:	69ba      	ldr	r2, [r7, #24]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d1f5      	bne.n	800b860 <list_get_size+0x22>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f383 8810 	msr	PRIMASK, r3
}
 800b87e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800b880:	69fb      	ldr	r3, [r7, #28]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3724      	adds	r7, #36	; 0x24
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
	...

0800b890 <__libc_init_array>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	4d0d      	ldr	r5, [pc, #52]	; (800b8c8 <__libc_init_array+0x38>)
 800b894:	4c0d      	ldr	r4, [pc, #52]	; (800b8cc <__libc_init_array+0x3c>)
 800b896:	1b64      	subs	r4, r4, r5
 800b898:	10a4      	asrs	r4, r4, #2
 800b89a:	2600      	movs	r6, #0
 800b89c:	42a6      	cmp	r6, r4
 800b89e:	d109      	bne.n	800b8b4 <__libc_init_array+0x24>
 800b8a0:	4d0b      	ldr	r5, [pc, #44]	; (800b8d0 <__libc_init_array+0x40>)
 800b8a2:	4c0c      	ldr	r4, [pc, #48]	; (800b8d4 <__libc_init_array+0x44>)
 800b8a4:	f002 ffd4 	bl	800e850 <_init>
 800b8a8:	1b64      	subs	r4, r4, r5
 800b8aa:	10a4      	asrs	r4, r4, #2
 800b8ac:	2600      	movs	r6, #0
 800b8ae:	42a6      	cmp	r6, r4
 800b8b0:	d105      	bne.n	800b8be <__libc_init_array+0x2e>
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b8:	4798      	blx	r3
 800b8ba:	3601      	adds	r6, #1
 800b8bc:	e7ee      	b.n	800b89c <__libc_init_array+0xc>
 800b8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c2:	4798      	blx	r3
 800b8c4:	3601      	adds	r6, #1
 800b8c6:	e7f2      	b.n	800b8ae <__libc_init_array+0x1e>
 800b8c8:	08072c60 	.word	0x08072c60
 800b8cc:	08072c60 	.word	0x08072c60
 800b8d0:	08072c60 	.word	0x08072c60
 800b8d4:	08072c64 	.word	0x08072c64

0800b8d8 <memcpy>:
 800b8d8:	440a      	add	r2, r1
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8e0:	d100      	bne.n	800b8e4 <memcpy+0xc>
 800b8e2:	4770      	bx	lr
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ee:	4291      	cmp	r1, r2
 800b8f0:	d1f9      	bne.n	800b8e6 <memcpy+0xe>
 800b8f2:	bd10      	pop	{r4, pc}

0800b8f4 <memset>:
 800b8f4:	4402      	add	r2, r0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d100      	bne.n	800b8fe <memset+0xa>
 800b8fc:	4770      	bx	lr
 800b8fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b902:	e7f9      	b.n	800b8f8 <memset+0x4>

0800b904 <__cvt>:
 800b904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b908:	ec55 4b10 	vmov	r4, r5, d0
 800b90c:	2d00      	cmp	r5, #0
 800b90e:	460e      	mov	r6, r1
 800b910:	4619      	mov	r1, r3
 800b912:	462b      	mov	r3, r5
 800b914:	bfbb      	ittet	lt
 800b916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b91a:	461d      	movlt	r5, r3
 800b91c:	2300      	movge	r3, #0
 800b91e:	232d      	movlt	r3, #45	; 0x2d
 800b920:	700b      	strb	r3, [r1, #0]
 800b922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b928:	4691      	mov	r9, r2
 800b92a:	f023 0820 	bic.w	r8, r3, #32
 800b92e:	bfbc      	itt	lt
 800b930:	4622      	movlt	r2, r4
 800b932:	4614      	movlt	r4, r2
 800b934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b938:	d005      	beq.n	800b946 <__cvt+0x42>
 800b93a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b93e:	d100      	bne.n	800b942 <__cvt+0x3e>
 800b940:	3601      	adds	r6, #1
 800b942:	2102      	movs	r1, #2
 800b944:	e000      	b.n	800b948 <__cvt+0x44>
 800b946:	2103      	movs	r1, #3
 800b948:	ab03      	add	r3, sp, #12
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	ab02      	add	r3, sp, #8
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	ec45 4b10 	vmov	d0, r4, r5
 800b954:	4653      	mov	r3, sl
 800b956:	4632      	mov	r2, r6
 800b958:	f000 fd8e 	bl	800c478 <_dtoa_r>
 800b95c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b960:	4607      	mov	r7, r0
 800b962:	d102      	bne.n	800b96a <__cvt+0x66>
 800b964:	f019 0f01 	tst.w	r9, #1
 800b968:	d022      	beq.n	800b9b0 <__cvt+0xac>
 800b96a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b96e:	eb07 0906 	add.w	r9, r7, r6
 800b972:	d110      	bne.n	800b996 <__cvt+0x92>
 800b974:	783b      	ldrb	r3, [r7, #0]
 800b976:	2b30      	cmp	r3, #48	; 0x30
 800b978:	d10a      	bne.n	800b990 <__cvt+0x8c>
 800b97a:	2200      	movs	r2, #0
 800b97c:	2300      	movs	r3, #0
 800b97e:	4620      	mov	r0, r4
 800b980:	4629      	mov	r1, r5
 800b982:	f7f5 f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b986:	b918      	cbnz	r0, 800b990 <__cvt+0x8c>
 800b988:	f1c6 0601 	rsb	r6, r6, #1
 800b98c:	f8ca 6000 	str.w	r6, [sl]
 800b990:	f8da 3000 	ldr.w	r3, [sl]
 800b994:	4499      	add	r9, r3
 800b996:	2200      	movs	r2, #0
 800b998:	2300      	movs	r3, #0
 800b99a:	4620      	mov	r0, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	f7f5 f89b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9a2:	b108      	cbz	r0, 800b9a8 <__cvt+0xa4>
 800b9a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9a8:	2230      	movs	r2, #48	; 0x30
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	454b      	cmp	r3, r9
 800b9ae:	d307      	bcc.n	800b9c0 <__cvt+0xbc>
 800b9b0:	9b03      	ldr	r3, [sp, #12]
 800b9b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9b4:	1bdb      	subs	r3, r3, r7
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	b004      	add	sp, #16
 800b9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c0:	1c59      	adds	r1, r3, #1
 800b9c2:	9103      	str	r1, [sp, #12]
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	e7f0      	b.n	800b9aa <__cvt+0xa6>

0800b9c8 <__exponent>:
 800b9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	bfb8      	it	lt
 800b9d0:	4249      	neglt	r1, r1
 800b9d2:	f803 2b02 	strb.w	r2, [r3], #2
 800b9d6:	bfb4      	ite	lt
 800b9d8:	222d      	movlt	r2, #45	; 0x2d
 800b9da:	222b      	movge	r2, #43	; 0x2b
 800b9dc:	2909      	cmp	r1, #9
 800b9de:	7042      	strb	r2, [r0, #1]
 800b9e0:	dd2a      	ble.n	800ba38 <__exponent+0x70>
 800b9e2:	f10d 0407 	add.w	r4, sp, #7
 800b9e6:	46a4      	mov	ip, r4
 800b9e8:	270a      	movs	r7, #10
 800b9ea:	46a6      	mov	lr, r4
 800b9ec:	460a      	mov	r2, r1
 800b9ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9f2:	fb07 1516 	mls	r5, r7, r6, r1
 800b9f6:	3530      	adds	r5, #48	; 0x30
 800b9f8:	2a63      	cmp	r2, #99	; 0x63
 800b9fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ba02:	4631      	mov	r1, r6
 800ba04:	dcf1      	bgt.n	800b9ea <__exponent+0x22>
 800ba06:	3130      	adds	r1, #48	; 0x30
 800ba08:	f1ae 0502 	sub.w	r5, lr, #2
 800ba0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ba10:	1c44      	adds	r4, r0, #1
 800ba12:	4629      	mov	r1, r5
 800ba14:	4561      	cmp	r1, ip
 800ba16:	d30a      	bcc.n	800ba2e <__exponent+0x66>
 800ba18:	f10d 0209 	add.w	r2, sp, #9
 800ba1c:	eba2 020e 	sub.w	r2, r2, lr
 800ba20:	4565      	cmp	r5, ip
 800ba22:	bf88      	it	hi
 800ba24:	2200      	movhi	r2, #0
 800ba26:	4413      	add	r3, r2
 800ba28:	1a18      	subs	r0, r3, r0
 800ba2a:	b003      	add	sp, #12
 800ba2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba36:	e7ed      	b.n	800ba14 <__exponent+0x4c>
 800ba38:	2330      	movs	r3, #48	; 0x30
 800ba3a:	3130      	adds	r1, #48	; 0x30
 800ba3c:	7083      	strb	r3, [r0, #2]
 800ba3e:	70c1      	strb	r1, [r0, #3]
 800ba40:	1d03      	adds	r3, r0, #4
 800ba42:	e7f1      	b.n	800ba28 <__exponent+0x60>

0800ba44 <_printf_float>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	ed2d 8b02 	vpush	{d8}
 800ba4c:	b08d      	sub	sp, #52	; 0x34
 800ba4e:	460c      	mov	r4, r1
 800ba50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba54:	4616      	mov	r6, r2
 800ba56:	461f      	mov	r7, r3
 800ba58:	4605      	mov	r5, r0
 800ba5a:	f001 fc01 	bl	800d260 <_localeconv_r>
 800ba5e:	f8d0 a000 	ldr.w	sl, [r0]
 800ba62:	4650      	mov	r0, sl
 800ba64:	f7f4 fbbc 	bl	80001e0 <strlen>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba6c:	6823      	ldr	r3, [r4, #0]
 800ba6e:	9305      	str	r3, [sp, #20]
 800ba70:	f8d8 3000 	ldr.w	r3, [r8]
 800ba74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba78:	3307      	adds	r3, #7
 800ba7a:	f023 0307 	bic.w	r3, r3, #7
 800ba7e:	f103 0208 	add.w	r2, r3, #8
 800ba82:	f8c8 2000 	str.w	r2, [r8]
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba96:	9307      	str	r3, [sp, #28]
 800ba98:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba9c:	ee08 0a10 	vmov	s16, r0
 800baa0:	4b9f      	ldr	r3, [pc, #636]	; (800bd20 <_printf_float+0x2dc>)
 800baa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	f7f5 f847 	bl	8000b3c <__aeabi_dcmpun>
 800baae:	bb88      	cbnz	r0, 800bb14 <_printf_float+0xd0>
 800bab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bab4:	4b9a      	ldr	r3, [pc, #616]	; (800bd20 <_printf_float+0x2dc>)
 800bab6:	f04f 32ff 	mov.w	r2, #4294967295
 800baba:	f7f5 f821 	bl	8000b00 <__aeabi_dcmple>
 800babe:	bb48      	cbnz	r0, 800bb14 <_printf_float+0xd0>
 800bac0:	2200      	movs	r2, #0
 800bac2:	2300      	movs	r3, #0
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f5 f810 	bl	8000aec <__aeabi_dcmplt>
 800bacc:	b110      	cbz	r0, 800bad4 <_printf_float+0x90>
 800bace:	232d      	movs	r3, #45	; 0x2d
 800bad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bad4:	4b93      	ldr	r3, [pc, #588]	; (800bd24 <_printf_float+0x2e0>)
 800bad6:	4894      	ldr	r0, [pc, #592]	; (800bd28 <_printf_float+0x2e4>)
 800bad8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800badc:	bf94      	ite	ls
 800bade:	4698      	movls	r8, r3
 800bae0:	4680      	movhi	r8, r0
 800bae2:	2303      	movs	r3, #3
 800bae4:	6123      	str	r3, [r4, #16]
 800bae6:	9b05      	ldr	r3, [sp, #20]
 800bae8:	f023 0204 	bic.w	r2, r3, #4
 800baec:	6022      	str	r2, [r4, #0]
 800baee:	f04f 0900 	mov.w	r9, #0
 800baf2:	9700      	str	r7, [sp, #0]
 800baf4:	4633      	mov	r3, r6
 800baf6:	aa0b      	add	r2, sp, #44	; 0x2c
 800baf8:	4621      	mov	r1, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	f000 f9d8 	bl	800beb0 <_printf_common>
 800bb00:	3001      	adds	r0, #1
 800bb02:	f040 8090 	bne.w	800bc26 <_printf_float+0x1e2>
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	b00d      	add	sp, #52	; 0x34
 800bb0c:	ecbd 8b02 	vpop	{d8}
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f5 f80e 	bl	8000b3c <__aeabi_dcmpun>
 800bb20:	b140      	cbz	r0, 800bb34 <_printf_float+0xf0>
 800bb22:	464b      	mov	r3, r9
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bfbc      	itt	lt
 800bb28:	232d      	movlt	r3, #45	; 0x2d
 800bb2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb2e:	487f      	ldr	r0, [pc, #508]	; (800bd2c <_printf_float+0x2e8>)
 800bb30:	4b7f      	ldr	r3, [pc, #508]	; (800bd30 <_printf_float+0x2ec>)
 800bb32:	e7d1      	b.n	800bad8 <_printf_float+0x94>
 800bb34:	6863      	ldr	r3, [r4, #4]
 800bb36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb3a:	9206      	str	r2, [sp, #24]
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	d13f      	bne.n	800bbc0 <_printf_float+0x17c>
 800bb40:	2306      	movs	r3, #6
 800bb42:	6063      	str	r3, [r4, #4]
 800bb44:	9b05      	ldr	r3, [sp, #20]
 800bb46:	6861      	ldr	r1, [r4, #4]
 800bb48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	ab0a      	add	r3, sp, #40	; 0x28
 800bb52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb56:	ab09      	add	r3, sp, #36	; 0x24
 800bb58:	ec49 8b10 	vmov	d0, r8, r9
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	6022      	str	r2, [r4, #0]
 800bb60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb64:	4628      	mov	r0, r5
 800bb66:	f7ff fecd 	bl	800b904 <__cvt>
 800bb6a:	9b06      	ldr	r3, [sp, #24]
 800bb6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb6e:	2b47      	cmp	r3, #71	; 0x47
 800bb70:	4680      	mov	r8, r0
 800bb72:	d108      	bne.n	800bb86 <_printf_float+0x142>
 800bb74:	1cc8      	adds	r0, r1, #3
 800bb76:	db02      	blt.n	800bb7e <_printf_float+0x13a>
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	4299      	cmp	r1, r3
 800bb7c:	dd41      	ble.n	800bc02 <_printf_float+0x1be>
 800bb7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb82:	fa5f fb8b 	uxtb.w	fp, fp
 800bb86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb8a:	d820      	bhi.n	800bbce <_printf_float+0x18a>
 800bb8c:	3901      	subs	r1, #1
 800bb8e:	465a      	mov	r2, fp
 800bb90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb94:	9109      	str	r1, [sp, #36]	; 0x24
 800bb96:	f7ff ff17 	bl	800b9c8 <__exponent>
 800bb9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb9c:	1813      	adds	r3, r2, r0
 800bb9e:	2a01      	cmp	r2, #1
 800bba0:	4681      	mov	r9, r0
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	dc02      	bgt.n	800bbac <_printf_float+0x168>
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	07d2      	lsls	r2, r2, #31
 800bbaa:	d501      	bpl.n	800bbb0 <_printf_float+0x16c>
 800bbac:	3301      	adds	r3, #1
 800bbae:	6123      	str	r3, [r4, #16]
 800bbb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d09c      	beq.n	800baf2 <_printf_float+0xae>
 800bbb8:	232d      	movs	r3, #45	; 0x2d
 800bbba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbbe:	e798      	b.n	800baf2 <_printf_float+0xae>
 800bbc0:	9a06      	ldr	r2, [sp, #24]
 800bbc2:	2a47      	cmp	r2, #71	; 0x47
 800bbc4:	d1be      	bne.n	800bb44 <_printf_float+0x100>
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1bc      	bne.n	800bb44 <_printf_float+0x100>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e7b9      	b.n	800bb42 <_printf_float+0xfe>
 800bbce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bbd2:	d118      	bne.n	800bc06 <_printf_float+0x1c2>
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	dd0b      	ble.n	800bbf2 <_printf_float+0x1ae>
 800bbda:	6121      	str	r1, [r4, #16]
 800bbdc:	b913      	cbnz	r3, 800bbe4 <_printf_float+0x1a0>
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	07d0      	lsls	r0, r2, #31
 800bbe2:	d502      	bpl.n	800bbea <_printf_float+0x1a6>
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	440b      	add	r3, r1
 800bbe8:	6123      	str	r3, [r4, #16]
 800bbea:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbec:	f04f 0900 	mov.w	r9, #0
 800bbf0:	e7de      	b.n	800bbb0 <_printf_float+0x16c>
 800bbf2:	b913      	cbnz	r3, 800bbfa <_printf_float+0x1b6>
 800bbf4:	6822      	ldr	r2, [r4, #0]
 800bbf6:	07d2      	lsls	r2, r2, #31
 800bbf8:	d501      	bpl.n	800bbfe <_printf_float+0x1ba>
 800bbfa:	3302      	adds	r3, #2
 800bbfc:	e7f4      	b.n	800bbe8 <_printf_float+0x1a4>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e7f2      	b.n	800bbe8 <_printf_float+0x1a4>
 800bc02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	db05      	blt.n	800bc18 <_printf_float+0x1d4>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	6121      	str	r1, [r4, #16]
 800bc10:	07d8      	lsls	r0, r3, #31
 800bc12:	d5ea      	bpl.n	800bbea <_printf_float+0x1a6>
 800bc14:	1c4b      	adds	r3, r1, #1
 800bc16:	e7e7      	b.n	800bbe8 <_printf_float+0x1a4>
 800bc18:	2900      	cmp	r1, #0
 800bc1a:	bfd4      	ite	le
 800bc1c:	f1c1 0202 	rsble	r2, r1, #2
 800bc20:	2201      	movgt	r2, #1
 800bc22:	4413      	add	r3, r2
 800bc24:	e7e0      	b.n	800bbe8 <_printf_float+0x1a4>
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	055a      	lsls	r2, r3, #21
 800bc2a:	d407      	bmi.n	800bc3c <_printf_float+0x1f8>
 800bc2c:	6923      	ldr	r3, [r4, #16]
 800bc2e:	4642      	mov	r2, r8
 800bc30:	4631      	mov	r1, r6
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	d12c      	bne.n	800bc94 <_printf_float+0x250>
 800bc3a:	e764      	b.n	800bb06 <_printf_float+0xc2>
 800bc3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc40:	f240 80e0 	bls.w	800be04 <_printf_float+0x3c0>
 800bc44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f7f4 ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d034      	beq.n	800bcbe <_printf_float+0x27a>
 800bc54:	4a37      	ldr	r2, [pc, #220]	; (800bd34 <_printf_float+0x2f0>)
 800bc56:	2301      	movs	r3, #1
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b8      	blx	r7
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f43f af51 	beq.w	800bb06 <_printf_float+0xc2>
 800bc64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	db02      	blt.n	800bc72 <_printf_float+0x22e>
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	07d8      	lsls	r0, r3, #31
 800bc70:	d510      	bpl.n	800bc94 <_printf_float+0x250>
 800bc72:	ee18 3a10 	vmov	r3, s16
 800bc76:	4652      	mov	r2, sl
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	47b8      	blx	r7
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f43f af41 	beq.w	800bb06 <_printf_float+0xc2>
 800bc84:	f04f 0800 	mov.w	r8, #0
 800bc88:	f104 091a 	add.w	r9, r4, #26
 800bc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	4543      	cmp	r3, r8
 800bc92:	dc09      	bgt.n	800bca8 <_printf_float+0x264>
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	079b      	lsls	r3, r3, #30
 800bc98:	f100 8105 	bmi.w	800bea6 <_printf_float+0x462>
 800bc9c:	68e0      	ldr	r0, [r4, #12]
 800bc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca0:	4298      	cmp	r0, r3
 800bca2:	bfb8      	it	lt
 800bca4:	4618      	movlt	r0, r3
 800bca6:	e730      	b.n	800bb0a <_printf_float+0xc6>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	464a      	mov	r2, r9
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f af27 	beq.w	800bb06 <_printf_float+0xc2>
 800bcb8:	f108 0801 	add.w	r8, r8, #1
 800bcbc:	e7e6      	b.n	800bc8c <_printf_float+0x248>
 800bcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dc39      	bgt.n	800bd38 <_printf_float+0x2f4>
 800bcc4:	4a1b      	ldr	r2, [pc, #108]	; (800bd34 <_printf_float+0x2f0>)
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b8      	blx	r7
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f43f af19 	beq.w	800bb06 <_printf_float+0xc2>
 800bcd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	d102      	bne.n	800bce2 <_printf_float+0x29e>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	d5d8      	bpl.n	800bc94 <_printf_float+0x250>
 800bce2:	ee18 3a10 	vmov	r3, s16
 800bce6:	4652      	mov	r2, sl
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f af09 	beq.w	800bb06 <_printf_float+0xc2>
 800bcf4:	f04f 0900 	mov.w	r9, #0
 800bcf8:	f104 0a1a 	add.w	sl, r4, #26
 800bcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcfe:	425b      	negs	r3, r3
 800bd00:	454b      	cmp	r3, r9
 800bd02:	dc01      	bgt.n	800bd08 <_printf_float+0x2c4>
 800bd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd06:	e792      	b.n	800bc2e <_printf_float+0x1ea>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	47b8      	blx	r7
 800bd12:	3001      	adds	r0, #1
 800bd14:	f43f aef7 	beq.w	800bb06 <_printf_float+0xc2>
 800bd18:	f109 0901 	add.w	r9, r9, #1
 800bd1c:	e7ee      	b.n	800bcfc <_printf_float+0x2b8>
 800bd1e:	bf00      	nop
 800bd20:	7fefffff 	.word	0x7fefffff
 800bd24:	0807281c 	.word	0x0807281c
 800bd28:	08072820 	.word	0x08072820
 800bd2c:	08072828 	.word	0x08072828
 800bd30:	08072824 	.word	0x08072824
 800bd34:	0807282c 	.word	0x0807282c
 800bd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	bfa8      	it	ge
 800bd40:	461a      	movge	r2, r3
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	4691      	mov	r9, r2
 800bd46:	dc37      	bgt.n	800bdb8 <_printf_float+0x374>
 800bd48:	f04f 0b00 	mov.w	fp, #0
 800bd4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd50:	f104 021a 	add.w	r2, r4, #26
 800bd54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	eba3 0309 	sub.w	r3, r3, r9
 800bd5c:	455b      	cmp	r3, fp
 800bd5e:	dc33      	bgt.n	800bdc8 <_printf_float+0x384>
 800bd60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd64:	429a      	cmp	r2, r3
 800bd66:	db3b      	blt.n	800bde0 <_printf_float+0x39c>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	07da      	lsls	r2, r3, #31
 800bd6c:	d438      	bmi.n	800bde0 <_printf_float+0x39c>
 800bd6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd70:	9b05      	ldr	r3, [sp, #20]
 800bd72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	eba2 0901 	sub.w	r9, r2, r1
 800bd7a:	4599      	cmp	r9, r3
 800bd7c:	bfa8      	it	ge
 800bd7e:	4699      	movge	r9, r3
 800bd80:	f1b9 0f00 	cmp.w	r9, #0
 800bd84:	dc35      	bgt.n	800bdf2 <_printf_float+0x3ae>
 800bd86:	f04f 0800 	mov.w	r8, #0
 800bd8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd8e:	f104 0a1a 	add.w	sl, r4, #26
 800bd92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	eba3 0309 	sub.w	r3, r3, r9
 800bd9c:	4543      	cmp	r3, r8
 800bd9e:	f77f af79 	ble.w	800bc94 <_printf_float+0x250>
 800bda2:	2301      	movs	r3, #1
 800bda4:	4652      	mov	r2, sl
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	f43f aeaa 	beq.w	800bb06 <_printf_float+0xc2>
 800bdb2:	f108 0801 	add.w	r8, r8, #1
 800bdb6:	e7ec      	b.n	800bd92 <_printf_float+0x34e>
 800bdb8:	4613      	mov	r3, r2
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4642      	mov	r2, r8
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	47b8      	blx	r7
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	d1c0      	bne.n	800bd48 <_printf_float+0x304>
 800bdc6:	e69e      	b.n	800bb06 <_printf_float+0xc2>
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	9205      	str	r2, [sp, #20]
 800bdd0:	47b8      	blx	r7
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	f43f ae97 	beq.w	800bb06 <_printf_float+0xc2>
 800bdd8:	9a05      	ldr	r2, [sp, #20]
 800bdda:	f10b 0b01 	add.w	fp, fp, #1
 800bdde:	e7b9      	b.n	800bd54 <_printf_float+0x310>
 800bde0:	ee18 3a10 	vmov	r3, s16
 800bde4:	4652      	mov	r2, sl
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	d1be      	bne.n	800bd6e <_printf_float+0x32a>
 800bdf0:	e689      	b.n	800bb06 <_printf_float+0xc2>
 800bdf2:	9a05      	ldr	r2, [sp, #20]
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	4442      	add	r2, r8
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	47b8      	blx	r7
 800bdfe:	3001      	adds	r0, #1
 800be00:	d1c1      	bne.n	800bd86 <_printf_float+0x342>
 800be02:	e680      	b.n	800bb06 <_printf_float+0xc2>
 800be04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be06:	2a01      	cmp	r2, #1
 800be08:	dc01      	bgt.n	800be0e <_printf_float+0x3ca>
 800be0a:	07db      	lsls	r3, r3, #31
 800be0c:	d538      	bpl.n	800be80 <_printf_float+0x43c>
 800be0e:	2301      	movs	r3, #1
 800be10:	4642      	mov	r2, r8
 800be12:	4631      	mov	r1, r6
 800be14:	4628      	mov	r0, r5
 800be16:	47b8      	blx	r7
 800be18:	3001      	adds	r0, #1
 800be1a:	f43f ae74 	beq.w	800bb06 <_printf_float+0xc2>
 800be1e:	ee18 3a10 	vmov	r3, s16
 800be22:	4652      	mov	r2, sl
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	47b8      	blx	r7
 800be2a:	3001      	adds	r0, #1
 800be2c:	f43f ae6b 	beq.w	800bb06 <_printf_float+0xc2>
 800be30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be34:	2200      	movs	r2, #0
 800be36:	2300      	movs	r3, #0
 800be38:	f7f4 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800be3c:	b9d8      	cbnz	r0, 800be76 <_printf_float+0x432>
 800be3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be40:	f108 0201 	add.w	r2, r8, #1
 800be44:	3b01      	subs	r3, #1
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	d10e      	bne.n	800be6e <_printf_float+0x42a>
 800be50:	e659      	b.n	800bb06 <_printf_float+0xc2>
 800be52:	2301      	movs	r3, #1
 800be54:	4652      	mov	r2, sl
 800be56:	4631      	mov	r1, r6
 800be58:	4628      	mov	r0, r5
 800be5a:	47b8      	blx	r7
 800be5c:	3001      	adds	r0, #1
 800be5e:	f43f ae52 	beq.w	800bb06 <_printf_float+0xc2>
 800be62:	f108 0801 	add.w	r8, r8, #1
 800be66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be68:	3b01      	subs	r3, #1
 800be6a:	4543      	cmp	r3, r8
 800be6c:	dcf1      	bgt.n	800be52 <_printf_float+0x40e>
 800be6e:	464b      	mov	r3, r9
 800be70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be74:	e6dc      	b.n	800bc30 <_printf_float+0x1ec>
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	f104 0a1a 	add.w	sl, r4, #26
 800be7e:	e7f2      	b.n	800be66 <_printf_float+0x422>
 800be80:	2301      	movs	r3, #1
 800be82:	4642      	mov	r2, r8
 800be84:	e7df      	b.n	800be46 <_printf_float+0x402>
 800be86:	2301      	movs	r3, #1
 800be88:	464a      	mov	r2, r9
 800be8a:	4631      	mov	r1, r6
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b8      	blx	r7
 800be90:	3001      	adds	r0, #1
 800be92:	f43f ae38 	beq.w	800bb06 <_printf_float+0xc2>
 800be96:	f108 0801 	add.w	r8, r8, #1
 800be9a:	68e3      	ldr	r3, [r4, #12]
 800be9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be9e:	1a5b      	subs	r3, r3, r1
 800bea0:	4543      	cmp	r3, r8
 800bea2:	dcf0      	bgt.n	800be86 <_printf_float+0x442>
 800bea4:	e6fa      	b.n	800bc9c <_printf_float+0x258>
 800bea6:	f04f 0800 	mov.w	r8, #0
 800beaa:	f104 0919 	add.w	r9, r4, #25
 800beae:	e7f4      	b.n	800be9a <_printf_float+0x456>

0800beb0 <_printf_common>:
 800beb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb4:	4616      	mov	r6, r2
 800beb6:	4699      	mov	r9, r3
 800beb8:	688a      	ldr	r2, [r1, #8]
 800beba:	690b      	ldr	r3, [r1, #16]
 800bebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	bfb8      	it	lt
 800bec4:	4613      	movlt	r3, r2
 800bec6:	6033      	str	r3, [r6, #0]
 800bec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800becc:	4607      	mov	r7, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	b10a      	cbz	r2, 800bed6 <_printf_common+0x26>
 800bed2:	3301      	adds	r3, #1
 800bed4:	6033      	str	r3, [r6, #0]
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	0699      	lsls	r1, r3, #26
 800beda:	bf42      	ittt	mi
 800bedc:	6833      	ldrmi	r3, [r6, #0]
 800bede:	3302      	addmi	r3, #2
 800bee0:	6033      	strmi	r3, [r6, #0]
 800bee2:	6825      	ldr	r5, [r4, #0]
 800bee4:	f015 0506 	ands.w	r5, r5, #6
 800bee8:	d106      	bne.n	800bef8 <_printf_common+0x48>
 800beea:	f104 0a19 	add.w	sl, r4, #25
 800beee:	68e3      	ldr	r3, [r4, #12]
 800bef0:	6832      	ldr	r2, [r6, #0]
 800bef2:	1a9b      	subs	r3, r3, r2
 800bef4:	42ab      	cmp	r3, r5
 800bef6:	dc26      	bgt.n	800bf46 <_printf_common+0x96>
 800bef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800befc:	1e13      	subs	r3, r2, #0
 800befe:	6822      	ldr	r2, [r4, #0]
 800bf00:	bf18      	it	ne
 800bf02:	2301      	movne	r3, #1
 800bf04:	0692      	lsls	r2, r2, #26
 800bf06:	d42b      	bmi.n	800bf60 <_printf_common+0xb0>
 800bf08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	4638      	mov	r0, r7
 800bf10:	47c0      	blx	r8
 800bf12:	3001      	adds	r0, #1
 800bf14:	d01e      	beq.n	800bf54 <_printf_common+0xa4>
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	68e5      	ldr	r5, [r4, #12]
 800bf1a:	6832      	ldr	r2, [r6, #0]
 800bf1c:	f003 0306 	and.w	r3, r3, #6
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	bf08      	it	eq
 800bf24:	1aad      	subeq	r5, r5, r2
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	6922      	ldr	r2, [r4, #16]
 800bf2a:	bf0c      	ite	eq
 800bf2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf30:	2500      	movne	r5, #0
 800bf32:	4293      	cmp	r3, r2
 800bf34:	bfc4      	itt	gt
 800bf36:	1a9b      	subgt	r3, r3, r2
 800bf38:	18ed      	addgt	r5, r5, r3
 800bf3a:	2600      	movs	r6, #0
 800bf3c:	341a      	adds	r4, #26
 800bf3e:	42b5      	cmp	r5, r6
 800bf40:	d11a      	bne.n	800bf78 <_printf_common+0xc8>
 800bf42:	2000      	movs	r0, #0
 800bf44:	e008      	b.n	800bf58 <_printf_common+0xa8>
 800bf46:	2301      	movs	r3, #1
 800bf48:	4652      	mov	r2, sl
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	47c0      	blx	r8
 800bf50:	3001      	adds	r0, #1
 800bf52:	d103      	bne.n	800bf5c <_printf_common+0xac>
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295
 800bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	e7c6      	b.n	800beee <_printf_common+0x3e>
 800bf60:	18e1      	adds	r1, r4, r3
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	2030      	movs	r0, #48	; 0x30
 800bf66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf6a:	4422      	add	r2, r4
 800bf6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf74:	3302      	adds	r3, #2
 800bf76:	e7c7      	b.n	800bf08 <_printf_common+0x58>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	4638      	mov	r0, r7
 800bf80:	47c0      	blx	r8
 800bf82:	3001      	adds	r0, #1
 800bf84:	d0e6      	beq.n	800bf54 <_printf_common+0xa4>
 800bf86:	3601      	adds	r6, #1
 800bf88:	e7d9      	b.n	800bf3e <_printf_common+0x8e>
	...

0800bf8c <_printf_i>:
 800bf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	460c      	mov	r4, r1
 800bf92:	4691      	mov	r9, r2
 800bf94:	7e27      	ldrb	r7, [r4, #24]
 800bf96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf98:	2f78      	cmp	r7, #120	; 0x78
 800bf9a:	4680      	mov	r8, r0
 800bf9c:	469a      	mov	sl, r3
 800bf9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfa2:	d807      	bhi.n	800bfb4 <_printf_i+0x28>
 800bfa4:	2f62      	cmp	r7, #98	; 0x62
 800bfa6:	d80a      	bhi.n	800bfbe <_printf_i+0x32>
 800bfa8:	2f00      	cmp	r7, #0
 800bfaa:	f000 80d8 	beq.w	800c15e <_printf_i+0x1d2>
 800bfae:	2f58      	cmp	r7, #88	; 0x58
 800bfb0:	f000 80a3 	beq.w	800c0fa <_printf_i+0x16e>
 800bfb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfbc:	e03a      	b.n	800c034 <_printf_i+0xa8>
 800bfbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfc2:	2b15      	cmp	r3, #21
 800bfc4:	d8f6      	bhi.n	800bfb4 <_printf_i+0x28>
 800bfc6:	a001      	add	r0, pc, #4	; (adr r0, 800bfcc <_printf_i+0x40>)
 800bfc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfcc:	0800c025 	.word	0x0800c025
 800bfd0:	0800c039 	.word	0x0800c039
 800bfd4:	0800bfb5 	.word	0x0800bfb5
 800bfd8:	0800bfb5 	.word	0x0800bfb5
 800bfdc:	0800bfb5 	.word	0x0800bfb5
 800bfe0:	0800bfb5 	.word	0x0800bfb5
 800bfe4:	0800c039 	.word	0x0800c039
 800bfe8:	0800bfb5 	.word	0x0800bfb5
 800bfec:	0800bfb5 	.word	0x0800bfb5
 800bff0:	0800bfb5 	.word	0x0800bfb5
 800bff4:	0800bfb5 	.word	0x0800bfb5
 800bff8:	0800c145 	.word	0x0800c145
 800bffc:	0800c069 	.word	0x0800c069
 800c000:	0800c127 	.word	0x0800c127
 800c004:	0800bfb5 	.word	0x0800bfb5
 800c008:	0800bfb5 	.word	0x0800bfb5
 800c00c:	0800c167 	.word	0x0800c167
 800c010:	0800bfb5 	.word	0x0800bfb5
 800c014:	0800c069 	.word	0x0800c069
 800c018:	0800bfb5 	.word	0x0800bfb5
 800c01c:	0800bfb5 	.word	0x0800bfb5
 800c020:	0800c12f 	.word	0x0800c12f
 800c024:	680b      	ldr	r3, [r1, #0]
 800c026:	1d1a      	adds	r2, r3, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	600a      	str	r2, [r1, #0]
 800c02c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c034:	2301      	movs	r3, #1
 800c036:	e0a3      	b.n	800c180 <_printf_i+0x1f4>
 800c038:	6825      	ldr	r5, [r4, #0]
 800c03a:	6808      	ldr	r0, [r1, #0]
 800c03c:	062e      	lsls	r6, r5, #24
 800c03e:	f100 0304 	add.w	r3, r0, #4
 800c042:	d50a      	bpl.n	800c05a <_printf_i+0xce>
 800c044:	6805      	ldr	r5, [r0, #0]
 800c046:	600b      	str	r3, [r1, #0]
 800c048:	2d00      	cmp	r5, #0
 800c04a:	da03      	bge.n	800c054 <_printf_i+0xc8>
 800c04c:	232d      	movs	r3, #45	; 0x2d
 800c04e:	426d      	negs	r5, r5
 800c050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c054:	485e      	ldr	r0, [pc, #376]	; (800c1d0 <_printf_i+0x244>)
 800c056:	230a      	movs	r3, #10
 800c058:	e019      	b.n	800c08e <_printf_i+0x102>
 800c05a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c05e:	6805      	ldr	r5, [r0, #0]
 800c060:	600b      	str	r3, [r1, #0]
 800c062:	bf18      	it	ne
 800c064:	b22d      	sxthne	r5, r5
 800c066:	e7ef      	b.n	800c048 <_printf_i+0xbc>
 800c068:	680b      	ldr	r3, [r1, #0]
 800c06a:	6825      	ldr	r5, [r4, #0]
 800c06c:	1d18      	adds	r0, r3, #4
 800c06e:	6008      	str	r0, [r1, #0]
 800c070:	0628      	lsls	r0, r5, #24
 800c072:	d501      	bpl.n	800c078 <_printf_i+0xec>
 800c074:	681d      	ldr	r5, [r3, #0]
 800c076:	e002      	b.n	800c07e <_printf_i+0xf2>
 800c078:	0669      	lsls	r1, r5, #25
 800c07a:	d5fb      	bpl.n	800c074 <_printf_i+0xe8>
 800c07c:	881d      	ldrh	r5, [r3, #0]
 800c07e:	4854      	ldr	r0, [pc, #336]	; (800c1d0 <_printf_i+0x244>)
 800c080:	2f6f      	cmp	r7, #111	; 0x6f
 800c082:	bf0c      	ite	eq
 800c084:	2308      	moveq	r3, #8
 800c086:	230a      	movne	r3, #10
 800c088:	2100      	movs	r1, #0
 800c08a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c08e:	6866      	ldr	r6, [r4, #4]
 800c090:	60a6      	str	r6, [r4, #8]
 800c092:	2e00      	cmp	r6, #0
 800c094:	bfa2      	ittt	ge
 800c096:	6821      	ldrge	r1, [r4, #0]
 800c098:	f021 0104 	bicge.w	r1, r1, #4
 800c09c:	6021      	strge	r1, [r4, #0]
 800c09e:	b90d      	cbnz	r5, 800c0a4 <_printf_i+0x118>
 800c0a0:	2e00      	cmp	r6, #0
 800c0a2:	d04d      	beq.n	800c140 <_printf_i+0x1b4>
 800c0a4:	4616      	mov	r6, r2
 800c0a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0aa:	fb03 5711 	mls	r7, r3, r1, r5
 800c0ae:	5dc7      	ldrb	r7, [r0, r7]
 800c0b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0b4:	462f      	mov	r7, r5
 800c0b6:	42bb      	cmp	r3, r7
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	d9f4      	bls.n	800c0a6 <_printf_i+0x11a>
 800c0bc:	2b08      	cmp	r3, #8
 800c0be:	d10b      	bne.n	800c0d8 <_printf_i+0x14c>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	07df      	lsls	r7, r3, #31
 800c0c4:	d508      	bpl.n	800c0d8 <_printf_i+0x14c>
 800c0c6:	6923      	ldr	r3, [r4, #16]
 800c0c8:	6861      	ldr	r1, [r4, #4]
 800c0ca:	4299      	cmp	r1, r3
 800c0cc:	bfde      	ittt	le
 800c0ce:	2330      	movle	r3, #48	; 0x30
 800c0d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0d8:	1b92      	subs	r2, r2, r6
 800c0da:	6122      	str	r2, [r4, #16]
 800c0dc:	f8cd a000 	str.w	sl, [sp]
 800c0e0:	464b      	mov	r3, r9
 800c0e2:	aa03      	add	r2, sp, #12
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	f7ff fee2 	bl	800beb0 <_printf_common>
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d14c      	bne.n	800c18a <_printf_i+0x1fe>
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	b004      	add	sp, #16
 800c0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fa:	4835      	ldr	r0, [pc, #212]	; (800c1d0 <_printf_i+0x244>)
 800c0fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	680e      	ldr	r6, [r1, #0]
 800c104:	061f      	lsls	r7, r3, #24
 800c106:	f856 5b04 	ldr.w	r5, [r6], #4
 800c10a:	600e      	str	r6, [r1, #0]
 800c10c:	d514      	bpl.n	800c138 <_printf_i+0x1ac>
 800c10e:	07d9      	lsls	r1, r3, #31
 800c110:	bf44      	itt	mi
 800c112:	f043 0320 	orrmi.w	r3, r3, #32
 800c116:	6023      	strmi	r3, [r4, #0]
 800c118:	b91d      	cbnz	r5, 800c122 <_printf_i+0x196>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	f023 0320 	bic.w	r3, r3, #32
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	2310      	movs	r3, #16
 800c124:	e7b0      	b.n	800c088 <_printf_i+0xfc>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	f043 0320 	orr.w	r3, r3, #32
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	2378      	movs	r3, #120	; 0x78
 800c130:	4828      	ldr	r0, [pc, #160]	; (800c1d4 <_printf_i+0x248>)
 800c132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c136:	e7e3      	b.n	800c100 <_printf_i+0x174>
 800c138:	065e      	lsls	r6, r3, #25
 800c13a:	bf48      	it	mi
 800c13c:	b2ad      	uxthmi	r5, r5
 800c13e:	e7e6      	b.n	800c10e <_printf_i+0x182>
 800c140:	4616      	mov	r6, r2
 800c142:	e7bb      	b.n	800c0bc <_printf_i+0x130>
 800c144:	680b      	ldr	r3, [r1, #0]
 800c146:	6826      	ldr	r6, [r4, #0]
 800c148:	6960      	ldr	r0, [r4, #20]
 800c14a:	1d1d      	adds	r5, r3, #4
 800c14c:	600d      	str	r5, [r1, #0]
 800c14e:	0635      	lsls	r5, r6, #24
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	d501      	bpl.n	800c158 <_printf_i+0x1cc>
 800c154:	6018      	str	r0, [r3, #0]
 800c156:	e002      	b.n	800c15e <_printf_i+0x1d2>
 800c158:	0671      	lsls	r1, r6, #25
 800c15a:	d5fb      	bpl.n	800c154 <_printf_i+0x1c8>
 800c15c:	8018      	strh	r0, [r3, #0]
 800c15e:	2300      	movs	r3, #0
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	4616      	mov	r6, r2
 800c164:	e7ba      	b.n	800c0dc <_printf_i+0x150>
 800c166:	680b      	ldr	r3, [r1, #0]
 800c168:	1d1a      	adds	r2, r3, #4
 800c16a:	600a      	str	r2, [r1, #0]
 800c16c:	681e      	ldr	r6, [r3, #0]
 800c16e:	6862      	ldr	r2, [r4, #4]
 800c170:	2100      	movs	r1, #0
 800c172:	4630      	mov	r0, r6
 800c174:	f7f4 f83c 	bl	80001f0 <memchr>
 800c178:	b108      	cbz	r0, 800c17e <_printf_i+0x1f2>
 800c17a:	1b80      	subs	r0, r0, r6
 800c17c:	6060      	str	r0, [r4, #4]
 800c17e:	6863      	ldr	r3, [r4, #4]
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	2300      	movs	r3, #0
 800c184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c188:	e7a8      	b.n	800c0dc <_printf_i+0x150>
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	4632      	mov	r2, r6
 800c18e:	4649      	mov	r1, r9
 800c190:	4640      	mov	r0, r8
 800c192:	47d0      	blx	sl
 800c194:	3001      	adds	r0, #1
 800c196:	d0ab      	beq.n	800c0f0 <_printf_i+0x164>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	079b      	lsls	r3, r3, #30
 800c19c:	d413      	bmi.n	800c1c6 <_printf_i+0x23a>
 800c19e:	68e0      	ldr	r0, [r4, #12]
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	4298      	cmp	r0, r3
 800c1a4:	bfb8      	it	lt
 800c1a6:	4618      	movlt	r0, r3
 800c1a8:	e7a4      	b.n	800c0f4 <_printf_i+0x168>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	47d0      	blx	sl
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d09b      	beq.n	800c0f0 <_printf_i+0x164>
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	68e3      	ldr	r3, [r4, #12]
 800c1bc:	9903      	ldr	r1, [sp, #12]
 800c1be:	1a5b      	subs	r3, r3, r1
 800c1c0:	42ab      	cmp	r3, r5
 800c1c2:	dcf2      	bgt.n	800c1aa <_printf_i+0x21e>
 800c1c4:	e7eb      	b.n	800c19e <_printf_i+0x212>
 800c1c6:	2500      	movs	r5, #0
 800c1c8:	f104 0619 	add.w	r6, r4, #25
 800c1cc:	e7f5      	b.n	800c1ba <_printf_i+0x22e>
 800c1ce:	bf00      	nop
 800c1d0:	0807282e 	.word	0x0807282e
 800c1d4:	0807283f 	.word	0x0807283f

0800c1d8 <putchar>:
 800c1d8:	4b09      	ldr	r3, [pc, #36]	; (800c200 <putchar+0x28>)
 800c1da:	b513      	push	{r0, r1, r4, lr}
 800c1dc:	681c      	ldr	r4, [r3, #0]
 800c1de:	4601      	mov	r1, r0
 800c1e0:	b134      	cbz	r4, 800c1f0 <putchar+0x18>
 800c1e2:	69a3      	ldr	r3, [r4, #24]
 800c1e4:	b923      	cbnz	r3, 800c1f0 <putchar+0x18>
 800c1e6:	9001      	str	r0, [sp, #4]
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 ff89 	bl	800d100 <__sinit>
 800c1ee:	9901      	ldr	r1, [sp, #4]
 800c1f0:	68a2      	ldr	r2, [r4, #8]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	b002      	add	sp, #8
 800c1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1fa:	f001 bf2f 	b.w	800e05c <_putc_r>
 800c1fe:	bf00      	nop
 800c200:	20000064 	.word	0x20000064

0800c204 <srand>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4b10      	ldr	r3, [pc, #64]	; (800c248 <srand+0x44>)
 800c208:	681d      	ldr	r5, [r3, #0]
 800c20a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c20c:	4604      	mov	r4, r0
 800c20e:	b9b3      	cbnz	r3, 800c23e <srand+0x3a>
 800c210:	2018      	movs	r0, #24
 800c212:	f001 f82d 	bl	800d270 <malloc>
 800c216:	4602      	mov	r2, r0
 800c218:	63a8      	str	r0, [r5, #56]	; 0x38
 800c21a:	b920      	cbnz	r0, 800c226 <srand+0x22>
 800c21c:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <srand+0x48>)
 800c21e:	480c      	ldr	r0, [pc, #48]	; (800c250 <srand+0x4c>)
 800c220:	2142      	movs	r1, #66	; 0x42
 800c222:	f000 f87d 	bl	800c320 <__assert_func>
 800c226:	490b      	ldr	r1, [pc, #44]	; (800c254 <srand+0x50>)
 800c228:	4b0b      	ldr	r3, [pc, #44]	; (800c258 <srand+0x54>)
 800c22a:	e9c0 1300 	strd	r1, r3, [r0]
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <srand+0x58>)
 800c230:	6083      	str	r3, [r0, #8]
 800c232:	230b      	movs	r3, #11
 800c234:	8183      	strh	r3, [r0, #12]
 800c236:	2100      	movs	r1, #0
 800c238:	2001      	movs	r0, #1
 800c23a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c23e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c240:	2200      	movs	r2, #0
 800c242:	611c      	str	r4, [r3, #16]
 800c244:	615a      	str	r2, [r3, #20]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20000064 	.word	0x20000064
 800c24c:	08072850 	.word	0x08072850
 800c250:	08072867 	.word	0x08072867
 800c254:	abcd330e 	.word	0xabcd330e
 800c258:	e66d1234 	.word	0xe66d1234
 800c25c:	0005deec 	.word	0x0005deec

0800c260 <rand>:
 800c260:	4b17      	ldr	r3, [pc, #92]	; (800c2c0 <rand+0x60>)
 800c262:	b510      	push	{r4, lr}
 800c264:	681c      	ldr	r4, [r3, #0]
 800c266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c268:	b9b3      	cbnz	r3, 800c298 <rand+0x38>
 800c26a:	2018      	movs	r0, #24
 800c26c:	f001 f800 	bl	800d270 <malloc>
 800c270:	63a0      	str	r0, [r4, #56]	; 0x38
 800c272:	b928      	cbnz	r0, 800c280 <rand+0x20>
 800c274:	4602      	mov	r2, r0
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <rand+0x64>)
 800c278:	4813      	ldr	r0, [pc, #76]	; (800c2c8 <rand+0x68>)
 800c27a:	214e      	movs	r1, #78	; 0x4e
 800c27c:	f000 f850 	bl	800c320 <__assert_func>
 800c280:	4a12      	ldr	r2, [pc, #72]	; (800c2cc <rand+0x6c>)
 800c282:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <rand+0x70>)
 800c284:	e9c0 2300 	strd	r2, r3, [r0]
 800c288:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <rand+0x74>)
 800c28a:	6083      	str	r3, [r0, #8]
 800c28c:	230b      	movs	r3, #11
 800c28e:	8183      	strh	r3, [r0, #12]
 800c290:	2201      	movs	r2, #1
 800c292:	2300      	movs	r3, #0
 800c294:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c298:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c29a:	480f      	ldr	r0, [pc, #60]	; (800c2d8 <rand+0x78>)
 800c29c:	690a      	ldr	r2, [r1, #16]
 800c29e:	694b      	ldr	r3, [r1, #20]
 800c2a0:	4c0e      	ldr	r4, [pc, #56]	; (800c2dc <rand+0x7c>)
 800c2a2:	4350      	muls	r0, r2
 800c2a4:	fb04 0003 	mla	r0, r4, r3, r0
 800c2a8:	fba2 3404 	umull	r3, r4, r2, r4
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	4404      	add	r4, r0
 800c2b0:	f144 0000 	adc.w	r0, r4, #0
 800c2b4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c2b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	bf00      	nop
 800c2c0:	20000064 	.word	0x20000064
 800c2c4:	08072850 	.word	0x08072850
 800c2c8:	08072867 	.word	0x08072867
 800c2cc:	abcd330e 	.word	0xabcd330e
 800c2d0:	e66d1234 	.word	0xe66d1234
 800c2d4:	0005deec 	.word	0x0005deec
 800c2d8:	5851f42d 	.word	0x5851f42d
 800c2dc:	4c957f2d 	.word	0x4c957f2d

0800c2e0 <siprintf>:
 800c2e0:	b40e      	push	{r1, r2, r3}
 800c2e2:	b500      	push	{lr}
 800c2e4:	b09c      	sub	sp, #112	; 0x70
 800c2e6:	ab1d      	add	r3, sp, #116	; 0x74
 800c2e8:	9002      	str	r0, [sp, #8]
 800c2ea:	9006      	str	r0, [sp, #24]
 800c2ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2f0:	4809      	ldr	r0, [pc, #36]	; (800c318 <siprintf+0x38>)
 800c2f2:	9107      	str	r1, [sp, #28]
 800c2f4:	9104      	str	r1, [sp, #16]
 800c2f6:	4909      	ldr	r1, [pc, #36]	; (800c31c <siprintf+0x3c>)
 800c2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2fc:	9105      	str	r1, [sp, #20]
 800c2fe:	6800      	ldr	r0, [r0, #0]
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	a902      	add	r1, sp, #8
 800c304:	f001 fc50 	bl	800dba8 <_svfiprintf_r>
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	2200      	movs	r2, #0
 800c30c:	701a      	strb	r2, [r3, #0]
 800c30e:	b01c      	add	sp, #112	; 0x70
 800c310:	f85d eb04 	ldr.w	lr, [sp], #4
 800c314:	b003      	add	sp, #12
 800c316:	4770      	bx	lr
 800c318:	20000064 	.word	0x20000064
 800c31c:	ffff0208 	.word	0xffff0208

0800c320 <__assert_func>:
 800c320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c322:	4614      	mov	r4, r2
 800c324:	461a      	mov	r2, r3
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <__assert_func+0x2c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4605      	mov	r5, r0
 800c32c:	68d8      	ldr	r0, [r3, #12]
 800c32e:	b14c      	cbz	r4, 800c344 <__assert_func+0x24>
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <__assert_func+0x30>)
 800c332:	9100      	str	r1, [sp, #0]
 800c334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c338:	4906      	ldr	r1, [pc, #24]	; (800c354 <__assert_func+0x34>)
 800c33a:	462b      	mov	r3, r5
 800c33c:	f000 ff5e 	bl	800d1fc <fiprintf>
 800c340:	f001 fffa 	bl	800e338 <abort>
 800c344:	4b04      	ldr	r3, [pc, #16]	; (800c358 <__assert_func+0x38>)
 800c346:	461c      	mov	r4, r3
 800c348:	e7f3      	b.n	800c332 <__assert_func+0x12>
 800c34a:	bf00      	nop
 800c34c:	20000064 	.word	0x20000064
 800c350:	080728c6 	.word	0x080728c6
 800c354:	080728d3 	.word	0x080728d3
 800c358:	08072901 	.word	0x08072901

0800c35c <quorem>:
 800c35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	6903      	ldr	r3, [r0, #16]
 800c362:	690c      	ldr	r4, [r1, #16]
 800c364:	42a3      	cmp	r3, r4
 800c366:	4607      	mov	r7, r0
 800c368:	f2c0 8081 	blt.w	800c46e <quorem+0x112>
 800c36c:	3c01      	subs	r4, #1
 800c36e:	f101 0814 	add.w	r8, r1, #20
 800c372:	f100 0514 	add.w	r5, r0, #20
 800c376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c384:	3301      	adds	r3, #1
 800c386:	429a      	cmp	r2, r3
 800c388:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c38c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c390:	fbb2 f6f3 	udiv	r6, r2, r3
 800c394:	d331      	bcc.n	800c3fa <quorem+0x9e>
 800c396:	f04f 0e00 	mov.w	lr, #0
 800c39a:	4640      	mov	r0, r8
 800c39c:	46ac      	mov	ip, r5
 800c39e:	46f2      	mov	sl, lr
 800c3a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3a4:	b293      	uxth	r3, r2
 800c3a6:	fb06 e303 	mla	r3, r6, r3, lr
 800c3aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	ebaa 0303 	sub.w	r3, sl, r3
 800c3b4:	0c12      	lsrs	r2, r2, #16
 800c3b6:	f8dc a000 	ldr.w	sl, [ip]
 800c3ba:	fb06 e202 	mla	r2, r6, r2, lr
 800c3be:	fa13 f38a 	uxtah	r3, r3, sl
 800c3c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3c6:	fa1f fa82 	uxth.w	sl, r2
 800c3ca:	f8dc 2000 	ldr.w	r2, [ip]
 800c3ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c3d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3dc:	4581      	cmp	r9, r0
 800c3de:	f84c 3b04 	str.w	r3, [ip], #4
 800c3e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3e6:	d2db      	bcs.n	800c3a0 <quorem+0x44>
 800c3e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3ec:	b92b      	cbnz	r3, 800c3fa <quorem+0x9e>
 800c3ee:	9b01      	ldr	r3, [sp, #4]
 800c3f0:	3b04      	subs	r3, #4
 800c3f2:	429d      	cmp	r5, r3
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	d32e      	bcc.n	800c456 <quorem+0xfa>
 800c3f8:	613c      	str	r4, [r7, #16]
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	f001 f9be 	bl	800d77c <__mcmp>
 800c400:	2800      	cmp	r0, #0
 800c402:	db24      	blt.n	800c44e <quorem+0xf2>
 800c404:	3601      	adds	r6, #1
 800c406:	4628      	mov	r0, r5
 800c408:	f04f 0c00 	mov.w	ip, #0
 800c40c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c410:	f8d0 e000 	ldr.w	lr, [r0]
 800c414:	b293      	uxth	r3, r2
 800c416:	ebac 0303 	sub.w	r3, ip, r3
 800c41a:	0c12      	lsrs	r2, r2, #16
 800c41c:	fa13 f38e 	uxtah	r3, r3, lr
 800c420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c428:	b29b      	uxth	r3, r3
 800c42a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c42e:	45c1      	cmp	r9, r8
 800c430:	f840 3b04 	str.w	r3, [r0], #4
 800c434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c438:	d2e8      	bcs.n	800c40c <quorem+0xb0>
 800c43a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c43e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c442:	b922      	cbnz	r2, 800c44e <quorem+0xf2>
 800c444:	3b04      	subs	r3, #4
 800c446:	429d      	cmp	r5, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	d30a      	bcc.n	800c462 <quorem+0x106>
 800c44c:	613c      	str	r4, [r7, #16]
 800c44e:	4630      	mov	r0, r6
 800c450:	b003      	add	sp, #12
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	6812      	ldr	r2, [r2, #0]
 800c458:	3b04      	subs	r3, #4
 800c45a:	2a00      	cmp	r2, #0
 800c45c:	d1cc      	bne.n	800c3f8 <quorem+0x9c>
 800c45e:	3c01      	subs	r4, #1
 800c460:	e7c7      	b.n	800c3f2 <quorem+0x96>
 800c462:	6812      	ldr	r2, [r2, #0]
 800c464:	3b04      	subs	r3, #4
 800c466:	2a00      	cmp	r2, #0
 800c468:	d1f0      	bne.n	800c44c <quorem+0xf0>
 800c46a:	3c01      	subs	r4, #1
 800c46c:	e7eb      	b.n	800c446 <quorem+0xea>
 800c46e:	2000      	movs	r0, #0
 800c470:	e7ee      	b.n	800c450 <quorem+0xf4>
 800c472:	0000      	movs	r0, r0
 800c474:	0000      	movs	r0, r0
	...

0800c478 <_dtoa_r>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	ed2d 8b02 	vpush	{d8}
 800c480:	ec57 6b10 	vmov	r6, r7, d0
 800c484:	b095      	sub	sp, #84	; 0x54
 800c486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c48c:	9105      	str	r1, [sp, #20]
 800c48e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c492:	4604      	mov	r4, r0
 800c494:	9209      	str	r2, [sp, #36]	; 0x24
 800c496:	930f      	str	r3, [sp, #60]	; 0x3c
 800c498:	b975      	cbnz	r5, 800c4b8 <_dtoa_r+0x40>
 800c49a:	2010      	movs	r0, #16
 800c49c:	f000 fee8 	bl	800d270 <malloc>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	6260      	str	r0, [r4, #36]	; 0x24
 800c4a4:	b920      	cbnz	r0, 800c4b0 <_dtoa_r+0x38>
 800c4a6:	4bb2      	ldr	r3, [pc, #712]	; (800c770 <_dtoa_r+0x2f8>)
 800c4a8:	21ea      	movs	r1, #234	; 0xea
 800c4aa:	48b2      	ldr	r0, [pc, #712]	; (800c774 <_dtoa_r+0x2fc>)
 800c4ac:	f7ff ff38 	bl	800c320 <__assert_func>
 800c4b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4b4:	6005      	str	r5, [r0, #0]
 800c4b6:	60c5      	str	r5, [r0, #12]
 800c4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ba:	6819      	ldr	r1, [r3, #0]
 800c4bc:	b151      	cbz	r1, 800c4d4 <_dtoa_r+0x5c>
 800c4be:	685a      	ldr	r2, [r3, #4]
 800c4c0:	604a      	str	r2, [r1, #4]
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	4093      	lsls	r3, r2
 800c4c6:	608b      	str	r3, [r1, #8]
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f000 ff19 	bl	800d300 <_Bfree>
 800c4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	1e3b      	subs	r3, r7, #0
 800c4d6:	bfb9      	ittee	lt
 800c4d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c4dc:	9303      	strlt	r3, [sp, #12]
 800c4de:	2300      	movge	r3, #0
 800c4e0:	f8c8 3000 	strge.w	r3, [r8]
 800c4e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c4e8:	4ba3      	ldr	r3, [pc, #652]	; (800c778 <_dtoa_r+0x300>)
 800c4ea:	bfbc      	itt	lt
 800c4ec:	2201      	movlt	r2, #1
 800c4ee:	f8c8 2000 	strlt.w	r2, [r8]
 800c4f2:	ea33 0309 	bics.w	r3, r3, r9
 800c4f6:	d11b      	bne.n	800c530 <_dtoa_r+0xb8>
 800c4f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c504:	4333      	orrs	r3, r6
 800c506:	f000 857a 	beq.w	800cffe <_dtoa_r+0xb86>
 800c50a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c50c:	b963      	cbnz	r3, 800c528 <_dtoa_r+0xb0>
 800c50e:	4b9b      	ldr	r3, [pc, #620]	; (800c77c <_dtoa_r+0x304>)
 800c510:	e024      	b.n	800c55c <_dtoa_r+0xe4>
 800c512:	4b9b      	ldr	r3, [pc, #620]	; (800c780 <_dtoa_r+0x308>)
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	3308      	adds	r3, #8
 800c518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	9800      	ldr	r0, [sp, #0]
 800c51e:	b015      	add	sp, #84	; 0x54
 800c520:	ecbd 8b02 	vpop	{d8}
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	4b94      	ldr	r3, [pc, #592]	; (800c77c <_dtoa_r+0x304>)
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	3303      	adds	r3, #3
 800c52e:	e7f3      	b.n	800c518 <_dtoa_r+0xa0>
 800c530:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c534:	2200      	movs	r2, #0
 800c536:	ec51 0b17 	vmov	r0, r1, d7
 800c53a:	2300      	movs	r3, #0
 800c53c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c540:	f7f4 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 800c544:	4680      	mov	r8, r0
 800c546:	b158      	cbz	r0, 800c560 <_dtoa_r+0xe8>
 800c548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c54a:	2301      	movs	r3, #1
 800c54c:	6013      	str	r3, [r2, #0]
 800c54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 8551 	beq.w	800cff8 <_dtoa_r+0xb80>
 800c556:	488b      	ldr	r0, [pc, #556]	; (800c784 <_dtoa_r+0x30c>)
 800c558:	6018      	str	r0, [r3, #0]
 800c55a:	1e43      	subs	r3, r0, #1
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	e7dd      	b.n	800c51c <_dtoa_r+0xa4>
 800c560:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c564:	aa12      	add	r2, sp, #72	; 0x48
 800c566:	a913      	add	r1, sp, #76	; 0x4c
 800c568:	4620      	mov	r0, r4
 800c56a:	f001 f9ab 	bl	800d8c4 <__d2b>
 800c56e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c572:	4683      	mov	fp, r0
 800c574:	2d00      	cmp	r5, #0
 800c576:	d07c      	beq.n	800c672 <_dtoa_r+0x1fa>
 800c578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c57e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c582:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c586:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c58a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c58e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c592:	4b7d      	ldr	r3, [pc, #500]	; (800c788 <_dtoa_r+0x310>)
 800c594:	2200      	movs	r2, #0
 800c596:	4630      	mov	r0, r6
 800c598:	4639      	mov	r1, r7
 800c59a:	f7f3 fe7d 	bl	8000298 <__aeabi_dsub>
 800c59e:	a36e      	add	r3, pc, #440	; (adr r3, 800c758 <_dtoa_r+0x2e0>)
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	f7f4 f830 	bl	8000608 <__aeabi_dmul>
 800c5a8:	a36d      	add	r3, pc, #436	; (adr r3, 800c760 <_dtoa_r+0x2e8>)
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	f7f3 fe75 	bl	800029c <__adddf3>
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	f7f3 ffbc 	bl	8000534 <__aeabi_i2d>
 800c5bc:	a36a      	add	r3, pc, #424	; (adr r3, 800c768 <_dtoa_r+0x2f0>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	f7f4 f821 	bl	8000608 <__aeabi_dmul>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f3 fe65 	bl	800029c <__adddf3>
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	460f      	mov	r7, r1
 800c5d6:	f7f4 fac7 	bl	8000b68 <__aeabi_d2iz>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4682      	mov	sl, r0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f4 fa82 	bl	8000aec <__aeabi_dcmplt>
 800c5e8:	b148      	cbz	r0, 800c5fe <_dtoa_r+0x186>
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	f7f3 ffa2 	bl	8000534 <__aeabi_i2d>
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	f7f4 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5f8:	b908      	cbnz	r0, 800c5fe <_dtoa_r+0x186>
 800c5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5fe:	f1ba 0f16 	cmp.w	sl, #22
 800c602:	d854      	bhi.n	800c6ae <_dtoa_r+0x236>
 800c604:	4b61      	ldr	r3, [pc, #388]	; (800c78c <_dtoa_r+0x314>)
 800c606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c612:	f7f4 fa6b 	bl	8000aec <__aeabi_dcmplt>
 800c616:	2800      	cmp	r0, #0
 800c618:	d04b      	beq.n	800c6b2 <_dtoa_r+0x23a>
 800c61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c61e:	2300      	movs	r3, #0
 800c620:	930e      	str	r3, [sp, #56]	; 0x38
 800c622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c624:	1b5d      	subs	r5, r3, r5
 800c626:	1e6b      	subs	r3, r5, #1
 800c628:	9304      	str	r3, [sp, #16]
 800c62a:	bf43      	ittte	mi
 800c62c:	2300      	movmi	r3, #0
 800c62e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c632:	9304      	strmi	r3, [sp, #16]
 800c634:	f04f 0800 	movpl.w	r8, #0
 800c638:	f1ba 0f00 	cmp.w	sl, #0
 800c63c:	db3b      	blt.n	800c6b6 <_dtoa_r+0x23e>
 800c63e:	9b04      	ldr	r3, [sp, #16]
 800c640:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c644:	4453      	add	r3, sl
 800c646:	9304      	str	r3, [sp, #16]
 800c648:	2300      	movs	r3, #0
 800c64a:	9306      	str	r3, [sp, #24]
 800c64c:	9b05      	ldr	r3, [sp, #20]
 800c64e:	2b09      	cmp	r3, #9
 800c650:	d869      	bhi.n	800c726 <_dtoa_r+0x2ae>
 800c652:	2b05      	cmp	r3, #5
 800c654:	bfc4      	itt	gt
 800c656:	3b04      	subgt	r3, #4
 800c658:	9305      	strgt	r3, [sp, #20]
 800c65a:	9b05      	ldr	r3, [sp, #20]
 800c65c:	f1a3 0302 	sub.w	r3, r3, #2
 800c660:	bfcc      	ite	gt
 800c662:	2500      	movgt	r5, #0
 800c664:	2501      	movle	r5, #1
 800c666:	2b03      	cmp	r3, #3
 800c668:	d869      	bhi.n	800c73e <_dtoa_r+0x2c6>
 800c66a:	e8df f003 	tbb	[pc, r3]
 800c66e:	4e2c      	.short	0x4e2c
 800c670:	5a4c      	.short	0x5a4c
 800c672:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c676:	441d      	add	r5, r3
 800c678:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c67c:	2b20      	cmp	r3, #32
 800c67e:	bfc1      	itttt	gt
 800c680:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c684:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c688:	fa09 f303 	lslgt.w	r3, r9, r3
 800c68c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c690:	bfda      	itte	le
 800c692:	f1c3 0320 	rsble	r3, r3, #32
 800c696:	fa06 f003 	lslle.w	r0, r6, r3
 800c69a:	4318      	orrgt	r0, r3
 800c69c:	f7f3 ff3a 	bl	8000514 <__aeabi_ui2d>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c6a8:	3d01      	subs	r5, #1
 800c6aa:	9310      	str	r3, [sp, #64]	; 0x40
 800c6ac:	e771      	b.n	800c592 <_dtoa_r+0x11a>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e7b6      	b.n	800c620 <_dtoa_r+0x1a8>
 800c6b2:	900e      	str	r0, [sp, #56]	; 0x38
 800c6b4:	e7b5      	b.n	800c622 <_dtoa_r+0x1aa>
 800c6b6:	f1ca 0300 	rsb	r3, sl, #0
 800c6ba:	9306      	str	r3, [sp, #24]
 800c6bc:	2300      	movs	r3, #0
 800c6be:	eba8 080a 	sub.w	r8, r8, sl
 800c6c2:	930d      	str	r3, [sp, #52]	; 0x34
 800c6c4:	e7c2      	b.n	800c64c <_dtoa_r+0x1d4>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	9308      	str	r3, [sp, #32]
 800c6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dc39      	bgt.n	800c744 <_dtoa_r+0x2cc>
 800c6d0:	f04f 0901 	mov.w	r9, #1
 800c6d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c6d8:	464b      	mov	r3, r9
 800c6da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c6de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	6042      	str	r2, [r0, #4]
 800c6e4:	2204      	movs	r2, #4
 800c6e6:	f102 0614 	add.w	r6, r2, #20
 800c6ea:	429e      	cmp	r6, r3
 800c6ec:	6841      	ldr	r1, [r0, #4]
 800c6ee:	d92f      	bls.n	800c750 <_dtoa_r+0x2d8>
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f000 fdc5 	bl	800d280 <_Balloc>
 800c6f6:	9000      	str	r0, [sp, #0]
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d14b      	bne.n	800c794 <_dtoa_r+0x31c>
 800c6fc:	4b24      	ldr	r3, [pc, #144]	; (800c790 <_dtoa_r+0x318>)
 800c6fe:	4602      	mov	r2, r0
 800c700:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c704:	e6d1      	b.n	800c4aa <_dtoa_r+0x32>
 800c706:	2301      	movs	r3, #1
 800c708:	e7de      	b.n	800c6c8 <_dtoa_r+0x250>
 800c70a:	2300      	movs	r3, #0
 800c70c:	9308      	str	r3, [sp, #32]
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	eb0a 0903 	add.w	r9, sl, r3
 800c714:	f109 0301 	add.w	r3, r9, #1
 800c718:	2b01      	cmp	r3, #1
 800c71a:	9301      	str	r3, [sp, #4]
 800c71c:	bfb8      	it	lt
 800c71e:	2301      	movlt	r3, #1
 800c720:	e7dd      	b.n	800c6de <_dtoa_r+0x266>
 800c722:	2301      	movs	r3, #1
 800c724:	e7f2      	b.n	800c70c <_dtoa_r+0x294>
 800c726:	2501      	movs	r5, #1
 800c728:	2300      	movs	r3, #0
 800c72a:	9305      	str	r3, [sp, #20]
 800c72c:	9508      	str	r5, [sp, #32]
 800c72e:	f04f 39ff 	mov.w	r9, #4294967295
 800c732:	2200      	movs	r2, #0
 800c734:	f8cd 9004 	str.w	r9, [sp, #4]
 800c738:	2312      	movs	r3, #18
 800c73a:	9209      	str	r2, [sp, #36]	; 0x24
 800c73c:	e7cf      	b.n	800c6de <_dtoa_r+0x266>
 800c73e:	2301      	movs	r3, #1
 800c740:	9308      	str	r3, [sp, #32]
 800c742:	e7f4      	b.n	800c72e <_dtoa_r+0x2b6>
 800c744:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c748:	f8cd 9004 	str.w	r9, [sp, #4]
 800c74c:	464b      	mov	r3, r9
 800c74e:	e7c6      	b.n	800c6de <_dtoa_r+0x266>
 800c750:	3101      	adds	r1, #1
 800c752:	6041      	str	r1, [r0, #4]
 800c754:	0052      	lsls	r2, r2, #1
 800c756:	e7c6      	b.n	800c6e6 <_dtoa_r+0x26e>
 800c758:	636f4361 	.word	0x636f4361
 800c75c:	3fd287a7 	.word	0x3fd287a7
 800c760:	8b60c8b3 	.word	0x8b60c8b3
 800c764:	3fc68a28 	.word	0x3fc68a28
 800c768:	509f79fb 	.word	0x509f79fb
 800c76c:	3fd34413 	.word	0x3fd34413
 800c770:	08072850 	.word	0x08072850
 800c774:	0807290f 	.word	0x0807290f
 800c778:	7ff00000 	.word	0x7ff00000
 800c77c:	0807290b 	.word	0x0807290b
 800c780:	08072902 	.word	0x08072902
 800c784:	0807282d 	.word	0x0807282d
 800c788:	3ff80000 	.word	0x3ff80000
 800c78c:	08072a68 	.word	0x08072a68
 800c790:	0807296e 	.word	0x0807296e
 800c794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c796:	9a00      	ldr	r2, [sp, #0]
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	9b01      	ldr	r3, [sp, #4]
 800c79c:	2b0e      	cmp	r3, #14
 800c79e:	f200 80ad 	bhi.w	800c8fc <_dtoa_r+0x484>
 800c7a2:	2d00      	cmp	r5, #0
 800c7a4:	f000 80aa 	beq.w	800c8fc <_dtoa_r+0x484>
 800c7a8:	f1ba 0f00 	cmp.w	sl, #0
 800c7ac:	dd36      	ble.n	800c81c <_dtoa_r+0x3a4>
 800c7ae:	4ac3      	ldr	r2, [pc, #780]	; (800cabc <_dtoa_r+0x644>)
 800c7b0:	f00a 030f 	and.w	r3, sl, #15
 800c7b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7b8:	ed93 7b00 	vldr	d7, [r3]
 800c7bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c7c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c7c4:	eeb0 8a47 	vmov.f32	s16, s14
 800c7c8:	eef0 8a67 	vmov.f32	s17, s15
 800c7cc:	d016      	beq.n	800c7fc <_dtoa_r+0x384>
 800c7ce:	4bbc      	ldr	r3, [pc, #752]	; (800cac0 <_dtoa_r+0x648>)
 800c7d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c7d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7d8:	f7f4 f840 	bl	800085c <__aeabi_ddiv>
 800c7dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e0:	f007 070f 	and.w	r7, r7, #15
 800c7e4:	2503      	movs	r5, #3
 800c7e6:	4eb6      	ldr	r6, [pc, #728]	; (800cac0 <_dtoa_r+0x648>)
 800c7e8:	b957      	cbnz	r7, 800c800 <_dtoa_r+0x388>
 800c7ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ee:	ec53 2b18 	vmov	r2, r3, d8
 800c7f2:	f7f4 f833 	bl	800085c <__aeabi_ddiv>
 800c7f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7fa:	e029      	b.n	800c850 <_dtoa_r+0x3d8>
 800c7fc:	2502      	movs	r5, #2
 800c7fe:	e7f2      	b.n	800c7e6 <_dtoa_r+0x36e>
 800c800:	07f9      	lsls	r1, r7, #31
 800c802:	d508      	bpl.n	800c816 <_dtoa_r+0x39e>
 800c804:	ec51 0b18 	vmov	r0, r1, d8
 800c808:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c80c:	f7f3 fefc 	bl	8000608 <__aeabi_dmul>
 800c810:	ec41 0b18 	vmov	d8, r0, r1
 800c814:	3501      	adds	r5, #1
 800c816:	107f      	asrs	r7, r7, #1
 800c818:	3608      	adds	r6, #8
 800c81a:	e7e5      	b.n	800c7e8 <_dtoa_r+0x370>
 800c81c:	f000 80a6 	beq.w	800c96c <_dtoa_r+0x4f4>
 800c820:	f1ca 0600 	rsb	r6, sl, #0
 800c824:	4ba5      	ldr	r3, [pc, #660]	; (800cabc <_dtoa_r+0x644>)
 800c826:	4fa6      	ldr	r7, [pc, #664]	; (800cac0 <_dtoa_r+0x648>)
 800c828:	f006 020f 	and.w	r2, r6, #15
 800c82c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c838:	f7f3 fee6 	bl	8000608 <__aeabi_dmul>
 800c83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c840:	1136      	asrs	r6, r6, #4
 800c842:	2300      	movs	r3, #0
 800c844:	2502      	movs	r5, #2
 800c846:	2e00      	cmp	r6, #0
 800c848:	f040 8085 	bne.w	800c956 <_dtoa_r+0x4de>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1d2      	bne.n	800c7f6 <_dtoa_r+0x37e>
 800c850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 808c 	beq.w	800c970 <_dtoa_r+0x4f8>
 800c858:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c85c:	4b99      	ldr	r3, [pc, #612]	; (800cac4 <_dtoa_r+0x64c>)
 800c85e:	2200      	movs	r2, #0
 800c860:	4630      	mov	r0, r6
 800c862:	4639      	mov	r1, r7
 800c864:	f7f4 f942 	bl	8000aec <__aeabi_dcmplt>
 800c868:	2800      	cmp	r0, #0
 800c86a:	f000 8081 	beq.w	800c970 <_dtoa_r+0x4f8>
 800c86e:	9b01      	ldr	r3, [sp, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d07d      	beq.n	800c970 <_dtoa_r+0x4f8>
 800c874:	f1b9 0f00 	cmp.w	r9, #0
 800c878:	dd3c      	ble.n	800c8f4 <_dtoa_r+0x47c>
 800c87a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c87e:	9307      	str	r3, [sp, #28]
 800c880:	2200      	movs	r2, #0
 800c882:	4b91      	ldr	r3, [pc, #580]	; (800cac8 <_dtoa_r+0x650>)
 800c884:	4630      	mov	r0, r6
 800c886:	4639      	mov	r1, r7
 800c888:	f7f3 febe 	bl	8000608 <__aeabi_dmul>
 800c88c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c890:	3501      	adds	r5, #1
 800c892:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c896:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c89a:	4628      	mov	r0, r5
 800c89c:	f7f3 fe4a 	bl	8000534 <__aeabi_i2d>
 800c8a0:	4632      	mov	r2, r6
 800c8a2:	463b      	mov	r3, r7
 800c8a4:	f7f3 feb0 	bl	8000608 <__aeabi_dmul>
 800c8a8:	4b88      	ldr	r3, [pc, #544]	; (800cacc <_dtoa_r+0x654>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f7f3 fcf6 	bl	800029c <__adddf3>
 800c8b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8b8:	9303      	str	r3, [sp, #12]
 800c8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d15c      	bne.n	800c97a <_dtoa_r+0x502>
 800c8c0:	4b83      	ldr	r3, [pc, #524]	; (800cad0 <_dtoa_r+0x658>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	f7f3 fce6 	bl	8000298 <__aeabi_dsub>
 800c8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	f7f4 f928 	bl	8000b28 <__aeabi_dcmpgt>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	f040 8296 	bne.w	800ce0a <_dtoa_r+0x992>
 800c8de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f4 f8ff 	bl	8000aec <__aeabi_dcmplt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f040 8288 	bne.w	800ce04 <_dtoa_r+0x98c>
 800c8f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c8f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f2c0 8158 	blt.w	800cbb4 <_dtoa_r+0x73c>
 800c904:	f1ba 0f0e 	cmp.w	sl, #14
 800c908:	f300 8154 	bgt.w	800cbb4 <_dtoa_r+0x73c>
 800c90c:	4b6b      	ldr	r3, [pc, #428]	; (800cabc <_dtoa_r+0x644>)
 800c90e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c912:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f280 80e3 	bge.w	800cae4 <_dtoa_r+0x66c>
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f300 80df 	bgt.w	800cae4 <_dtoa_r+0x66c>
 800c926:	f040 826d 	bne.w	800ce04 <_dtoa_r+0x98c>
 800c92a:	4b69      	ldr	r3, [pc, #420]	; (800cad0 <_dtoa_r+0x658>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f3 fe69 	bl	8000608 <__aeabi_dmul>
 800c936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c93a:	f7f4 f8eb 	bl	8000b14 <__aeabi_dcmpge>
 800c93e:	9e01      	ldr	r6, [sp, #4]
 800c940:	4637      	mov	r7, r6
 800c942:	2800      	cmp	r0, #0
 800c944:	f040 8243 	bne.w	800cdce <_dtoa_r+0x956>
 800c948:	9d00      	ldr	r5, [sp, #0]
 800c94a:	2331      	movs	r3, #49	; 0x31
 800c94c:	f805 3b01 	strb.w	r3, [r5], #1
 800c950:	f10a 0a01 	add.w	sl, sl, #1
 800c954:	e23f      	b.n	800cdd6 <_dtoa_r+0x95e>
 800c956:	07f2      	lsls	r2, r6, #31
 800c958:	d505      	bpl.n	800c966 <_dtoa_r+0x4ee>
 800c95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c95e:	f7f3 fe53 	bl	8000608 <__aeabi_dmul>
 800c962:	3501      	adds	r5, #1
 800c964:	2301      	movs	r3, #1
 800c966:	1076      	asrs	r6, r6, #1
 800c968:	3708      	adds	r7, #8
 800c96a:	e76c      	b.n	800c846 <_dtoa_r+0x3ce>
 800c96c:	2502      	movs	r5, #2
 800c96e:	e76f      	b.n	800c850 <_dtoa_r+0x3d8>
 800c970:	9b01      	ldr	r3, [sp, #4]
 800c972:	f8cd a01c 	str.w	sl, [sp, #28]
 800c976:	930c      	str	r3, [sp, #48]	; 0x30
 800c978:	e78d      	b.n	800c896 <_dtoa_r+0x41e>
 800c97a:	9900      	ldr	r1, [sp, #0]
 800c97c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c97e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c980:	4b4e      	ldr	r3, [pc, #312]	; (800cabc <_dtoa_r+0x644>)
 800c982:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c986:	4401      	add	r1, r0
 800c988:	9102      	str	r1, [sp, #8]
 800c98a:	9908      	ldr	r1, [sp, #32]
 800c98c:	eeb0 8a47 	vmov.f32	s16, s14
 800c990:	eef0 8a67 	vmov.f32	s17, s15
 800c994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c99c:	2900      	cmp	r1, #0
 800c99e:	d045      	beq.n	800ca2c <_dtoa_r+0x5b4>
 800c9a0:	494c      	ldr	r1, [pc, #304]	; (800cad4 <_dtoa_r+0x65c>)
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f7f3 ff5a 	bl	800085c <__aeabi_ddiv>
 800c9a8:	ec53 2b18 	vmov	r2, r3, d8
 800c9ac:	f7f3 fc74 	bl	8000298 <__aeabi_dsub>
 800c9b0:	9d00      	ldr	r5, [sp, #0]
 800c9b2:	ec41 0b18 	vmov	d8, r0, r1
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7f4 f8d5 	bl	8000b68 <__aeabi_d2iz>
 800c9be:	900c      	str	r0, [sp, #48]	; 0x30
 800c9c0:	f7f3 fdb8 	bl	8000534 <__aeabi_i2d>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	f7f3 fc64 	bl	8000298 <__aeabi_dsub>
 800c9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9d2:	3330      	adds	r3, #48	; 0x30
 800c9d4:	f805 3b01 	strb.w	r3, [r5], #1
 800c9d8:	ec53 2b18 	vmov	r2, r3, d8
 800c9dc:	4606      	mov	r6, r0
 800c9de:	460f      	mov	r7, r1
 800c9e0:	f7f4 f884 	bl	8000aec <__aeabi_dcmplt>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d165      	bne.n	800cab4 <_dtoa_r+0x63c>
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	463b      	mov	r3, r7
 800c9ec:	4935      	ldr	r1, [pc, #212]	; (800cac4 <_dtoa_r+0x64c>)
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	f7f3 fc52 	bl	8000298 <__aeabi_dsub>
 800c9f4:	ec53 2b18 	vmov	r2, r3, d8
 800c9f8:	f7f4 f878 	bl	8000aec <__aeabi_dcmplt>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f040 80b9 	bne.w	800cb74 <_dtoa_r+0x6fc>
 800ca02:	9b02      	ldr	r3, [sp, #8]
 800ca04:	429d      	cmp	r5, r3
 800ca06:	f43f af75 	beq.w	800c8f4 <_dtoa_r+0x47c>
 800ca0a:	4b2f      	ldr	r3, [pc, #188]	; (800cac8 <_dtoa_r+0x650>)
 800ca0c:	ec51 0b18 	vmov	r0, r1, d8
 800ca10:	2200      	movs	r2, #0
 800ca12:	f7f3 fdf9 	bl	8000608 <__aeabi_dmul>
 800ca16:	4b2c      	ldr	r3, [pc, #176]	; (800cac8 <_dtoa_r+0x650>)
 800ca18:	ec41 0b18 	vmov	d8, r0, r1
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f3 fdf1 	bl	8000608 <__aeabi_dmul>
 800ca26:	4606      	mov	r6, r0
 800ca28:	460f      	mov	r7, r1
 800ca2a:	e7c4      	b.n	800c9b6 <_dtoa_r+0x53e>
 800ca2c:	ec51 0b17 	vmov	r0, r1, d7
 800ca30:	f7f3 fdea 	bl	8000608 <__aeabi_dmul>
 800ca34:	9b02      	ldr	r3, [sp, #8]
 800ca36:	9d00      	ldr	r5, [sp, #0]
 800ca38:	930c      	str	r3, [sp, #48]	; 0x30
 800ca3a:	ec41 0b18 	vmov	d8, r0, r1
 800ca3e:	4639      	mov	r1, r7
 800ca40:	4630      	mov	r0, r6
 800ca42:	f7f4 f891 	bl	8000b68 <__aeabi_d2iz>
 800ca46:	9011      	str	r0, [sp, #68]	; 0x44
 800ca48:	f7f3 fd74 	bl	8000534 <__aeabi_i2d>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f3 fc20 	bl	8000298 <__aeabi_dsub>
 800ca58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca5a:	3330      	adds	r3, #48	; 0x30
 800ca5c:	f805 3b01 	strb.w	r3, [r5], #1
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	429d      	cmp	r5, r3
 800ca64:	4606      	mov	r6, r0
 800ca66:	460f      	mov	r7, r1
 800ca68:	f04f 0200 	mov.w	r2, #0
 800ca6c:	d134      	bne.n	800cad8 <_dtoa_r+0x660>
 800ca6e:	4b19      	ldr	r3, [pc, #100]	; (800cad4 <_dtoa_r+0x65c>)
 800ca70:	ec51 0b18 	vmov	r0, r1, d8
 800ca74:	f7f3 fc12 	bl	800029c <__adddf3>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	f7f4 f852 	bl	8000b28 <__aeabi_dcmpgt>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d175      	bne.n	800cb74 <_dtoa_r+0x6fc>
 800ca88:	ec53 2b18 	vmov	r2, r3, d8
 800ca8c:	4911      	ldr	r1, [pc, #68]	; (800cad4 <_dtoa_r+0x65c>)
 800ca8e:	2000      	movs	r0, #0
 800ca90:	f7f3 fc02 	bl	8000298 <__aeabi_dsub>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	4630      	mov	r0, r6
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	f7f4 f826 	bl	8000aec <__aeabi_dcmplt>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	f43f af27 	beq.w	800c8f4 <_dtoa_r+0x47c>
 800caa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caa8:	1e6b      	subs	r3, r5, #1
 800caaa:	930c      	str	r3, [sp, #48]	; 0x30
 800caac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cab0:	2b30      	cmp	r3, #48	; 0x30
 800cab2:	d0f8      	beq.n	800caa6 <_dtoa_r+0x62e>
 800cab4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cab8:	e04a      	b.n	800cb50 <_dtoa_r+0x6d8>
 800caba:	bf00      	nop
 800cabc:	08072a68 	.word	0x08072a68
 800cac0:	08072a40 	.word	0x08072a40
 800cac4:	3ff00000 	.word	0x3ff00000
 800cac8:	40240000 	.word	0x40240000
 800cacc:	401c0000 	.word	0x401c0000
 800cad0:	40140000 	.word	0x40140000
 800cad4:	3fe00000 	.word	0x3fe00000
 800cad8:	4baf      	ldr	r3, [pc, #700]	; (800cd98 <_dtoa_r+0x920>)
 800cada:	f7f3 fd95 	bl	8000608 <__aeabi_dmul>
 800cade:	4606      	mov	r6, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	e7ac      	b.n	800ca3e <_dtoa_r+0x5c6>
 800cae4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cae8:	9d00      	ldr	r5, [sp, #0]
 800caea:	4642      	mov	r2, r8
 800caec:	464b      	mov	r3, r9
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	f7f3 feb3 	bl	800085c <__aeabi_ddiv>
 800caf6:	f7f4 f837 	bl	8000b68 <__aeabi_d2iz>
 800cafa:	9002      	str	r0, [sp, #8]
 800cafc:	f7f3 fd1a 	bl	8000534 <__aeabi_i2d>
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	f7f3 fd80 	bl	8000608 <__aeabi_dmul>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	4639      	mov	r1, r7
 800cb10:	f7f3 fbc2 	bl	8000298 <__aeabi_dsub>
 800cb14:	9e02      	ldr	r6, [sp, #8]
 800cb16:	9f01      	ldr	r7, [sp, #4]
 800cb18:	3630      	adds	r6, #48	; 0x30
 800cb1a:	f805 6b01 	strb.w	r6, [r5], #1
 800cb1e:	9e00      	ldr	r6, [sp, #0]
 800cb20:	1bae      	subs	r6, r5, r6
 800cb22:	42b7      	cmp	r7, r6
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	d137      	bne.n	800cb9a <_dtoa_r+0x722>
 800cb2a:	f7f3 fbb7 	bl	800029c <__adddf3>
 800cb2e:	4642      	mov	r2, r8
 800cb30:	464b      	mov	r3, r9
 800cb32:	4606      	mov	r6, r0
 800cb34:	460f      	mov	r7, r1
 800cb36:	f7f3 fff7 	bl	8000b28 <__aeabi_dcmpgt>
 800cb3a:	b9c8      	cbnz	r0, 800cb70 <_dtoa_r+0x6f8>
 800cb3c:	4642      	mov	r2, r8
 800cb3e:	464b      	mov	r3, r9
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f3 ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb48:	b110      	cbz	r0, 800cb50 <_dtoa_r+0x6d8>
 800cb4a:	9b02      	ldr	r3, [sp, #8]
 800cb4c:	07d9      	lsls	r1, r3, #31
 800cb4e:	d40f      	bmi.n	800cb70 <_dtoa_r+0x6f8>
 800cb50:	4620      	mov	r0, r4
 800cb52:	4659      	mov	r1, fp
 800cb54:	f000 fbd4 	bl	800d300 <_Bfree>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	702b      	strb	r3, [r5, #0]
 800cb5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb5e:	f10a 0001 	add.w	r0, sl, #1
 800cb62:	6018      	str	r0, [r3, #0]
 800cb64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f43f acd8 	beq.w	800c51c <_dtoa_r+0xa4>
 800cb6c:	601d      	str	r5, [r3, #0]
 800cb6e:	e4d5      	b.n	800c51c <_dtoa_r+0xa4>
 800cb70:	f8cd a01c 	str.w	sl, [sp, #28]
 800cb74:	462b      	mov	r3, r5
 800cb76:	461d      	mov	r5, r3
 800cb78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb7c:	2a39      	cmp	r2, #57	; 0x39
 800cb7e:	d108      	bne.n	800cb92 <_dtoa_r+0x71a>
 800cb80:	9a00      	ldr	r2, [sp, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d1f7      	bne.n	800cb76 <_dtoa_r+0x6fe>
 800cb86:	9a07      	ldr	r2, [sp, #28]
 800cb88:	9900      	ldr	r1, [sp, #0]
 800cb8a:	3201      	adds	r2, #1
 800cb8c:	9207      	str	r2, [sp, #28]
 800cb8e:	2230      	movs	r2, #48	; 0x30
 800cb90:	700a      	strb	r2, [r1, #0]
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	3201      	adds	r2, #1
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	e78c      	b.n	800cab4 <_dtoa_r+0x63c>
 800cb9a:	4b7f      	ldr	r3, [pc, #508]	; (800cd98 <_dtoa_r+0x920>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f7f3 fd33 	bl	8000608 <__aeabi_dmul>
 800cba2:	2200      	movs	r2, #0
 800cba4:	2300      	movs	r3, #0
 800cba6:	4606      	mov	r6, r0
 800cba8:	460f      	mov	r7, r1
 800cbaa:	f7f3 ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d09b      	beq.n	800caea <_dtoa_r+0x672>
 800cbb2:	e7cd      	b.n	800cb50 <_dtoa_r+0x6d8>
 800cbb4:	9a08      	ldr	r2, [sp, #32]
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	f000 80c4 	beq.w	800cd44 <_dtoa_r+0x8cc>
 800cbbc:	9a05      	ldr	r2, [sp, #20]
 800cbbe:	2a01      	cmp	r2, #1
 800cbc0:	f300 80a8 	bgt.w	800cd14 <_dtoa_r+0x89c>
 800cbc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	f000 80a0 	beq.w	800cd0c <_dtoa_r+0x894>
 800cbcc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbd0:	9e06      	ldr	r6, [sp, #24]
 800cbd2:	4645      	mov	r5, r8
 800cbd4:	9a04      	ldr	r2, [sp, #16]
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	441a      	add	r2, r3
 800cbda:	4620      	mov	r0, r4
 800cbdc:	4498      	add	r8, r3
 800cbde:	9204      	str	r2, [sp, #16]
 800cbe0:	f000 fc4a 	bl	800d478 <__i2b>
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	2d00      	cmp	r5, #0
 800cbe8:	dd0b      	ble.n	800cc02 <_dtoa_r+0x78a>
 800cbea:	9b04      	ldr	r3, [sp, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dd08      	ble.n	800cc02 <_dtoa_r+0x78a>
 800cbf0:	42ab      	cmp	r3, r5
 800cbf2:	9a04      	ldr	r2, [sp, #16]
 800cbf4:	bfa8      	it	ge
 800cbf6:	462b      	movge	r3, r5
 800cbf8:	eba8 0803 	sub.w	r8, r8, r3
 800cbfc:	1aed      	subs	r5, r5, r3
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	9304      	str	r3, [sp, #16]
 800cc02:	9b06      	ldr	r3, [sp, #24]
 800cc04:	b1fb      	cbz	r3, 800cc46 <_dtoa_r+0x7ce>
 800cc06:	9b08      	ldr	r3, [sp, #32]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 809f 	beq.w	800cd4c <_dtoa_r+0x8d4>
 800cc0e:	2e00      	cmp	r6, #0
 800cc10:	dd11      	ble.n	800cc36 <_dtoa_r+0x7be>
 800cc12:	4639      	mov	r1, r7
 800cc14:	4632      	mov	r2, r6
 800cc16:	4620      	mov	r0, r4
 800cc18:	f000 fcea 	bl	800d5f0 <__pow5mult>
 800cc1c:	465a      	mov	r2, fp
 800cc1e:	4601      	mov	r1, r0
 800cc20:	4607      	mov	r7, r0
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 fc3e 	bl	800d4a4 <__multiply>
 800cc28:	4659      	mov	r1, fp
 800cc2a:	9007      	str	r0, [sp, #28]
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f000 fb67 	bl	800d300 <_Bfree>
 800cc32:	9b07      	ldr	r3, [sp, #28]
 800cc34:	469b      	mov	fp, r3
 800cc36:	9b06      	ldr	r3, [sp, #24]
 800cc38:	1b9a      	subs	r2, r3, r6
 800cc3a:	d004      	beq.n	800cc46 <_dtoa_r+0x7ce>
 800cc3c:	4659      	mov	r1, fp
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 fcd6 	bl	800d5f0 <__pow5mult>
 800cc44:	4683      	mov	fp, r0
 800cc46:	2101      	movs	r1, #1
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f000 fc15 	bl	800d478 <__i2b>
 800cc4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	4606      	mov	r6, r0
 800cc54:	dd7c      	ble.n	800cd50 <_dtoa_r+0x8d8>
 800cc56:	461a      	mov	r2, r3
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 fcc8 	bl	800d5f0 <__pow5mult>
 800cc60:	9b05      	ldr	r3, [sp, #20]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	4606      	mov	r6, r0
 800cc66:	dd76      	ble.n	800cd56 <_dtoa_r+0x8de>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	9306      	str	r3, [sp, #24]
 800cc6c:	6933      	ldr	r3, [r6, #16]
 800cc6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc72:	6918      	ldr	r0, [r3, #16]
 800cc74:	f000 fbb0 	bl	800d3d8 <__hi0bits>
 800cc78:	f1c0 0020 	rsb	r0, r0, #32
 800cc7c:	9b04      	ldr	r3, [sp, #16]
 800cc7e:	4418      	add	r0, r3
 800cc80:	f010 001f 	ands.w	r0, r0, #31
 800cc84:	f000 8086 	beq.w	800cd94 <_dtoa_r+0x91c>
 800cc88:	f1c0 0320 	rsb	r3, r0, #32
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	dd7f      	ble.n	800cd90 <_dtoa_r+0x918>
 800cc90:	f1c0 001c 	rsb	r0, r0, #28
 800cc94:	9b04      	ldr	r3, [sp, #16]
 800cc96:	4403      	add	r3, r0
 800cc98:	4480      	add	r8, r0
 800cc9a:	4405      	add	r5, r0
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	dd05      	ble.n	800ccb0 <_dtoa_r+0x838>
 800cca4:	4659      	mov	r1, fp
 800cca6:	4642      	mov	r2, r8
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f000 fcfb 	bl	800d6a4 <__lshift>
 800ccae:	4683      	mov	fp, r0
 800ccb0:	9b04      	ldr	r3, [sp, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	dd05      	ble.n	800ccc2 <_dtoa_r+0x84a>
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	461a      	mov	r2, r3
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 fcf2 	bl	800d6a4 <__lshift>
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d069      	beq.n	800cd9c <_dtoa_r+0x924>
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4658      	mov	r0, fp
 800cccc:	f000 fd56 	bl	800d77c <__mcmp>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	da63      	bge.n	800cd9c <_dtoa_r+0x924>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4659      	mov	r1, fp
 800ccd8:	220a      	movs	r2, #10
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 fb32 	bl	800d344 <__multadd>
 800cce0:	9b08      	ldr	r3, [sp, #32]
 800cce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cce6:	4683      	mov	fp, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 818f 	beq.w	800d00c <_dtoa_r+0xb94>
 800ccee:	4639      	mov	r1, r7
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	220a      	movs	r2, #10
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fb25 	bl	800d344 <__multadd>
 800ccfa:	f1b9 0f00 	cmp.w	r9, #0
 800ccfe:	4607      	mov	r7, r0
 800cd00:	f300 808e 	bgt.w	800ce20 <_dtoa_r+0x9a8>
 800cd04:	9b05      	ldr	r3, [sp, #20]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	dc50      	bgt.n	800cdac <_dtoa_r+0x934>
 800cd0a:	e089      	b.n	800ce20 <_dtoa_r+0x9a8>
 800cd0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd12:	e75d      	b.n	800cbd0 <_dtoa_r+0x758>
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	1e5e      	subs	r6, r3, #1
 800cd18:	9b06      	ldr	r3, [sp, #24]
 800cd1a:	42b3      	cmp	r3, r6
 800cd1c:	bfbf      	itttt	lt
 800cd1e:	9b06      	ldrlt	r3, [sp, #24]
 800cd20:	9606      	strlt	r6, [sp, #24]
 800cd22:	1af2      	sublt	r2, r6, r3
 800cd24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cd26:	bfb6      	itet	lt
 800cd28:	189b      	addlt	r3, r3, r2
 800cd2a:	1b9e      	subge	r6, r3, r6
 800cd2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cd2e:	9b01      	ldr	r3, [sp, #4]
 800cd30:	bfb8      	it	lt
 800cd32:	2600      	movlt	r6, #0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bfb5      	itete	lt
 800cd38:	eba8 0503 	sublt.w	r5, r8, r3
 800cd3c:	9b01      	ldrge	r3, [sp, #4]
 800cd3e:	2300      	movlt	r3, #0
 800cd40:	4645      	movge	r5, r8
 800cd42:	e747      	b.n	800cbd4 <_dtoa_r+0x75c>
 800cd44:	9e06      	ldr	r6, [sp, #24]
 800cd46:	9f08      	ldr	r7, [sp, #32]
 800cd48:	4645      	mov	r5, r8
 800cd4a:	e74c      	b.n	800cbe6 <_dtoa_r+0x76e>
 800cd4c:	9a06      	ldr	r2, [sp, #24]
 800cd4e:	e775      	b.n	800cc3c <_dtoa_r+0x7c4>
 800cd50:	9b05      	ldr	r3, [sp, #20]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	dc18      	bgt.n	800cd88 <_dtoa_r+0x910>
 800cd56:	9b02      	ldr	r3, [sp, #8]
 800cd58:	b9b3      	cbnz	r3, 800cd88 <_dtoa_r+0x910>
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd60:	b9a3      	cbnz	r3, 800cd8c <_dtoa_r+0x914>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd68:	0d1b      	lsrs	r3, r3, #20
 800cd6a:	051b      	lsls	r3, r3, #20
 800cd6c:	b12b      	cbz	r3, 800cd7a <_dtoa_r+0x902>
 800cd6e:	9b04      	ldr	r3, [sp, #16]
 800cd70:	3301      	adds	r3, #1
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	f108 0801 	add.w	r8, r8, #1
 800cd78:	2301      	movs	r3, #1
 800cd7a:	9306      	str	r3, [sp, #24]
 800cd7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f47f af74 	bne.w	800cc6c <_dtoa_r+0x7f4>
 800cd84:	2001      	movs	r0, #1
 800cd86:	e779      	b.n	800cc7c <_dtoa_r+0x804>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	e7f6      	b.n	800cd7a <_dtoa_r+0x902>
 800cd8c:	9b02      	ldr	r3, [sp, #8]
 800cd8e:	e7f4      	b.n	800cd7a <_dtoa_r+0x902>
 800cd90:	d085      	beq.n	800cc9e <_dtoa_r+0x826>
 800cd92:	4618      	mov	r0, r3
 800cd94:	301c      	adds	r0, #28
 800cd96:	e77d      	b.n	800cc94 <_dtoa_r+0x81c>
 800cd98:	40240000 	.word	0x40240000
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dc38      	bgt.n	800ce14 <_dtoa_r+0x99c>
 800cda2:	9b05      	ldr	r3, [sp, #20]
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	dd35      	ble.n	800ce14 <_dtoa_r+0x99c>
 800cda8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	d10d      	bne.n	800cdce <_dtoa_r+0x956>
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	464b      	mov	r3, r9
 800cdb6:	2205      	movs	r2, #5
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 fac3 	bl	800d344 <__multadd>
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	4658      	mov	r0, fp
 800cdc4:	f000 fcda 	bl	800d77c <__mcmp>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f73f adbd 	bgt.w	800c948 <_dtoa_r+0x4d0>
 800cdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd0:	9d00      	ldr	r5, [sp, #0]
 800cdd2:	ea6f 0a03 	mvn.w	sl, r3
 800cdd6:	f04f 0800 	mov.w	r8, #0
 800cdda:	4631      	mov	r1, r6
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fa8f 	bl	800d300 <_Bfree>
 800cde2:	2f00      	cmp	r7, #0
 800cde4:	f43f aeb4 	beq.w	800cb50 <_dtoa_r+0x6d8>
 800cde8:	f1b8 0f00 	cmp.w	r8, #0
 800cdec:	d005      	beq.n	800cdfa <_dtoa_r+0x982>
 800cdee:	45b8      	cmp	r8, r7
 800cdf0:	d003      	beq.n	800cdfa <_dtoa_r+0x982>
 800cdf2:	4641      	mov	r1, r8
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 fa83 	bl	800d300 <_Bfree>
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 fa7f 	bl	800d300 <_Bfree>
 800ce02:	e6a5      	b.n	800cb50 <_dtoa_r+0x6d8>
 800ce04:	2600      	movs	r6, #0
 800ce06:	4637      	mov	r7, r6
 800ce08:	e7e1      	b.n	800cdce <_dtoa_r+0x956>
 800ce0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ce0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ce10:	4637      	mov	r7, r6
 800ce12:	e599      	b.n	800c948 <_dtoa_r+0x4d0>
 800ce14:	9b08      	ldr	r3, [sp, #32]
 800ce16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 80fd 	beq.w	800d01a <_dtoa_r+0xba2>
 800ce20:	2d00      	cmp	r5, #0
 800ce22:	dd05      	ble.n	800ce30 <_dtoa_r+0x9b8>
 800ce24:	4639      	mov	r1, r7
 800ce26:	462a      	mov	r2, r5
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 fc3b 	bl	800d6a4 <__lshift>
 800ce2e:	4607      	mov	r7, r0
 800ce30:	9b06      	ldr	r3, [sp, #24]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d05c      	beq.n	800cef0 <_dtoa_r+0xa78>
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 fa21 	bl	800d280 <_Balloc>
 800ce3e:	4605      	mov	r5, r0
 800ce40:	b928      	cbnz	r0, 800ce4e <_dtoa_r+0x9d6>
 800ce42:	4b80      	ldr	r3, [pc, #512]	; (800d044 <_dtoa_r+0xbcc>)
 800ce44:	4602      	mov	r2, r0
 800ce46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ce4a:	f7ff bb2e 	b.w	800c4aa <_dtoa_r+0x32>
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	3202      	adds	r2, #2
 800ce52:	0092      	lsls	r2, r2, #2
 800ce54:	f107 010c 	add.w	r1, r7, #12
 800ce58:	300c      	adds	r0, #12
 800ce5a:	f7fe fd3d 	bl	800b8d8 <memcpy>
 800ce5e:	2201      	movs	r2, #1
 800ce60:	4629      	mov	r1, r5
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 fc1e 	bl	800d6a4 <__lshift>
 800ce68:	9b00      	ldr	r3, [sp, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	9b00      	ldr	r3, [sp, #0]
 800ce70:	444b      	add	r3, r9
 800ce72:	9307      	str	r3, [sp, #28]
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	46b8      	mov	r8, r7
 800ce7c:	9306      	str	r3, [sp, #24]
 800ce7e:	4607      	mov	r7, r0
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	4631      	mov	r1, r6
 800ce84:	3b01      	subs	r3, #1
 800ce86:	4658      	mov	r0, fp
 800ce88:	9302      	str	r3, [sp, #8]
 800ce8a:	f7ff fa67 	bl	800c35c <quorem>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	3330      	adds	r3, #48	; 0x30
 800ce92:	9004      	str	r0, [sp, #16]
 800ce94:	4641      	mov	r1, r8
 800ce96:	4658      	mov	r0, fp
 800ce98:	9308      	str	r3, [sp, #32]
 800ce9a:	f000 fc6f 	bl	800d77c <__mcmp>
 800ce9e:	463a      	mov	r2, r7
 800cea0:	4681      	mov	r9, r0
 800cea2:	4631      	mov	r1, r6
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 fc85 	bl	800d7b4 <__mdiff>
 800ceaa:	68c2      	ldr	r2, [r0, #12]
 800ceac:	9b08      	ldr	r3, [sp, #32]
 800ceae:	4605      	mov	r5, r0
 800ceb0:	bb02      	cbnz	r2, 800cef4 <_dtoa_r+0xa7c>
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	4658      	mov	r0, fp
 800ceb6:	f000 fc61 	bl	800d77c <__mcmp>
 800ceba:	9b08      	ldr	r3, [sp, #32]
 800cebc:	4602      	mov	r2, r0
 800cebe:	4629      	mov	r1, r5
 800cec0:	4620      	mov	r0, r4
 800cec2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cec6:	f000 fa1b 	bl	800d300 <_Bfree>
 800ceca:	9b05      	ldr	r3, [sp, #20]
 800cecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cece:	9d01      	ldr	r5, [sp, #4]
 800ced0:	ea43 0102 	orr.w	r1, r3, r2
 800ced4:	9b06      	ldr	r3, [sp, #24]
 800ced6:	430b      	orrs	r3, r1
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	d10d      	bne.n	800cef8 <_dtoa_r+0xa80>
 800cedc:	2b39      	cmp	r3, #57	; 0x39
 800cede:	d029      	beq.n	800cf34 <_dtoa_r+0xabc>
 800cee0:	f1b9 0f00 	cmp.w	r9, #0
 800cee4:	dd01      	ble.n	800ceea <_dtoa_r+0xa72>
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	3331      	adds	r3, #49	; 0x31
 800ceea:	9a02      	ldr	r2, [sp, #8]
 800ceec:	7013      	strb	r3, [r2, #0]
 800ceee:	e774      	b.n	800cdda <_dtoa_r+0x962>
 800cef0:	4638      	mov	r0, r7
 800cef2:	e7b9      	b.n	800ce68 <_dtoa_r+0x9f0>
 800cef4:	2201      	movs	r2, #1
 800cef6:	e7e2      	b.n	800cebe <_dtoa_r+0xa46>
 800cef8:	f1b9 0f00 	cmp.w	r9, #0
 800cefc:	db06      	blt.n	800cf0c <_dtoa_r+0xa94>
 800cefe:	9905      	ldr	r1, [sp, #20]
 800cf00:	ea41 0909 	orr.w	r9, r1, r9
 800cf04:	9906      	ldr	r1, [sp, #24]
 800cf06:	ea59 0101 	orrs.w	r1, r9, r1
 800cf0a:	d120      	bne.n	800cf4e <_dtoa_r+0xad6>
 800cf0c:	2a00      	cmp	r2, #0
 800cf0e:	ddec      	ble.n	800ceea <_dtoa_r+0xa72>
 800cf10:	4659      	mov	r1, fp
 800cf12:	2201      	movs	r2, #1
 800cf14:	4620      	mov	r0, r4
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	f000 fbc4 	bl	800d6a4 <__lshift>
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	4683      	mov	fp, r0
 800cf20:	f000 fc2c 	bl	800d77c <__mcmp>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	9b01      	ldr	r3, [sp, #4]
 800cf28:	dc02      	bgt.n	800cf30 <_dtoa_r+0xab8>
 800cf2a:	d1de      	bne.n	800ceea <_dtoa_r+0xa72>
 800cf2c:	07da      	lsls	r2, r3, #31
 800cf2e:	d5dc      	bpl.n	800ceea <_dtoa_r+0xa72>
 800cf30:	2b39      	cmp	r3, #57	; 0x39
 800cf32:	d1d8      	bne.n	800cee6 <_dtoa_r+0xa6e>
 800cf34:	9a02      	ldr	r2, [sp, #8]
 800cf36:	2339      	movs	r3, #57	; 0x39
 800cf38:	7013      	strb	r3, [r2, #0]
 800cf3a:	462b      	mov	r3, r5
 800cf3c:	461d      	mov	r5, r3
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf44:	2a39      	cmp	r2, #57	; 0x39
 800cf46:	d050      	beq.n	800cfea <_dtoa_r+0xb72>
 800cf48:	3201      	adds	r2, #1
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	e745      	b.n	800cdda <_dtoa_r+0x962>
 800cf4e:	2a00      	cmp	r2, #0
 800cf50:	dd03      	ble.n	800cf5a <_dtoa_r+0xae2>
 800cf52:	2b39      	cmp	r3, #57	; 0x39
 800cf54:	d0ee      	beq.n	800cf34 <_dtoa_r+0xabc>
 800cf56:	3301      	adds	r3, #1
 800cf58:	e7c7      	b.n	800ceea <_dtoa_r+0xa72>
 800cf5a:	9a01      	ldr	r2, [sp, #4]
 800cf5c:	9907      	ldr	r1, [sp, #28]
 800cf5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cf62:	428a      	cmp	r2, r1
 800cf64:	d02a      	beq.n	800cfbc <_dtoa_r+0xb44>
 800cf66:	4659      	mov	r1, fp
 800cf68:	2300      	movs	r3, #0
 800cf6a:	220a      	movs	r2, #10
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 f9e9 	bl	800d344 <__multadd>
 800cf72:	45b8      	cmp	r8, r7
 800cf74:	4683      	mov	fp, r0
 800cf76:	f04f 0300 	mov.w	r3, #0
 800cf7a:	f04f 020a 	mov.w	r2, #10
 800cf7e:	4641      	mov	r1, r8
 800cf80:	4620      	mov	r0, r4
 800cf82:	d107      	bne.n	800cf94 <_dtoa_r+0xb1c>
 800cf84:	f000 f9de 	bl	800d344 <__multadd>
 800cf88:	4680      	mov	r8, r0
 800cf8a:	4607      	mov	r7, r0
 800cf8c:	9b01      	ldr	r3, [sp, #4]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	e775      	b.n	800ce80 <_dtoa_r+0xa08>
 800cf94:	f000 f9d6 	bl	800d344 <__multadd>
 800cf98:	4639      	mov	r1, r7
 800cf9a:	4680      	mov	r8, r0
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	220a      	movs	r2, #10
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 f9cf 	bl	800d344 <__multadd>
 800cfa6:	4607      	mov	r7, r0
 800cfa8:	e7f0      	b.n	800cf8c <_dtoa_r+0xb14>
 800cfaa:	f1b9 0f00 	cmp.w	r9, #0
 800cfae:	9a00      	ldr	r2, [sp, #0]
 800cfb0:	bfcc      	ite	gt
 800cfb2:	464d      	movgt	r5, r9
 800cfb4:	2501      	movle	r5, #1
 800cfb6:	4415      	add	r5, r2
 800cfb8:	f04f 0800 	mov.w	r8, #0
 800cfbc:	4659      	mov	r1, fp
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	9301      	str	r3, [sp, #4]
 800cfc4:	f000 fb6e 	bl	800d6a4 <__lshift>
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4683      	mov	fp, r0
 800cfcc:	f000 fbd6 	bl	800d77c <__mcmp>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	dcb2      	bgt.n	800cf3a <_dtoa_r+0xac2>
 800cfd4:	d102      	bne.n	800cfdc <_dtoa_r+0xb64>
 800cfd6:	9b01      	ldr	r3, [sp, #4]
 800cfd8:	07db      	lsls	r3, r3, #31
 800cfda:	d4ae      	bmi.n	800cf3a <_dtoa_r+0xac2>
 800cfdc:	462b      	mov	r3, r5
 800cfde:	461d      	mov	r5, r3
 800cfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfe4:	2a30      	cmp	r2, #48	; 0x30
 800cfe6:	d0fa      	beq.n	800cfde <_dtoa_r+0xb66>
 800cfe8:	e6f7      	b.n	800cdda <_dtoa_r+0x962>
 800cfea:	9a00      	ldr	r2, [sp, #0]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d1a5      	bne.n	800cf3c <_dtoa_r+0xac4>
 800cff0:	f10a 0a01 	add.w	sl, sl, #1
 800cff4:	2331      	movs	r3, #49	; 0x31
 800cff6:	e779      	b.n	800ceec <_dtoa_r+0xa74>
 800cff8:	4b13      	ldr	r3, [pc, #76]	; (800d048 <_dtoa_r+0xbd0>)
 800cffa:	f7ff baaf 	b.w	800c55c <_dtoa_r+0xe4>
 800cffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d000:	2b00      	cmp	r3, #0
 800d002:	f47f aa86 	bne.w	800c512 <_dtoa_r+0x9a>
 800d006:	4b11      	ldr	r3, [pc, #68]	; (800d04c <_dtoa_r+0xbd4>)
 800d008:	f7ff baa8 	b.w	800c55c <_dtoa_r+0xe4>
 800d00c:	f1b9 0f00 	cmp.w	r9, #0
 800d010:	dc03      	bgt.n	800d01a <_dtoa_r+0xba2>
 800d012:	9b05      	ldr	r3, [sp, #20]
 800d014:	2b02      	cmp	r3, #2
 800d016:	f73f aec9 	bgt.w	800cdac <_dtoa_r+0x934>
 800d01a:	9d00      	ldr	r5, [sp, #0]
 800d01c:	4631      	mov	r1, r6
 800d01e:	4658      	mov	r0, fp
 800d020:	f7ff f99c 	bl	800c35c <quorem>
 800d024:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d028:	f805 3b01 	strb.w	r3, [r5], #1
 800d02c:	9a00      	ldr	r2, [sp, #0]
 800d02e:	1aaa      	subs	r2, r5, r2
 800d030:	4591      	cmp	r9, r2
 800d032:	ddba      	ble.n	800cfaa <_dtoa_r+0xb32>
 800d034:	4659      	mov	r1, fp
 800d036:	2300      	movs	r3, #0
 800d038:	220a      	movs	r2, #10
 800d03a:	4620      	mov	r0, r4
 800d03c:	f000 f982 	bl	800d344 <__multadd>
 800d040:	4683      	mov	fp, r0
 800d042:	e7eb      	b.n	800d01c <_dtoa_r+0xba4>
 800d044:	0807296e 	.word	0x0807296e
 800d048:	0807282c 	.word	0x0807282c
 800d04c:	08072902 	.word	0x08072902

0800d050 <std>:
 800d050:	2300      	movs	r3, #0
 800d052:	b510      	push	{r4, lr}
 800d054:	4604      	mov	r4, r0
 800d056:	e9c0 3300 	strd	r3, r3, [r0]
 800d05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d05e:	6083      	str	r3, [r0, #8]
 800d060:	8181      	strh	r1, [r0, #12]
 800d062:	6643      	str	r3, [r0, #100]	; 0x64
 800d064:	81c2      	strh	r2, [r0, #14]
 800d066:	6183      	str	r3, [r0, #24]
 800d068:	4619      	mov	r1, r3
 800d06a:	2208      	movs	r2, #8
 800d06c:	305c      	adds	r0, #92	; 0x5c
 800d06e:	f7fe fc41 	bl	800b8f4 <memset>
 800d072:	4b05      	ldr	r3, [pc, #20]	; (800d088 <std+0x38>)
 800d074:	6263      	str	r3, [r4, #36]	; 0x24
 800d076:	4b05      	ldr	r3, [pc, #20]	; (800d08c <std+0x3c>)
 800d078:	62a3      	str	r3, [r4, #40]	; 0x28
 800d07a:	4b05      	ldr	r3, [pc, #20]	; (800d090 <std+0x40>)
 800d07c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d07e:	4b05      	ldr	r3, [pc, #20]	; (800d094 <std+0x44>)
 800d080:	6224      	str	r4, [r4, #32]
 800d082:	6323      	str	r3, [r4, #48]	; 0x30
 800d084:	bd10      	pop	{r4, pc}
 800d086:	bf00      	nop
 800d088:	0800e10d 	.word	0x0800e10d
 800d08c:	0800e12f 	.word	0x0800e12f
 800d090:	0800e167 	.word	0x0800e167
 800d094:	0800e18b 	.word	0x0800e18b

0800d098 <_cleanup_r>:
 800d098:	4901      	ldr	r1, [pc, #4]	; (800d0a0 <_cleanup_r+0x8>)
 800d09a:	f000 b8c1 	b.w	800d220 <_fwalk_reent>
 800d09e:	bf00      	nop
 800d0a0:	0800e475 	.word	0x0800e475

0800d0a4 <__sfmoreglue>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	1e4a      	subs	r2, r1, #1
 800d0a8:	2568      	movs	r5, #104	; 0x68
 800d0aa:	4355      	muls	r5, r2
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0b2:	f000 fcc3 	bl	800da3c <_malloc_r>
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	b140      	cbz	r0, 800d0cc <__sfmoreglue+0x28>
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d0c0:	300c      	adds	r0, #12
 800d0c2:	60a0      	str	r0, [r4, #8]
 800d0c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0c8:	f7fe fc14 	bl	800b8f4 <memset>
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	bd70      	pop	{r4, r5, r6, pc}

0800d0d0 <__sfp_lock_acquire>:
 800d0d0:	4801      	ldr	r0, [pc, #4]	; (800d0d8 <__sfp_lock_acquire+0x8>)
 800d0d2:	f000 b8ca 	b.w	800d26a <__retarget_lock_acquire_recursive>
 800d0d6:	bf00      	nop
 800d0d8:	20000bbc 	.word	0x20000bbc

0800d0dc <__sfp_lock_release>:
 800d0dc:	4801      	ldr	r0, [pc, #4]	; (800d0e4 <__sfp_lock_release+0x8>)
 800d0de:	f000 b8c5 	b.w	800d26c <__retarget_lock_release_recursive>
 800d0e2:	bf00      	nop
 800d0e4:	20000bbc 	.word	0x20000bbc

0800d0e8 <__sinit_lock_acquire>:
 800d0e8:	4801      	ldr	r0, [pc, #4]	; (800d0f0 <__sinit_lock_acquire+0x8>)
 800d0ea:	f000 b8be 	b.w	800d26a <__retarget_lock_acquire_recursive>
 800d0ee:	bf00      	nop
 800d0f0:	20000bb7 	.word	0x20000bb7

0800d0f4 <__sinit_lock_release>:
 800d0f4:	4801      	ldr	r0, [pc, #4]	; (800d0fc <__sinit_lock_release+0x8>)
 800d0f6:	f000 b8b9 	b.w	800d26c <__retarget_lock_release_recursive>
 800d0fa:	bf00      	nop
 800d0fc:	20000bb7 	.word	0x20000bb7

0800d100 <__sinit>:
 800d100:	b510      	push	{r4, lr}
 800d102:	4604      	mov	r4, r0
 800d104:	f7ff fff0 	bl	800d0e8 <__sinit_lock_acquire>
 800d108:	69a3      	ldr	r3, [r4, #24]
 800d10a:	b11b      	cbz	r3, 800d114 <__sinit+0x14>
 800d10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d110:	f7ff bff0 	b.w	800d0f4 <__sinit_lock_release>
 800d114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d118:	6523      	str	r3, [r4, #80]	; 0x50
 800d11a:	4b13      	ldr	r3, [pc, #76]	; (800d168 <__sinit+0x68>)
 800d11c:	4a13      	ldr	r2, [pc, #76]	; (800d16c <__sinit+0x6c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	62a2      	str	r2, [r4, #40]	; 0x28
 800d122:	42a3      	cmp	r3, r4
 800d124:	bf04      	itt	eq
 800d126:	2301      	moveq	r3, #1
 800d128:	61a3      	streq	r3, [r4, #24]
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 f820 	bl	800d170 <__sfp>
 800d130:	6060      	str	r0, [r4, #4]
 800d132:	4620      	mov	r0, r4
 800d134:	f000 f81c 	bl	800d170 <__sfp>
 800d138:	60a0      	str	r0, [r4, #8]
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 f818 	bl	800d170 <__sfp>
 800d140:	2200      	movs	r2, #0
 800d142:	60e0      	str	r0, [r4, #12]
 800d144:	2104      	movs	r1, #4
 800d146:	6860      	ldr	r0, [r4, #4]
 800d148:	f7ff ff82 	bl	800d050 <std>
 800d14c:	68a0      	ldr	r0, [r4, #8]
 800d14e:	2201      	movs	r2, #1
 800d150:	2109      	movs	r1, #9
 800d152:	f7ff ff7d 	bl	800d050 <std>
 800d156:	68e0      	ldr	r0, [r4, #12]
 800d158:	2202      	movs	r2, #2
 800d15a:	2112      	movs	r1, #18
 800d15c:	f7ff ff78 	bl	800d050 <std>
 800d160:	2301      	movs	r3, #1
 800d162:	61a3      	str	r3, [r4, #24]
 800d164:	e7d2      	b.n	800d10c <__sinit+0xc>
 800d166:	bf00      	nop
 800d168:	08072818 	.word	0x08072818
 800d16c:	0800d099 	.word	0x0800d099

0800d170 <__sfp>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	4607      	mov	r7, r0
 800d174:	f7ff ffac 	bl	800d0d0 <__sfp_lock_acquire>
 800d178:	4b1e      	ldr	r3, [pc, #120]	; (800d1f4 <__sfp+0x84>)
 800d17a:	681e      	ldr	r6, [r3, #0]
 800d17c:	69b3      	ldr	r3, [r6, #24]
 800d17e:	b913      	cbnz	r3, 800d186 <__sfp+0x16>
 800d180:	4630      	mov	r0, r6
 800d182:	f7ff ffbd 	bl	800d100 <__sinit>
 800d186:	3648      	adds	r6, #72	; 0x48
 800d188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	d503      	bpl.n	800d198 <__sfp+0x28>
 800d190:	6833      	ldr	r3, [r6, #0]
 800d192:	b30b      	cbz	r3, 800d1d8 <__sfp+0x68>
 800d194:	6836      	ldr	r6, [r6, #0]
 800d196:	e7f7      	b.n	800d188 <__sfp+0x18>
 800d198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d19c:	b9d5      	cbnz	r5, 800d1d4 <__sfp+0x64>
 800d19e:	4b16      	ldr	r3, [pc, #88]	; (800d1f8 <__sfp+0x88>)
 800d1a0:	60e3      	str	r3, [r4, #12]
 800d1a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1a6:	6665      	str	r5, [r4, #100]	; 0x64
 800d1a8:	f000 f85e 	bl	800d268 <__retarget_lock_init_recursive>
 800d1ac:	f7ff ff96 	bl	800d0dc <__sfp_lock_release>
 800d1b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d1b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1b8:	6025      	str	r5, [r4, #0]
 800d1ba:	61a5      	str	r5, [r4, #24]
 800d1bc:	2208      	movs	r2, #8
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1c4:	f7fe fb96 	bl	800b8f4 <memset>
 800d1c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d4:	3468      	adds	r4, #104	; 0x68
 800d1d6:	e7d9      	b.n	800d18c <__sfp+0x1c>
 800d1d8:	2104      	movs	r1, #4
 800d1da:	4638      	mov	r0, r7
 800d1dc:	f7ff ff62 	bl	800d0a4 <__sfmoreglue>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	6030      	str	r0, [r6, #0]
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d1d5      	bne.n	800d194 <__sfp+0x24>
 800d1e8:	f7ff ff78 	bl	800d0dc <__sfp_lock_release>
 800d1ec:	230c      	movs	r3, #12
 800d1ee:	603b      	str	r3, [r7, #0]
 800d1f0:	e7ee      	b.n	800d1d0 <__sfp+0x60>
 800d1f2:	bf00      	nop
 800d1f4:	08072818 	.word	0x08072818
 800d1f8:	ffff0001 	.word	0xffff0001

0800d1fc <fiprintf>:
 800d1fc:	b40e      	push	{r1, r2, r3}
 800d1fe:	b503      	push	{r0, r1, lr}
 800d200:	4601      	mov	r1, r0
 800d202:	ab03      	add	r3, sp, #12
 800d204:	4805      	ldr	r0, [pc, #20]	; (800d21c <fiprintf+0x20>)
 800d206:	f853 2b04 	ldr.w	r2, [r3], #4
 800d20a:	6800      	ldr	r0, [r0, #0]
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	f000 fdf5 	bl	800ddfc <_vfiprintf_r>
 800d212:	b002      	add	sp, #8
 800d214:	f85d eb04 	ldr.w	lr, [sp], #4
 800d218:	b003      	add	sp, #12
 800d21a:	4770      	bx	lr
 800d21c:	20000064 	.word	0x20000064

0800d220 <_fwalk_reent>:
 800d220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d224:	4606      	mov	r6, r0
 800d226:	4688      	mov	r8, r1
 800d228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d22c:	2700      	movs	r7, #0
 800d22e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d232:	f1b9 0901 	subs.w	r9, r9, #1
 800d236:	d505      	bpl.n	800d244 <_fwalk_reent+0x24>
 800d238:	6824      	ldr	r4, [r4, #0]
 800d23a:	2c00      	cmp	r4, #0
 800d23c:	d1f7      	bne.n	800d22e <_fwalk_reent+0xe>
 800d23e:	4638      	mov	r0, r7
 800d240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d244:	89ab      	ldrh	r3, [r5, #12]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d907      	bls.n	800d25a <_fwalk_reent+0x3a>
 800d24a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d24e:	3301      	adds	r3, #1
 800d250:	d003      	beq.n	800d25a <_fwalk_reent+0x3a>
 800d252:	4629      	mov	r1, r5
 800d254:	4630      	mov	r0, r6
 800d256:	47c0      	blx	r8
 800d258:	4307      	orrs	r7, r0
 800d25a:	3568      	adds	r5, #104	; 0x68
 800d25c:	e7e9      	b.n	800d232 <_fwalk_reent+0x12>
	...

0800d260 <_localeconv_r>:
 800d260:	4800      	ldr	r0, [pc, #0]	; (800d264 <_localeconv_r+0x4>)
 800d262:	4770      	bx	lr
 800d264:	200001b8 	.word	0x200001b8

0800d268 <__retarget_lock_init_recursive>:
 800d268:	4770      	bx	lr

0800d26a <__retarget_lock_acquire_recursive>:
 800d26a:	4770      	bx	lr

0800d26c <__retarget_lock_release_recursive>:
 800d26c:	4770      	bx	lr
	...

0800d270 <malloc>:
 800d270:	4b02      	ldr	r3, [pc, #8]	; (800d27c <malloc+0xc>)
 800d272:	4601      	mov	r1, r0
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f000 bbe1 	b.w	800da3c <_malloc_r>
 800d27a:	bf00      	nop
 800d27c:	20000064 	.word	0x20000064

0800d280 <_Balloc>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d284:	4604      	mov	r4, r0
 800d286:	460d      	mov	r5, r1
 800d288:	b976      	cbnz	r6, 800d2a8 <_Balloc+0x28>
 800d28a:	2010      	movs	r0, #16
 800d28c:	f7ff fff0 	bl	800d270 <malloc>
 800d290:	4602      	mov	r2, r0
 800d292:	6260      	str	r0, [r4, #36]	; 0x24
 800d294:	b920      	cbnz	r0, 800d2a0 <_Balloc+0x20>
 800d296:	4b18      	ldr	r3, [pc, #96]	; (800d2f8 <_Balloc+0x78>)
 800d298:	4818      	ldr	r0, [pc, #96]	; (800d2fc <_Balloc+0x7c>)
 800d29a:	2166      	movs	r1, #102	; 0x66
 800d29c:	f7ff f840 	bl	800c320 <__assert_func>
 800d2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2a4:	6006      	str	r6, [r0, #0]
 800d2a6:	60c6      	str	r6, [r0, #12]
 800d2a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2aa:	68f3      	ldr	r3, [r6, #12]
 800d2ac:	b183      	cbz	r3, 800d2d0 <_Balloc+0x50>
 800d2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2b6:	b9b8      	cbnz	r0, 800d2e8 <_Balloc+0x68>
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	fa01 f605 	lsl.w	r6, r1, r5
 800d2be:	1d72      	adds	r2, r6, #5
 800d2c0:	0092      	lsls	r2, r2, #2
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f000 fb5a 	bl	800d97c <_calloc_r>
 800d2c8:	b160      	cbz	r0, 800d2e4 <_Balloc+0x64>
 800d2ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2ce:	e00e      	b.n	800d2ee <_Balloc+0x6e>
 800d2d0:	2221      	movs	r2, #33	; 0x21
 800d2d2:	2104      	movs	r1, #4
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fb51 	bl	800d97c <_calloc_r>
 800d2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2dc:	60f0      	str	r0, [r6, #12]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1e4      	bne.n	800d2ae <_Balloc+0x2e>
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	bd70      	pop	{r4, r5, r6, pc}
 800d2e8:	6802      	ldr	r2, [r0, #0]
 800d2ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2f4:	e7f7      	b.n	800d2e6 <_Balloc+0x66>
 800d2f6:	bf00      	nop
 800d2f8:	08072850 	.word	0x08072850
 800d2fc:	080729e0 	.word	0x080729e0

0800d300 <_Bfree>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d304:	4605      	mov	r5, r0
 800d306:	460c      	mov	r4, r1
 800d308:	b976      	cbnz	r6, 800d328 <_Bfree+0x28>
 800d30a:	2010      	movs	r0, #16
 800d30c:	f7ff ffb0 	bl	800d270 <malloc>
 800d310:	4602      	mov	r2, r0
 800d312:	6268      	str	r0, [r5, #36]	; 0x24
 800d314:	b920      	cbnz	r0, 800d320 <_Bfree+0x20>
 800d316:	4b09      	ldr	r3, [pc, #36]	; (800d33c <_Bfree+0x3c>)
 800d318:	4809      	ldr	r0, [pc, #36]	; (800d340 <_Bfree+0x40>)
 800d31a:	218a      	movs	r1, #138	; 0x8a
 800d31c:	f7ff f800 	bl	800c320 <__assert_func>
 800d320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d324:	6006      	str	r6, [r0, #0]
 800d326:	60c6      	str	r6, [r0, #12]
 800d328:	b13c      	cbz	r4, 800d33a <_Bfree+0x3a>
 800d32a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d32c:	6862      	ldr	r2, [r4, #4]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d334:	6021      	str	r1, [r4, #0]
 800d336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	08072850 	.word	0x08072850
 800d340:	080729e0 	.word	0x080729e0

0800d344 <__multadd>:
 800d344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d348:	690e      	ldr	r6, [r1, #16]
 800d34a:	4607      	mov	r7, r0
 800d34c:	4698      	mov	r8, r3
 800d34e:	460c      	mov	r4, r1
 800d350:	f101 0014 	add.w	r0, r1, #20
 800d354:	2300      	movs	r3, #0
 800d356:	6805      	ldr	r5, [r0, #0]
 800d358:	b2a9      	uxth	r1, r5
 800d35a:	fb02 8101 	mla	r1, r2, r1, r8
 800d35e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d362:	0c2d      	lsrs	r5, r5, #16
 800d364:	fb02 c505 	mla	r5, r2, r5, ip
 800d368:	b289      	uxth	r1, r1
 800d36a:	3301      	adds	r3, #1
 800d36c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d370:	429e      	cmp	r6, r3
 800d372:	f840 1b04 	str.w	r1, [r0], #4
 800d376:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d37a:	dcec      	bgt.n	800d356 <__multadd+0x12>
 800d37c:	f1b8 0f00 	cmp.w	r8, #0
 800d380:	d022      	beq.n	800d3c8 <__multadd+0x84>
 800d382:	68a3      	ldr	r3, [r4, #8]
 800d384:	42b3      	cmp	r3, r6
 800d386:	dc19      	bgt.n	800d3bc <__multadd+0x78>
 800d388:	6861      	ldr	r1, [r4, #4]
 800d38a:	4638      	mov	r0, r7
 800d38c:	3101      	adds	r1, #1
 800d38e:	f7ff ff77 	bl	800d280 <_Balloc>
 800d392:	4605      	mov	r5, r0
 800d394:	b928      	cbnz	r0, 800d3a2 <__multadd+0x5e>
 800d396:	4602      	mov	r2, r0
 800d398:	4b0d      	ldr	r3, [pc, #52]	; (800d3d0 <__multadd+0x8c>)
 800d39a:	480e      	ldr	r0, [pc, #56]	; (800d3d4 <__multadd+0x90>)
 800d39c:	21b5      	movs	r1, #181	; 0xb5
 800d39e:	f7fe ffbf 	bl	800c320 <__assert_func>
 800d3a2:	6922      	ldr	r2, [r4, #16]
 800d3a4:	3202      	adds	r2, #2
 800d3a6:	f104 010c 	add.w	r1, r4, #12
 800d3aa:	0092      	lsls	r2, r2, #2
 800d3ac:	300c      	adds	r0, #12
 800d3ae:	f7fe fa93 	bl	800b8d8 <memcpy>
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f7ff ffa3 	bl	800d300 <_Bfree>
 800d3ba:	462c      	mov	r4, r5
 800d3bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d3c0:	3601      	adds	r6, #1
 800d3c2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d3c6:	6126      	str	r6, [r4, #16]
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ce:	bf00      	nop
 800d3d0:	0807296e 	.word	0x0807296e
 800d3d4:	080729e0 	.word	0x080729e0

0800d3d8 <__hi0bits>:
 800d3d8:	0c03      	lsrs	r3, r0, #16
 800d3da:	041b      	lsls	r3, r3, #16
 800d3dc:	b9d3      	cbnz	r3, 800d414 <__hi0bits+0x3c>
 800d3de:	0400      	lsls	r0, r0, #16
 800d3e0:	2310      	movs	r3, #16
 800d3e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3e6:	bf04      	itt	eq
 800d3e8:	0200      	lsleq	r0, r0, #8
 800d3ea:	3308      	addeq	r3, #8
 800d3ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3f0:	bf04      	itt	eq
 800d3f2:	0100      	lsleq	r0, r0, #4
 800d3f4:	3304      	addeq	r3, #4
 800d3f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3fa:	bf04      	itt	eq
 800d3fc:	0080      	lsleq	r0, r0, #2
 800d3fe:	3302      	addeq	r3, #2
 800d400:	2800      	cmp	r0, #0
 800d402:	db05      	blt.n	800d410 <__hi0bits+0x38>
 800d404:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d408:	f103 0301 	add.w	r3, r3, #1
 800d40c:	bf08      	it	eq
 800d40e:	2320      	moveq	r3, #32
 800d410:	4618      	mov	r0, r3
 800d412:	4770      	bx	lr
 800d414:	2300      	movs	r3, #0
 800d416:	e7e4      	b.n	800d3e2 <__hi0bits+0xa>

0800d418 <__lo0bits>:
 800d418:	6803      	ldr	r3, [r0, #0]
 800d41a:	f013 0207 	ands.w	r2, r3, #7
 800d41e:	4601      	mov	r1, r0
 800d420:	d00b      	beq.n	800d43a <__lo0bits+0x22>
 800d422:	07da      	lsls	r2, r3, #31
 800d424:	d424      	bmi.n	800d470 <__lo0bits+0x58>
 800d426:	0798      	lsls	r0, r3, #30
 800d428:	bf49      	itett	mi
 800d42a:	085b      	lsrmi	r3, r3, #1
 800d42c:	089b      	lsrpl	r3, r3, #2
 800d42e:	2001      	movmi	r0, #1
 800d430:	600b      	strmi	r3, [r1, #0]
 800d432:	bf5c      	itt	pl
 800d434:	600b      	strpl	r3, [r1, #0]
 800d436:	2002      	movpl	r0, #2
 800d438:	4770      	bx	lr
 800d43a:	b298      	uxth	r0, r3
 800d43c:	b9b0      	cbnz	r0, 800d46c <__lo0bits+0x54>
 800d43e:	0c1b      	lsrs	r3, r3, #16
 800d440:	2010      	movs	r0, #16
 800d442:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d446:	bf04      	itt	eq
 800d448:	0a1b      	lsreq	r3, r3, #8
 800d44a:	3008      	addeq	r0, #8
 800d44c:	071a      	lsls	r2, r3, #28
 800d44e:	bf04      	itt	eq
 800d450:	091b      	lsreq	r3, r3, #4
 800d452:	3004      	addeq	r0, #4
 800d454:	079a      	lsls	r2, r3, #30
 800d456:	bf04      	itt	eq
 800d458:	089b      	lsreq	r3, r3, #2
 800d45a:	3002      	addeq	r0, #2
 800d45c:	07da      	lsls	r2, r3, #31
 800d45e:	d403      	bmi.n	800d468 <__lo0bits+0x50>
 800d460:	085b      	lsrs	r3, r3, #1
 800d462:	f100 0001 	add.w	r0, r0, #1
 800d466:	d005      	beq.n	800d474 <__lo0bits+0x5c>
 800d468:	600b      	str	r3, [r1, #0]
 800d46a:	4770      	bx	lr
 800d46c:	4610      	mov	r0, r2
 800d46e:	e7e8      	b.n	800d442 <__lo0bits+0x2a>
 800d470:	2000      	movs	r0, #0
 800d472:	4770      	bx	lr
 800d474:	2020      	movs	r0, #32
 800d476:	4770      	bx	lr

0800d478 <__i2b>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	460c      	mov	r4, r1
 800d47c:	2101      	movs	r1, #1
 800d47e:	f7ff feff 	bl	800d280 <_Balloc>
 800d482:	4602      	mov	r2, r0
 800d484:	b928      	cbnz	r0, 800d492 <__i2b+0x1a>
 800d486:	4b05      	ldr	r3, [pc, #20]	; (800d49c <__i2b+0x24>)
 800d488:	4805      	ldr	r0, [pc, #20]	; (800d4a0 <__i2b+0x28>)
 800d48a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d48e:	f7fe ff47 	bl	800c320 <__assert_func>
 800d492:	2301      	movs	r3, #1
 800d494:	6144      	str	r4, [r0, #20]
 800d496:	6103      	str	r3, [r0, #16]
 800d498:	bd10      	pop	{r4, pc}
 800d49a:	bf00      	nop
 800d49c:	0807296e 	.word	0x0807296e
 800d4a0:	080729e0 	.word	0x080729e0

0800d4a4 <__multiply>:
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	4614      	mov	r4, r2
 800d4aa:	690a      	ldr	r2, [r1, #16]
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	bfb8      	it	lt
 800d4b2:	460b      	movlt	r3, r1
 800d4b4:	460d      	mov	r5, r1
 800d4b6:	bfbc      	itt	lt
 800d4b8:	4625      	movlt	r5, r4
 800d4ba:	461c      	movlt	r4, r3
 800d4bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d4c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d4c4:	68ab      	ldr	r3, [r5, #8]
 800d4c6:	6869      	ldr	r1, [r5, #4]
 800d4c8:	eb0a 0709 	add.w	r7, sl, r9
 800d4cc:	42bb      	cmp	r3, r7
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	bfb8      	it	lt
 800d4d2:	3101      	addlt	r1, #1
 800d4d4:	f7ff fed4 	bl	800d280 <_Balloc>
 800d4d8:	b930      	cbnz	r0, 800d4e8 <__multiply+0x44>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	4b42      	ldr	r3, [pc, #264]	; (800d5e8 <__multiply+0x144>)
 800d4de:	4843      	ldr	r0, [pc, #268]	; (800d5ec <__multiply+0x148>)
 800d4e0:	f240 115d 	movw	r1, #349	; 0x15d
 800d4e4:	f7fe ff1c 	bl	800c320 <__assert_func>
 800d4e8:	f100 0614 	add.w	r6, r0, #20
 800d4ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d4f0:	4633      	mov	r3, r6
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	4543      	cmp	r3, r8
 800d4f6:	d31e      	bcc.n	800d536 <__multiply+0x92>
 800d4f8:	f105 0c14 	add.w	ip, r5, #20
 800d4fc:	f104 0314 	add.w	r3, r4, #20
 800d500:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d504:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d508:	9202      	str	r2, [sp, #8]
 800d50a:	ebac 0205 	sub.w	r2, ip, r5
 800d50e:	3a15      	subs	r2, #21
 800d510:	f022 0203 	bic.w	r2, r2, #3
 800d514:	3204      	adds	r2, #4
 800d516:	f105 0115 	add.w	r1, r5, #21
 800d51a:	458c      	cmp	ip, r1
 800d51c:	bf38      	it	cc
 800d51e:	2204      	movcc	r2, #4
 800d520:	9201      	str	r2, [sp, #4]
 800d522:	9a02      	ldr	r2, [sp, #8]
 800d524:	9303      	str	r3, [sp, #12]
 800d526:	429a      	cmp	r2, r3
 800d528:	d808      	bhi.n	800d53c <__multiply+0x98>
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	dc55      	bgt.n	800d5da <__multiply+0x136>
 800d52e:	6107      	str	r7, [r0, #16]
 800d530:	b005      	add	sp, #20
 800d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d536:	f843 2b04 	str.w	r2, [r3], #4
 800d53a:	e7db      	b.n	800d4f4 <__multiply+0x50>
 800d53c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d540:	f1ba 0f00 	cmp.w	sl, #0
 800d544:	d020      	beq.n	800d588 <__multiply+0xe4>
 800d546:	f105 0e14 	add.w	lr, r5, #20
 800d54a:	46b1      	mov	r9, r6
 800d54c:	2200      	movs	r2, #0
 800d54e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d552:	f8d9 b000 	ldr.w	fp, [r9]
 800d556:	b2a1      	uxth	r1, r4
 800d558:	fa1f fb8b 	uxth.w	fp, fp
 800d55c:	fb0a b101 	mla	r1, sl, r1, fp
 800d560:	4411      	add	r1, r2
 800d562:	f8d9 2000 	ldr.w	r2, [r9]
 800d566:	0c24      	lsrs	r4, r4, #16
 800d568:	0c12      	lsrs	r2, r2, #16
 800d56a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d56e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d572:	b289      	uxth	r1, r1
 800d574:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d578:	45f4      	cmp	ip, lr
 800d57a:	f849 1b04 	str.w	r1, [r9], #4
 800d57e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d582:	d8e4      	bhi.n	800d54e <__multiply+0xaa>
 800d584:	9901      	ldr	r1, [sp, #4]
 800d586:	5072      	str	r2, [r6, r1]
 800d588:	9a03      	ldr	r2, [sp, #12]
 800d58a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d58e:	3304      	adds	r3, #4
 800d590:	f1b9 0f00 	cmp.w	r9, #0
 800d594:	d01f      	beq.n	800d5d6 <__multiply+0x132>
 800d596:	6834      	ldr	r4, [r6, #0]
 800d598:	f105 0114 	add.w	r1, r5, #20
 800d59c:	46b6      	mov	lr, r6
 800d59e:	f04f 0a00 	mov.w	sl, #0
 800d5a2:	880a      	ldrh	r2, [r1, #0]
 800d5a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d5a8:	fb09 b202 	mla	r2, r9, r2, fp
 800d5ac:	4492      	add	sl, r2
 800d5ae:	b2a4      	uxth	r4, r4
 800d5b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d5b4:	f84e 4b04 	str.w	r4, [lr], #4
 800d5b8:	f851 4b04 	ldr.w	r4, [r1], #4
 800d5bc:	f8be 2000 	ldrh.w	r2, [lr]
 800d5c0:	0c24      	lsrs	r4, r4, #16
 800d5c2:	fb09 2404 	mla	r4, r9, r4, r2
 800d5c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d5ca:	458c      	cmp	ip, r1
 800d5cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d5d0:	d8e7      	bhi.n	800d5a2 <__multiply+0xfe>
 800d5d2:	9a01      	ldr	r2, [sp, #4]
 800d5d4:	50b4      	str	r4, [r6, r2]
 800d5d6:	3604      	adds	r6, #4
 800d5d8:	e7a3      	b.n	800d522 <__multiply+0x7e>
 800d5da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1a5      	bne.n	800d52e <__multiply+0x8a>
 800d5e2:	3f01      	subs	r7, #1
 800d5e4:	e7a1      	b.n	800d52a <__multiply+0x86>
 800d5e6:	bf00      	nop
 800d5e8:	0807296e 	.word	0x0807296e
 800d5ec:	080729e0 	.word	0x080729e0

0800d5f0 <__pow5mult>:
 800d5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	4615      	mov	r5, r2
 800d5f6:	f012 0203 	ands.w	r2, r2, #3
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	460f      	mov	r7, r1
 800d5fe:	d007      	beq.n	800d610 <__pow5mult+0x20>
 800d600:	4c25      	ldr	r4, [pc, #148]	; (800d698 <__pow5mult+0xa8>)
 800d602:	3a01      	subs	r2, #1
 800d604:	2300      	movs	r3, #0
 800d606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d60a:	f7ff fe9b 	bl	800d344 <__multadd>
 800d60e:	4607      	mov	r7, r0
 800d610:	10ad      	asrs	r5, r5, #2
 800d612:	d03d      	beq.n	800d690 <__pow5mult+0xa0>
 800d614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d616:	b97c      	cbnz	r4, 800d638 <__pow5mult+0x48>
 800d618:	2010      	movs	r0, #16
 800d61a:	f7ff fe29 	bl	800d270 <malloc>
 800d61e:	4602      	mov	r2, r0
 800d620:	6270      	str	r0, [r6, #36]	; 0x24
 800d622:	b928      	cbnz	r0, 800d630 <__pow5mult+0x40>
 800d624:	4b1d      	ldr	r3, [pc, #116]	; (800d69c <__pow5mult+0xac>)
 800d626:	481e      	ldr	r0, [pc, #120]	; (800d6a0 <__pow5mult+0xb0>)
 800d628:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d62c:	f7fe fe78 	bl	800c320 <__assert_func>
 800d630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d634:	6004      	str	r4, [r0, #0]
 800d636:	60c4      	str	r4, [r0, #12]
 800d638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d640:	b94c      	cbnz	r4, 800d656 <__pow5mult+0x66>
 800d642:	f240 2171 	movw	r1, #625	; 0x271
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ff16 	bl	800d478 <__i2b>
 800d64c:	2300      	movs	r3, #0
 800d64e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d652:	4604      	mov	r4, r0
 800d654:	6003      	str	r3, [r0, #0]
 800d656:	f04f 0900 	mov.w	r9, #0
 800d65a:	07eb      	lsls	r3, r5, #31
 800d65c:	d50a      	bpl.n	800d674 <__pow5mult+0x84>
 800d65e:	4639      	mov	r1, r7
 800d660:	4622      	mov	r2, r4
 800d662:	4630      	mov	r0, r6
 800d664:	f7ff ff1e 	bl	800d4a4 <__multiply>
 800d668:	4639      	mov	r1, r7
 800d66a:	4680      	mov	r8, r0
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7ff fe47 	bl	800d300 <_Bfree>
 800d672:	4647      	mov	r7, r8
 800d674:	106d      	asrs	r5, r5, #1
 800d676:	d00b      	beq.n	800d690 <__pow5mult+0xa0>
 800d678:	6820      	ldr	r0, [r4, #0]
 800d67a:	b938      	cbnz	r0, 800d68c <__pow5mult+0x9c>
 800d67c:	4622      	mov	r2, r4
 800d67e:	4621      	mov	r1, r4
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff ff0f 	bl	800d4a4 <__multiply>
 800d686:	6020      	str	r0, [r4, #0]
 800d688:	f8c0 9000 	str.w	r9, [r0]
 800d68c:	4604      	mov	r4, r0
 800d68e:	e7e4      	b.n	800d65a <__pow5mult+0x6a>
 800d690:	4638      	mov	r0, r7
 800d692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d696:	bf00      	nop
 800d698:	08072b30 	.word	0x08072b30
 800d69c:	08072850 	.word	0x08072850
 800d6a0:	080729e0 	.word	0x080729e0

0800d6a4 <__lshift>:
 800d6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	6849      	ldr	r1, [r1, #4]
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	4607      	mov	r7, r0
 800d6b6:	4691      	mov	r9, r2
 800d6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6bc:	f108 0601 	add.w	r6, r8, #1
 800d6c0:	42b3      	cmp	r3, r6
 800d6c2:	db0b      	blt.n	800d6dc <__lshift+0x38>
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	f7ff fddb 	bl	800d280 <_Balloc>
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	b948      	cbnz	r0, 800d6e2 <__lshift+0x3e>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	4b28      	ldr	r3, [pc, #160]	; (800d774 <__lshift+0xd0>)
 800d6d2:	4829      	ldr	r0, [pc, #164]	; (800d778 <__lshift+0xd4>)
 800d6d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6d8:	f7fe fe22 	bl	800c320 <__assert_func>
 800d6dc:	3101      	adds	r1, #1
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	e7ee      	b.n	800d6c0 <__lshift+0x1c>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	f100 0114 	add.w	r1, r0, #20
 800d6e8:	f100 0210 	add.w	r2, r0, #16
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	4553      	cmp	r3, sl
 800d6f0:	db33      	blt.n	800d75a <__lshift+0xb6>
 800d6f2:	6920      	ldr	r0, [r4, #16]
 800d6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6f8:	f104 0314 	add.w	r3, r4, #20
 800d6fc:	f019 091f 	ands.w	r9, r9, #31
 800d700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d708:	d02b      	beq.n	800d762 <__lshift+0xbe>
 800d70a:	f1c9 0e20 	rsb	lr, r9, #32
 800d70e:	468a      	mov	sl, r1
 800d710:	2200      	movs	r2, #0
 800d712:	6818      	ldr	r0, [r3, #0]
 800d714:	fa00 f009 	lsl.w	r0, r0, r9
 800d718:	4302      	orrs	r2, r0
 800d71a:	f84a 2b04 	str.w	r2, [sl], #4
 800d71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d722:	459c      	cmp	ip, r3
 800d724:	fa22 f20e 	lsr.w	r2, r2, lr
 800d728:	d8f3      	bhi.n	800d712 <__lshift+0x6e>
 800d72a:	ebac 0304 	sub.w	r3, ip, r4
 800d72e:	3b15      	subs	r3, #21
 800d730:	f023 0303 	bic.w	r3, r3, #3
 800d734:	3304      	adds	r3, #4
 800d736:	f104 0015 	add.w	r0, r4, #21
 800d73a:	4584      	cmp	ip, r0
 800d73c:	bf38      	it	cc
 800d73e:	2304      	movcc	r3, #4
 800d740:	50ca      	str	r2, [r1, r3]
 800d742:	b10a      	cbz	r2, 800d748 <__lshift+0xa4>
 800d744:	f108 0602 	add.w	r6, r8, #2
 800d748:	3e01      	subs	r6, #1
 800d74a:	4638      	mov	r0, r7
 800d74c:	612e      	str	r6, [r5, #16]
 800d74e:	4621      	mov	r1, r4
 800d750:	f7ff fdd6 	bl	800d300 <_Bfree>
 800d754:	4628      	mov	r0, r5
 800d756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d75e:	3301      	adds	r3, #1
 800d760:	e7c5      	b.n	800d6ee <__lshift+0x4a>
 800d762:	3904      	subs	r1, #4
 800d764:	f853 2b04 	ldr.w	r2, [r3], #4
 800d768:	f841 2f04 	str.w	r2, [r1, #4]!
 800d76c:	459c      	cmp	ip, r3
 800d76e:	d8f9      	bhi.n	800d764 <__lshift+0xc0>
 800d770:	e7ea      	b.n	800d748 <__lshift+0xa4>
 800d772:	bf00      	nop
 800d774:	0807296e 	.word	0x0807296e
 800d778:	080729e0 	.word	0x080729e0

0800d77c <__mcmp>:
 800d77c:	b530      	push	{r4, r5, lr}
 800d77e:	6902      	ldr	r2, [r0, #16]
 800d780:	690c      	ldr	r4, [r1, #16]
 800d782:	1b12      	subs	r2, r2, r4
 800d784:	d10e      	bne.n	800d7a4 <__mcmp+0x28>
 800d786:	f100 0314 	add.w	r3, r0, #20
 800d78a:	3114      	adds	r1, #20
 800d78c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d790:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d794:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d79c:	42a5      	cmp	r5, r4
 800d79e:	d003      	beq.n	800d7a8 <__mcmp+0x2c>
 800d7a0:	d305      	bcc.n	800d7ae <__mcmp+0x32>
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	bd30      	pop	{r4, r5, pc}
 800d7a8:	4283      	cmp	r3, r0
 800d7aa:	d3f3      	bcc.n	800d794 <__mcmp+0x18>
 800d7ac:	e7fa      	b.n	800d7a4 <__mcmp+0x28>
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	e7f7      	b.n	800d7a4 <__mcmp+0x28>

0800d7b4 <__mdiff>:
 800d7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	4611      	mov	r1, r2
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4617      	mov	r7, r2
 800d7c2:	f7ff ffdb 	bl	800d77c <__mcmp>
 800d7c6:	1e05      	subs	r5, r0, #0
 800d7c8:	d110      	bne.n	800d7ec <__mdiff+0x38>
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f7ff fd57 	bl	800d280 <_Balloc>
 800d7d2:	b930      	cbnz	r0, 800d7e2 <__mdiff+0x2e>
 800d7d4:	4b39      	ldr	r3, [pc, #228]	; (800d8bc <__mdiff+0x108>)
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	f240 2132 	movw	r1, #562	; 0x232
 800d7dc:	4838      	ldr	r0, [pc, #224]	; (800d8c0 <__mdiff+0x10c>)
 800d7de:	f7fe fd9f 	bl	800c320 <__assert_func>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ec:	bfa4      	itt	ge
 800d7ee:	463b      	movge	r3, r7
 800d7f0:	4627      	movge	r7, r4
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	bfa6      	itte	ge
 800d7f8:	461c      	movge	r4, r3
 800d7fa:	2500      	movge	r5, #0
 800d7fc:	2501      	movlt	r5, #1
 800d7fe:	f7ff fd3f 	bl	800d280 <_Balloc>
 800d802:	b920      	cbnz	r0, 800d80e <__mdiff+0x5a>
 800d804:	4b2d      	ldr	r3, [pc, #180]	; (800d8bc <__mdiff+0x108>)
 800d806:	4602      	mov	r2, r0
 800d808:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d80c:	e7e6      	b.n	800d7dc <__mdiff+0x28>
 800d80e:	693e      	ldr	r6, [r7, #16]
 800d810:	60c5      	str	r5, [r0, #12]
 800d812:	6925      	ldr	r5, [r4, #16]
 800d814:	f107 0114 	add.w	r1, r7, #20
 800d818:	f104 0914 	add.w	r9, r4, #20
 800d81c:	f100 0e14 	add.w	lr, r0, #20
 800d820:	f107 0210 	add.w	r2, r7, #16
 800d824:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d828:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d82c:	46f2      	mov	sl, lr
 800d82e:	2700      	movs	r7, #0
 800d830:	f859 3b04 	ldr.w	r3, [r9], #4
 800d834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d838:	fa1f f883 	uxth.w	r8, r3
 800d83c:	fa17 f78b 	uxtah	r7, r7, fp
 800d840:	0c1b      	lsrs	r3, r3, #16
 800d842:	eba7 0808 	sub.w	r8, r7, r8
 800d846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d84a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d84e:	fa1f f888 	uxth.w	r8, r8
 800d852:	141f      	asrs	r7, r3, #16
 800d854:	454d      	cmp	r5, r9
 800d856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d85a:	f84a 3b04 	str.w	r3, [sl], #4
 800d85e:	d8e7      	bhi.n	800d830 <__mdiff+0x7c>
 800d860:	1b2b      	subs	r3, r5, r4
 800d862:	3b15      	subs	r3, #21
 800d864:	f023 0303 	bic.w	r3, r3, #3
 800d868:	3304      	adds	r3, #4
 800d86a:	3415      	adds	r4, #21
 800d86c:	42a5      	cmp	r5, r4
 800d86e:	bf38      	it	cc
 800d870:	2304      	movcc	r3, #4
 800d872:	4419      	add	r1, r3
 800d874:	4473      	add	r3, lr
 800d876:	469e      	mov	lr, r3
 800d878:	460d      	mov	r5, r1
 800d87a:	4565      	cmp	r5, ip
 800d87c:	d30e      	bcc.n	800d89c <__mdiff+0xe8>
 800d87e:	f10c 0203 	add.w	r2, ip, #3
 800d882:	1a52      	subs	r2, r2, r1
 800d884:	f022 0203 	bic.w	r2, r2, #3
 800d888:	3903      	subs	r1, #3
 800d88a:	458c      	cmp	ip, r1
 800d88c:	bf38      	it	cc
 800d88e:	2200      	movcc	r2, #0
 800d890:	441a      	add	r2, r3
 800d892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d896:	b17b      	cbz	r3, 800d8b8 <__mdiff+0x104>
 800d898:	6106      	str	r6, [r0, #16]
 800d89a:	e7a5      	b.n	800d7e8 <__mdiff+0x34>
 800d89c:	f855 8b04 	ldr.w	r8, [r5], #4
 800d8a0:	fa17 f488 	uxtah	r4, r7, r8
 800d8a4:	1422      	asrs	r2, r4, #16
 800d8a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d8aa:	b2a4      	uxth	r4, r4
 800d8ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d8b0:	f84e 4b04 	str.w	r4, [lr], #4
 800d8b4:	1417      	asrs	r7, r2, #16
 800d8b6:	e7e0      	b.n	800d87a <__mdiff+0xc6>
 800d8b8:	3e01      	subs	r6, #1
 800d8ba:	e7ea      	b.n	800d892 <__mdiff+0xde>
 800d8bc:	0807296e 	.word	0x0807296e
 800d8c0:	080729e0 	.word	0x080729e0

0800d8c4 <__d2b>:
 800d8c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8c8:	4689      	mov	r9, r1
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	ec57 6b10 	vmov	r6, r7, d0
 800d8d0:	4690      	mov	r8, r2
 800d8d2:	f7ff fcd5 	bl	800d280 <_Balloc>
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	b930      	cbnz	r0, 800d8e8 <__d2b+0x24>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	4b25      	ldr	r3, [pc, #148]	; (800d974 <__d2b+0xb0>)
 800d8de:	4826      	ldr	r0, [pc, #152]	; (800d978 <__d2b+0xb4>)
 800d8e0:	f240 310a 	movw	r1, #778	; 0x30a
 800d8e4:	f7fe fd1c 	bl	800c320 <__assert_func>
 800d8e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d8ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8f0:	bb35      	cbnz	r5, 800d940 <__d2b+0x7c>
 800d8f2:	2e00      	cmp	r6, #0
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	d028      	beq.n	800d94a <__d2b+0x86>
 800d8f8:	4668      	mov	r0, sp
 800d8fa:	9600      	str	r6, [sp, #0]
 800d8fc:	f7ff fd8c 	bl	800d418 <__lo0bits>
 800d900:	9900      	ldr	r1, [sp, #0]
 800d902:	b300      	cbz	r0, 800d946 <__d2b+0x82>
 800d904:	9a01      	ldr	r2, [sp, #4]
 800d906:	f1c0 0320 	rsb	r3, r0, #32
 800d90a:	fa02 f303 	lsl.w	r3, r2, r3
 800d90e:	430b      	orrs	r3, r1
 800d910:	40c2      	lsrs	r2, r0
 800d912:	6163      	str	r3, [r4, #20]
 800d914:	9201      	str	r2, [sp, #4]
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	61a3      	str	r3, [r4, #24]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bf14      	ite	ne
 800d91e:	2202      	movne	r2, #2
 800d920:	2201      	moveq	r2, #1
 800d922:	6122      	str	r2, [r4, #16]
 800d924:	b1d5      	cbz	r5, 800d95c <__d2b+0x98>
 800d926:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d92a:	4405      	add	r5, r0
 800d92c:	f8c9 5000 	str.w	r5, [r9]
 800d930:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d934:	f8c8 0000 	str.w	r0, [r8]
 800d938:	4620      	mov	r0, r4
 800d93a:	b003      	add	sp, #12
 800d93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d944:	e7d5      	b.n	800d8f2 <__d2b+0x2e>
 800d946:	6161      	str	r1, [r4, #20]
 800d948:	e7e5      	b.n	800d916 <__d2b+0x52>
 800d94a:	a801      	add	r0, sp, #4
 800d94c:	f7ff fd64 	bl	800d418 <__lo0bits>
 800d950:	9b01      	ldr	r3, [sp, #4]
 800d952:	6163      	str	r3, [r4, #20]
 800d954:	2201      	movs	r2, #1
 800d956:	6122      	str	r2, [r4, #16]
 800d958:	3020      	adds	r0, #32
 800d95a:	e7e3      	b.n	800d924 <__d2b+0x60>
 800d95c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d964:	f8c9 0000 	str.w	r0, [r9]
 800d968:	6918      	ldr	r0, [r3, #16]
 800d96a:	f7ff fd35 	bl	800d3d8 <__hi0bits>
 800d96e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d972:	e7df      	b.n	800d934 <__d2b+0x70>
 800d974:	0807296e 	.word	0x0807296e
 800d978:	080729e0 	.word	0x080729e0

0800d97c <_calloc_r>:
 800d97c:	b513      	push	{r0, r1, r4, lr}
 800d97e:	434a      	muls	r2, r1
 800d980:	4611      	mov	r1, r2
 800d982:	9201      	str	r2, [sp, #4]
 800d984:	f000 f85a 	bl	800da3c <_malloc_r>
 800d988:	4604      	mov	r4, r0
 800d98a:	b118      	cbz	r0, 800d994 <_calloc_r+0x18>
 800d98c:	9a01      	ldr	r2, [sp, #4]
 800d98e:	2100      	movs	r1, #0
 800d990:	f7fd ffb0 	bl	800b8f4 <memset>
 800d994:	4620      	mov	r0, r4
 800d996:	b002      	add	sp, #8
 800d998:	bd10      	pop	{r4, pc}
	...

0800d99c <_free_r>:
 800d99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d99e:	2900      	cmp	r1, #0
 800d9a0:	d048      	beq.n	800da34 <_free_r+0x98>
 800d9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9a6:	9001      	str	r0, [sp, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800d9ae:	bfb8      	it	lt
 800d9b0:	18e4      	addlt	r4, r4, r3
 800d9b2:	f000 fe3d 	bl	800e630 <__malloc_lock>
 800d9b6:	4a20      	ldr	r2, [pc, #128]	; (800da38 <_free_r+0x9c>)
 800d9b8:	9801      	ldr	r0, [sp, #4]
 800d9ba:	6813      	ldr	r3, [r2, #0]
 800d9bc:	4615      	mov	r5, r2
 800d9be:	b933      	cbnz	r3, 800d9ce <_free_r+0x32>
 800d9c0:	6063      	str	r3, [r4, #4]
 800d9c2:	6014      	str	r4, [r2, #0]
 800d9c4:	b003      	add	sp, #12
 800d9c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ca:	f000 be37 	b.w	800e63c <__malloc_unlock>
 800d9ce:	42a3      	cmp	r3, r4
 800d9d0:	d90b      	bls.n	800d9ea <_free_r+0x4e>
 800d9d2:	6821      	ldr	r1, [r4, #0]
 800d9d4:	1862      	adds	r2, r4, r1
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	bf04      	itt	eq
 800d9da:	681a      	ldreq	r2, [r3, #0]
 800d9dc:	685b      	ldreq	r3, [r3, #4]
 800d9de:	6063      	str	r3, [r4, #4]
 800d9e0:	bf04      	itt	eq
 800d9e2:	1852      	addeq	r2, r2, r1
 800d9e4:	6022      	streq	r2, [r4, #0]
 800d9e6:	602c      	str	r4, [r5, #0]
 800d9e8:	e7ec      	b.n	800d9c4 <_free_r+0x28>
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	b10b      	cbz	r3, 800d9f4 <_free_r+0x58>
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	d9fa      	bls.n	800d9ea <_free_r+0x4e>
 800d9f4:	6811      	ldr	r1, [r2, #0]
 800d9f6:	1855      	adds	r5, r2, r1
 800d9f8:	42a5      	cmp	r5, r4
 800d9fa:	d10b      	bne.n	800da14 <_free_r+0x78>
 800d9fc:	6824      	ldr	r4, [r4, #0]
 800d9fe:	4421      	add	r1, r4
 800da00:	1854      	adds	r4, r2, r1
 800da02:	42a3      	cmp	r3, r4
 800da04:	6011      	str	r1, [r2, #0]
 800da06:	d1dd      	bne.n	800d9c4 <_free_r+0x28>
 800da08:	681c      	ldr	r4, [r3, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	6053      	str	r3, [r2, #4]
 800da0e:	4421      	add	r1, r4
 800da10:	6011      	str	r1, [r2, #0]
 800da12:	e7d7      	b.n	800d9c4 <_free_r+0x28>
 800da14:	d902      	bls.n	800da1c <_free_r+0x80>
 800da16:	230c      	movs	r3, #12
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	e7d3      	b.n	800d9c4 <_free_r+0x28>
 800da1c:	6825      	ldr	r5, [r4, #0]
 800da1e:	1961      	adds	r1, r4, r5
 800da20:	428b      	cmp	r3, r1
 800da22:	bf04      	itt	eq
 800da24:	6819      	ldreq	r1, [r3, #0]
 800da26:	685b      	ldreq	r3, [r3, #4]
 800da28:	6063      	str	r3, [r4, #4]
 800da2a:	bf04      	itt	eq
 800da2c:	1949      	addeq	r1, r1, r5
 800da2e:	6021      	streq	r1, [r4, #0]
 800da30:	6054      	str	r4, [r2, #4]
 800da32:	e7c7      	b.n	800d9c4 <_free_r+0x28>
 800da34:	b003      	add	sp, #12
 800da36:	bd30      	pop	{r4, r5, pc}
 800da38:	20000948 	.word	0x20000948

0800da3c <_malloc_r>:
 800da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3e:	1ccd      	adds	r5, r1, #3
 800da40:	f025 0503 	bic.w	r5, r5, #3
 800da44:	3508      	adds	r5, #8
 800da46:	2d0c      	cmp	r5, #12
 800da48:	bf38      	it	cc
 800da4a:	250c      	movcc	r5, #12
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	4606      	mov	r6, r0
 800da50:	db01      	blt.n	800da56 <_malloc_r+0x1a>
 800da52:	42a9      	cmp	r1, r5
 800da54:	d903      	bls.n	800da5e <_malloc_r+0x22>
 800da56:	230c      	movs	r3, #12
 800da58:	6033      	str	r3, [r6, #0]
 800da5a:	2000      	movs	r0, #0
 800da5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da5e:	f000 fde7 	bl	800e630 <__malloc_lock>
 800da62:	4921      	ldr	r1, [pc, #132]	; (800dae8 <_malloc_r+0xac>)
 800da64:	680a      	ldr	r2, [r1, #0]
 800da66:	4614      	mov	r4, r2
 800da68:	b99c      	cbnz	r4, 800da92 <_malloc_r+0x56>
 800da6a:	4f20      	ldr	r7, [pc, #128]	; (800daec <_malloc_r+0xb0>)
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	b923      	cbnz	r3, 800da7a <_malloc_r+0x3e>
 800da70:	4621      	mov	r1, r4
 800da72:	4630      	mov	r0, r6
 800da74:	f000 fb3a 	bl	800e0ec <_sbrk_r>
 800da78:	6038      	str	r0, [r7, #0]
 800da7a:	4629      	mov	r1, r5
 800da7c:	4630      	mov	r0, r6
 800da7e:	f000 fb35 	bl	800e0ec <_sbrk_r>
 800da82:	1c43      	adds	r3, r0, #1
 800da84:	d123      	bne.n	800dace <_malloc_r+0x92>
 800da86:	230c      	movs	r3, #12
 800da88:	6033      	str	r3, [r6, #0]
 800da8a:	4630      	mov	r0, r6
 800da8c:	f000 fdd6 	bl	800e63c <__malloc_unlock>
 800da90:	e7e3      	b.n	800da5a <_malloc_r+0x1e>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	1b5b      	subs	r3, r3, r5
 800da96:	d417      	bmi.n	800dac8 <_malloc_r+0x8c>
 800da98:	2b0b      	cmp	r3, #11
 800da9a:	d903      	bls.n	800daa4 <_malloc_r+0x68>
 800da9c:	6023      	str	r3, [r4, #0]
 800da9e:	441c      	add	r4, r3
 800daa0:	6025      	str	r5, [r4, #0]
 800daa2:	e004      	b.n	800daae <_malloc_r+0x72>
 800daa4:	6863      	ldr	r3, [r4, #4]
 800daa6:	42a2      	cmp	r2, r4
 800daa8:	bf0c      	ite	eq
 800daaa:	600b      	streq	r3, [r1, #0]
 800daac:	6053      	strne	r3, [r2, #4]
 800daae:	4630      	mov	r0, r6
 800dab0:	f000 fdc4 	bl	800e63c <__malloc_unlock>
 800dab4:	f104 000b 	add.w	r0, r4, #11
 800dab8:	1d23      	adds	r3, r4, #4
 800daba:	f020 0007 	bic.w	r0, r0, #7
 800dabe:	1ac2      	subs	r2, r0, r3
 800dac0:	d0cc      	beq.n	800da5c <_malloc_r+0x20>
 800dac2:	1a1b      	subs	r3, r3, r0
 800dac4:	50a3      	str	r3, [r4, r2]
 800dac6:	e7c9      	b.n	800da5c <_malloc_r+0x20>
 800dac8:	4622      	mov	r2, r4
 800daca:	6864      	ldr	r4, [r4, #4]
 800dacc:	e7cc      	b.n	800da68 <_malloc_r+0x2c>
 800dace:	1cc4      	adds	r4, r0, #3
 800dad0:	f024 0403 	bic.w	r4, r4, #3
 800dad4:	42a0      	cmp	r0, r4
 800dad6:	d0e3      	beq.n	800daa0 <_malloc_r+0x64>
 800dad8:	1a21      	subs	r1, r4, r0
 800dada:	4630      	mov	r0, r6
 800dadc:	f000 fb06 	bl	800e0ec <_sbrk_r>
 800dae0:	3001      	adds	r0, #1
 800dae2:	d1dd      	bne.n	800daa0 <_malloc_r+0x64>
 800dae4:	e7cf      	b.n	800da86 <_malloc_r+0x4a>
 800dae6:	bf00      	nop
 800dae8:	20000948 	.word	0x20000948
 800daec:	2000094c 	.word	0x2000094c

0800daf0 <__ssputs_r>:
 800daf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf4:	688e      	ldr	r6, [r1, #8]
 800daf6:	429e      	cmp	r6, r3
 800daf8:	4682      	mov	sl, r0
 800dafa:	460c      	mov	r4, r1
 800dafc:	4690      	mov	r8, r2
 800dafe:	461f      	mov	r7, r3
 800db00:	d838      	bhi.n	800db74 <__ssputs_r+0x84>
 800db02:	898a      	ldrh	r2, [r1, #12]
 800db04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db08:	d032      	beq.n	800db70 <__ssputs_r+0x80>
 800db0a:	6825      	ldr	r5, [r4, #0]
 800db0c:	6909      	ldr	r1, [r1, #16]
 800db0e:	eba5 0901 	sub.w	r9, r5, r1
 800db12:	6965      	ldr	r5, [r4, #20]
 800db14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db1c:	3301      	adds	r3, #1
 800db1e:	444b      	add	r3, r9
 800db20:	106d      	asrs	r5, r5, #1
 800db22:	429d      	cmp	r5, r3
 800db24:	bf38      	it	cc
 800db26:	461d      	movcc	r5, r3
 800db28:	0553      	lsls	r3, r2, #21
 800db2a:	d531      	bpl.n	800db90 <__ssputs_r+0xa0>
 800db2c:	4629      	mov	r1, r5
 800db2e:	f7ff ff85 	bl	800da3c <_malloc_r>
 800db32:	4606      	mov	r6, r0
 800db34:	b950      	cbnz	r0, 800db4c <__ssputs_r+0x5c>
 800db36:	230c      	movs	r3, #12
 800db38:	f8ca 3000 	str.w	r3, [sl]
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	f04f 30ff 	mov.w	r0, #4294967295
 800db48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4c:	6921      	ldr	r1, [r4, #16]
 800db4e:	464a      	mov	r2, r9
 800db50:	f7fd fec2 	bl	800b8d8 <memcpy>
 800db54:	89a3      	ldrh	r3, [r4, #12]
 800db56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db5e:	81a3      	strh	r3, [r4, #12]
 800db60:	6126      	str	r6, [r4, #16]
 800db62:	6165      	str	r5, [r4, #20]
 800db64:	444e      	add	r6, r9
 800db66:	eba5 0509 	sub.w	r5, r5, r9
 800db6a:	6026      	str	r6, [r4, #0]
 800db6c:	60a5      	str	r5, [r4, #8]
 800db6e:	463e      	mov	r6, r7
 800db70:	42be      	cmp	r6, r7
 800db72:	d900      	bls.n	800db76 <__ssputs_r+0x86>
 800db74:	463e      	mov	r6, r7
 800db76:	4632      	mov	r2, r6
 800db78:	6820      	ldr	r0, [r4, #0]
 800db7a:	4641      	mov	r1, r8
 800db7c:	f000 fd3e 	bl	800e5fc <memmove>
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	6822      	ldr	r2, [r4, #0]
 800db84:	1b9b      	subs	r3, r3, r6
 800db86:	4432      	add	r2, r6
 800db88:	60a3      	str	r3, [r4, #8]
 800db8a:	6022      	str	r2, [r4, #0]
 800db8c:	2000      	movs	r0, #0
 800db8e:	e7db      	b.n	800db48 <__ssputs_r+0x58>
 800db90:	462a      	mov	r2, r5
 800db92:	f000 fd59 	bl	800e648 <_realloc_r>
 800db96:	4606      	mov	r6, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	d1e1      	bne.n	800db60 <__ssputs_r+0x70>
 800db9c:	6921      	ldr	r1, [r4, #16]
 800db9e:	4650      	mov	r0, sl
 800dba0:	f7ff fefc 	bl	800d99c <_free_r>
 800dba4:	e7c7      	b.n	800db36 <__ssputs_r+0x46>
	...

0800dba8 <_svfiprintf_r>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	4698      	mov	r8, r3
 800dbae:	898b      	ldrh	r3, [r1, #12]
 800dbb0:	061b      	lsls	r3, r3, #24
 800dbb2:	b09d      	sub	sp, #116	; 0x74
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	460d      	mov	r5, r1
 800dbb8:	4614      	mov	r4, r2
 800dbba:	d50e      	bpl.n	800dbda <_svfiprintf_r+0x32>
 800dbbc:	690b      	ldr	r3, [r1, #16]
 800dbbe:	b963      	cbnz	r3, 800dbda <_svfiprintf_r+0x32>
 800dbc0:	2140      	movs	r1, #64	; 0x40
 800dbc2:	f7ff ff3b 	bl	800da3c <_malloc_r>
 800dbc6:	6028      	str	r0, [r5, #0]
 800dbc8:	6128      	str	r0, [r5, #16]
 800dbca:	b920      	cbnz	r0, 800dbd6 <_svfiprintf_r+0x2e>
 800dbcc:	230c      	movs	r3, #12
 800dbce:	603b      	str	r3, [r7, #0]
 800dbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd4:	e0d1      	b.n	800dd7a <_svfiprintf_r+0x1d2>
 800dbd6:	2340      	movs	r3, #64	; 0x40
 800dbd8:	616b      	str	r3, [r5, #20]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbde:	2320      	movs	r3, #32
 800dbe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbe8:	2330      	movs	r3, #48	; 0x30
 800dbea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd94 <_svfiprintf_r+0x1ec>
 800dbee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbf2:	f04f 0901 	mov.w	r9, #1
 800dbf6:	4623      	mov	r3, r4
 800dbf8:	469a      	mov	sl, r3
 800dbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbfe:	b10a      	cbz	r2, 800dc04 <_svfiprintf_r+0x5c>
 800dc00:	2a25      	cmp	r2, #37	; 0x25
 800dc02:	d1f9      	bne.n	800dbf8 <_svfiprintf_r+0x50>
 800dc04:	ebba 0b04 	subs.w	fp, sl, r4
 800dc08:	d00b      	beq.n	800dc22 <_svfiprintf_r+0x7a>
 800dc0a:	465b      	mov	r3, fp
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	4629      	mov	r1, r5
 800dc10:	4638      	mov	r0, r7
 800dc12:	f7ff ff6d 	bl	800daf0 <__ssputs_r>
 800dc16:	3001      	adds	r0, #1
 800dc18:	f000 80aa 	beq.w	800dd70 <_svfiprintf_r+0x1c8>
 800dc1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc1e:	445a      	add	r2, fp
 800dc20:	9209      	str	r2, [sp, #36]	; 0x24
 800dc22:	f89a 3000 	ldrb.w	r3, [sl]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f000 80a2 	beq.w	800dd70 <_svfiprintf_r+0x1c8>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc36:	f10a 0a01 	add.w	sl, sl, #1
 800dc3a:	9304      	str	r3, [sp, #16]
 800dc3c:	9307      	str	r3, [sp, #28]
 800dc3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc42:	931a      	str	r3, [sp, #104]	; 0x68
 800dc44:	4654      	mov	r4, sl
 800dc46:	2205      	movs	r2, #5
 800dc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc4c:	4851      	ldr	r0, [pc, #324]	; (800dd94 <_svfiprintf_r+0x1ec>)
 800dc4e:	f7f2 facf 	bl	80001f0 <memchr>
 800dc52:	9a04      	ldr	r2, [sp, #16]
 800dc54:	b9d8      	cbnz	r0, 800dc8e <_svfiprintf_r+0xe6>
 800dc56:	06d0      	lsls	r0, r2, #27
 800dc58:	bf44      	itt	mi
 800dc5a:	2320      	movmi	r3, #32
 800dc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc60:	0711      	lsls	r1, r2, #28
 800dc62:	bf44      	itt	mi
 800dc64:	232b      	movmi	r3, #43	; 0x2b
 800dc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc6e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc70:	d015      	beq.n	800dc9e <_svfiprintf_r+0xf6>
 800dc72:	9a07      	ldr	r2, [sp, #28]
 800dc74:	4654      	mov	r4, sl
 800dc76:	2000      	movs	r0, #0
 800dc78:	f04f 0c0a 	mov.w	ip, #10
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc82:	3b30      	subs	r3, #48	; 0x30
 800dc84:	2b09      	cmp	r3, #9
 800dc86:	d94e      	bls.n	800dd26 <_svfiprintf_r+0x17e>
 800dc88:	b1b0      	cbz	r0, 800dcb8 <_svfiprintf_r+0x110>
 800dc8a:	9207      	str	r2, [sp, #28]
 800dc8c:	e014      	b.n	800dcb8 <_svfiprintf_r+0x110>
 800dc8e:	eba0 0308 	sub.w	r3, r0, r8
 800dc92:	fa09 f303 	lsl.w	r3, r9, r3
 800dc96:	4313      	orrs	r3, r2
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	46a2      	mov	sl, r4
 800dc9c:	e7d2      	b.n	800dc44 <_svfiprintf_r+0x9c>
 800dc9e:	9b03      	ldr	r3, [sp, #12]
 800dca0:	1d19      	adds	r1, r3, #4
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	9103      	str	r1, [sp, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	bfbb      	ittet	lt
 800dcaa:	425b      	neglt	r3, r3
 800dcac:	f042 0202 	orrlt.w	r2, r2, #2
 800dcb0:	9307      	strge	r3, [sp, #28]
 800dcb2:	9307      	strlt	r3, [sp, #28]
 800dcb4:	bfb8      	it	lt
 800dcb6:	9204      	strlt	r2, [sp, #16]
 800dcb8:	7823      	ldrb	r3, [r4, #0]
 800dcba:	2b2e      	cmp	r3, #46	; 0x2e
 800dcbc:	d10c      	bne.n	800dcd8 <_svfiprintf_r+0x130>
 800dcbe:	7863      	ldrb	r3, [r4, #1]
 800dcc0:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc2:	d135      	bne.n	800dd30 <_svfiprintf_r+0x188>
 800dcc4:	9b03      	ldr	r3, [sp, #12]
 800dcc6:	1d1a      	adds	r2, r3, #4
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	9203      	str	r2, [sp, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	bfb8      	it	lt
 800dcd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcd4:	3402      	adds	r4, #2
 800dcd6:	9305      	str	r3, [sp, #20]
 800dcd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dda4 <_svfiprintf_r+0x1fc>
 800dcdc:	7821      	ldrb	r1, [r4, #0]
 800dcde:	2203      	movs	r2, #3
 800dce0:	4650      	mov	r0, sl
 800dce2:	f7f2 fa85 	bl	80001f0 <memchr>
 800dce6:	b140      	cbz	r0, 800dcfa <_svfiprintf_r+0x152>
 800dce8:	2340      	movs	r3, #64	; 0x40
 800dcea:	eba0 000a 	sub.w	r0, r0, sl
 800dcee:	fa03 f000 	lsl.w	r0, r3, r0
 800dcf2:	9b04      	ldr	r3, [sp, #16]
 800dcf4:	4303      	orrs	r3, r0
 800dcf6:	3401      	adds	r4, #1
 800dcf8:	9304      	str	r3, [sp, #16]
 800dcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcfe:	4826      	ldr	r0, [pc, #152]	; (800dd98 <_svfiprintf_r+0x1f0>)
 800dd00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd04:	2206      	movs	r2, #6
 800dd06:	f7f2 fa73 	bl	80001f0 <memchr>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d038      	beq.n	800dd80 <_svfiprintf_r+0x1d8>
 800dd0e:	4b23      	ldr	r3, [pc, #140]	; (800dd9c <_svfiprintf_r+0x1f4>)
 800dd10:	bb1b      	cbnz	r3, 800dd5a <_svfiprintf_r+0x1b2>
 800dd12:	9b03      	ldr	r3, [sp, #12]
 800dd14:	3307      	adds	r3, #7
 800dd16:	f023 0307 	bic.w	r3, r3, #7
 800dd1a:	3308      	adds	r3, #8
 800dd1c:	9303      	str	r3, [sp, #12]
 800dd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd20:	4433      	add	r3, r6
 800dd22:	9309      	str	r3, [sp, #36]	; 0x24
 800dd24:	e767      	b.n	800dbf6 <_svfiprintf_r+0x4e>
 800dd26:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	2001      	movs	r0, #1
 800dd2e:	e7a5      	b.n	800dc7c <_svfiprintf_r+0xd4>
 800dd30:	2300      	movs	r3, #0
 800dd32:	3401      	adds	r4, #1
 800dd34:	9305      	str	r3, [sp, #20]
 800dd36:	4619      	mov	r1, r3
 800dd38:	f04f 0c0a 	mov.w	ip, #10
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd42:	3a30      	subs	r2, #48	; 0x30
 800dd44:	2a09      	cmp	r2, #9
 800dd46:	d903      	bls.n	800dd50 <_svfiprintf_r+0x1a8>
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d0c5      	beq.n	800dcd8 <_svfiprintf_r+0x130>
 800dd4c:	9105      	str	r1, [sp, #20]
 800dd4e:	e7c3      	b.n	800dcd8 <_svfiprintf_r+0x130>
 800dd50:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd54:	4604      	mov	r4, r0
 800dd56:	2301      	movs	r3, #1
 800dd58:	e7f0      	b.n	800dd3c <_svfiprintf_r+0x194>
 800dd5a:	ab03      	add	r3, sp, #12
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	462a      	mov	r2, r5
 800dd60:	4b0f      	ldr	r3, [pc, #60]	; (800dda0 <_svfiprintf_r+0x1f8>)
 800dd62:	a904      	add	r1, sp, #16
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7fd fe6d 	bl	800ba44 <_printf_float>
 800dd6a:	1c42      	adds	r2, r0, #1
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	d1d6      	bne.n	800dd1e <_svfiprintf_r+0x176>
 800dd70:	89ab      	ldrh	r3, [r5, #12]
 800dd72:	065b      	lsls	r3, r3, #25
 800dd74:	f53f af2c 	bmi.w	800dbd0 <_svfiprintf_r+0x28>
 800dd78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd7a:	b01d      	add	sp, #116	; 0x74
 800dd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd80:	ab03      	add	r3, sp, #12
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	462a      	mov	r2, r5
 800dd86:	4b06      	ldr	r3, [pc, #24]	; (800dda0 <_svfiprintf_r+0x1f8>)
 800dd88:	a904      	add	r1, sp, #16
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	f7fe f8fe 	bl	800bf8c <_printf_i>
 800dd90:	e7eb      	b.n	800dd6a <_svfiprintf_r+0x1c2>
 800dd92:	bf00      	nop
 800dd94:	08072b3c 	.word	0x08072b3c
 800dd98:	08072b46 	.word	0x08072b46
 800dd9c:	0800ba45 	.word	0x0800ba45
 800dda0:	0800daf1 	.word	0x0800daf1
 800dda4:	08072b42 	.word	0x08072b42

0800dda8 <__sfputc_r>:
 800dda8:	6893      	ldr	r3, [r2, #8]
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	b410      	push	{r4}
 800ddb0:	6093      	str	r3, [r2, #8]
 800ddb2:	da08      	bge.n	800ddc6 <__sfputc_r+0x1e>
 800ddb4:	6994      	ldr	r4, [r2, #24]
 800ddb6:	42a3      	cmp	r3, r4
 800ddb8:	db01      	blt.n	800ddbe <__sfputc_r+0x16>
 800ddba:	290a      	cmp	r1, #10
 800ddbc:	d103      	bne.n	800ddc6 <__sfputc_r+0x1e>
 800ddbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddc2:	f000 b9e7 	b.w	800e194 <__swbuf_r>
 800ddc6:	6813      	ldr	r3, [r2, #0]
 800ddc8:	1c58      	adds	r0, r3, #1
 800ddca:	6010      	str	r0, [r2, #0]
 800ddcc:	7019      	strb	r1, [r3, #0]
 800ddce:	4608      	mov	r0, r1
 800ddd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddd4:	4770      	bx	lr

0800ddd6 <__sfputs_r>:
 800ddd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd8:	4606      	mov	r6, r0
 800ddda:	460f      	mov	r7, r1
 800dddc:	4614      	mov	r4, r2
 800ddde:	18d5      	adds	r5, r2, r3
 800dde0:	42ac      	cmp	r4, r5
 800dde2:	d101      	bne.n	800dde8 <__sfputs_r+0x12>
 800dde4:	2000      	movs	r0, #0
 800dde6:	e007      	b.n	800ddf8 <__sfputs_r+0x22>
 800dde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddec:	463a      	mov	r2, r7
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f7ff ffda 	bl	800dda8 <__sfputc_r>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d1f3      	bne.n	800dde0 <__sfputs_r+0xa>
 800ddf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddfc <_vfiprintf_r>:
 800ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	460d      	mov	r5, r1
 800de02:	b09d      	sub	sp, #116	; 0x74
 800de04:	4614      	mov	r4, r2
 800de06:	4698      	mov	r8, r3
 800de08:	4606      	mov	r6, r0
 800de0a:	b118      	cbz	r0, 800de14 <_vfiprintf_r+0x18>
 800de0c:	6983      	ldr	r3, [r0, #24]
 800de0e:	b90b      	cbnz	r3, 800de14 <_vfiprintf_r+0x18>
 800de10:	f7ff f976 	bl	800d100 <__sinit>
 800de14:	4b89      	ldr	r3, [pc, #548]	; (800e03c <_vfiprintf_r+0x240>)
 800de16:	429d      	cmp	r5, r3
 800de18:	d11b      	bne.n	800de52 <_vfiprintf_r+0x56>
 800de1a:	6875      	ldr	r5, [r6, #4]
 800de1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de1e:	07d9      	lsls	r1, r3, #31
 800de20:	d405      	bmi.n	800de2e <_vfiprintf_r+0x32>
 800de22:	89ab      	ldrh	r3, [r5, #12]
 800de24:	059a      	lsls	r2, r3, #22
 800de26:	d402      	bmi.n	800de2e <_vfiprintf_r+0x32>
 800de28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de2a:	f7ff fa1e 	bl	800d26a <__retarget_lock_acquire_recursive>
 800de2e:	89ab      	ldrh	r3, [r5, #12]
 800de30:	071b      	lsls	r3, r3, #28
 800de32:	d501      	bpl.n	800de38 <_vfiprintf_r+0x3c>
 800de34:	692b      	ldr	r3, [r5, #16]
 800de36:	b9eb      	cbnz	r3, 800de74 <_vfiprintf_r+0x78>
 800de38:	4629      	mov	r1, r5
 800de3a:	4630      	mov	r0, r6
 800de3c:	f000 fa0e 	bl	800e25c <__swsetup_r>
 800de40:	b1c0      	cbz	r0, 800de74 <_vfiprintf_r+0x78>
 800de42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de44:	07dc      	lsls	r4, r3, #31
 800de46:	d50e      	bpl.n	800de66 <_vfiprintf_r+0x6a>
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	b01d      	add	sp, #116	; 0x74
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	4b7b      	ldr	r3, [pc, #492]	; (800e040 <_vfiprintf_r+0x244>)
 800de54:	429d      	cmp	r5, r3
 800de56:	d101      	bne.n	800de5c <_vfiprintf_r+0x60>
 800de58:	68b5      	ldr	r5, [r6, #8]
 800de5a:	e7df      	b.n	800de1c <_vfiprintf_r+0x20>
 800de5c:	4b79      	ldr	r3, [pc, #484]	; (800e044 <_vfiprintf_r+0x248>)
 800de5e:	429d      	cmp	r5, r3
 800de60:	bf08      	it	eq
 800de62:	68f5      	ldreq	r5, [r6, #12]
 800de64:	e7da      	b.n	800de1c <_vfiprintf_r+0x20>
 800de66:	89ab      	ldrh	r3, [r5, #12]
 800de68:	0598      	lsls	r0, r3, #22
 800de6a:	d4ed      	bmi.n	800de48 <_vfiprintf_r+0x4c>
 800de6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de6e:	f7ff f9fd 	bl	800d26c <__retarget_lock_release_recursive>
 800de72:	e7e9      	b.n	800de48 <_vfiprintf_r+0x4c>
 800de74:	2300      	movs	r3, #0
 800de76:	9309      	str	r3, [sp, #36]	; 0x24
 800de78:	2320      	movs	r3, #32
 800de7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de82:	2330      	movs	r3, #48	; 0x30
 800de84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e048 <_vfiprintf_r+0x24c>
 800de88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de8c:	f04f 0901 	mov.w	r9, #1
 800de90:	4623      	mov	r3, r4
 800de92:	469a      	mov	sl, r3
 800de94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de98:	b10a      	cbz	r2, 800de9e <_vfiprintf_r+0xa2>
 800de9a:	2a25      	cmp	r2, #37	; 0x25
 800de9c:	d1f9      	bne.n	800de92 <_vfiprintf_r+0x96>
 800de9e:	ebba 0b04 	subs.w	fp, sl, r4
 800dea2:	d00b      	beq.n	800debc <_vfiprintf_r+0xc0>
 800dea4:	465b      	mov	r3, fp
 800dea6:	4622      	mov	r2, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	4630      	mov	r0, r6
 800deac:	f7ff ff93 	bl	800ddd6 <__sfputs_r>
 800deb0:	3001      	adds	r0, #1
 800deb2:	f000 80aa 	beq.w	800e00a <_vfiprintf_r+0x20e>
 800deb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deb8:	445a      	add	r2, fp
 800deba:	9209      	str	r2, [sp, #36]	; 0x24
 800debc:	f89a 3000 	ldrb.w	r3, [sl]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 80a2 	beq.w	800e00a <_vfiprintf_r+0x20e>
 800dec6:	2300      	movs	r3, #0
 800dec8:	f04f 32ff 	mov.w	r2, #4294967295
 800decc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ded0:	f10a 0a01 	add.w	sl, sl, #1
 800ded4:	9304      	str	r3, [sp, #16]
 800ded6:	9307      	str	r3, [sp, #28]
 800ded8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dedc:	931a      	str	r3, [sp, #104]	; 0x68
 800dede:	4654      	mov	r4, sl
 800dee0:	2205      	movs	r2, #5
 800dee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee6:	4858      	ldr	r0, [pc, #352]	; (800e048 <_vfiprintf_r+0x24c>)
 800dee8:	f7f2 f982 	bl	80001f0 <memchr>
 800deec:	9a04      	ldr	r2, [sp, #16]
 800deee:	b9d8      	cbnz	r0, 800df28 <_vfiprintf_r+0x12c>
 800def0:	06d1      	lsls	r1, r2, #27
 800def2:	bf44      	itt	mi
 800def4:	2320      	movmi	r3, #32
 800def6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800defa:	0713      	lsls	r3, r2, #28
 800defc:	bf44      	itt	mi
 800defe:	232b      	movmi	r3, #43	; 0x2b
 800df00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df04:	f89a 3000 	ldrb.w	r3, [sl]
 800df08:	2b2a      	cmp	r3, #42	; 0x2a
 800df0a:	d015      	beq.n	800df38 <_vfiprintf_r+0x13c>
 800df0c:	9a07      	ldr	r2, [sp, #28]
 800df0e:	4654      	mov	r4, sl
 800df10:	2000      	movs	r0, #0
 800df12:	f04f 0c0a 	mov.w	ip, #10
 800df16:	4621      	mov	r1, r4
 800df18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df1c:	3b30      	subs	r3, #48	; 0x30
 800df1e:	2b09      	cmp	r3, #9
 800df20:	d94e      	bls.n	800dfc0 <_vfiprintf_r+0x1c4>
 800df22:	b1b0      	cbz	r0, 800df52 <_vfiprintf_r+0x156>
 800df24:	9207      	str	r2, [sp, #28]
 800df26:	e014      	b.n	800df52 <_vfiprintf_r+0x156>
 800df28:	eba0 0308 	sub.w	r3, r0, r8
 800df2c:	fa09 f303 	lsl.w	r3, r9, r3
 800df30:	4313      	orrs	r3, r2
 800df32:	9304      	str	r3, [sp, #16]
 800df34:	46a2      	mov	sl, r4
 800df36:	e7d2      	b.n	800dede <_vfiprintf_r+0xe2>
 800df38:	9b03      	ldr	r3, [sp, #12]
 800df3a:	1d19      	adds	r1, r3, #4
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	9103      	str	r1, [sp, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	bfbb      	ittet	lt
 800df44:	425b      	neglt	r3, r3
 800df46:	f042 0202 	orrlt.w	r2, r2, #2
 800df4a:	9307      	strge	r3, [sp, #28]
 800df4c:	9307      	strlt	r3, [sp, #28]
 800df4e:	bfb8      	it	lt
 800df50:	9204      	strlt	r2, [sp, #16]
 800df52:	7823      	ldrb	r3, [r4, #0]
 800df54:	2b2e      	cmp	r3, #46	; 0x2e
 800df56:	d10c      	bne.n	800df72 <_vfiprintf_r+0x176>
 800df58:	7863      	ldrb	r3, [r4, #1]
 800df5a:	2b2a      	cmp	r3, #42	; 0x2a
 800df5c:	d135      	bne.n	800dfca <_vfiprintf_r+0x1ce>
 800df5e:	9b03      	ldr	r3, [sp, #12]
 800df60:	1d1a      	adds	r2, r3, #4
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	9203      	str	r2, [sp, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	bfb8      	it	lt
 800df6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df6e:	3402      	adds	r4, #2
 800df70:	9305      	str	r3, [sp, #20]
 800df72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e058 <_vfiprintf_r+0x25c>
 800df76:	7821      	ldrb	r1, [r4, #0]
 800df78:	2203      	movs	r2, #3
 800df7a:	4650      	mov	r0, sl
 800df7c:	f7f2 f938 	bl	80001f0 <memchr>
 800df80:	b140      	cbz	r0, 800df94 <_vfiprintf_r+0x198>
 800df82:	2340      	movs	r3, #64	; 0x40
 800df84:	eba0 000a 	sub.w	r0, r0, sl
 800df88:	fa03 f000 	lsl.w	r0, r3, r0
 800df8c:	9b04      	ldr	r3, [sp, #16]
 800df8e:	4303      	orrs	r3, r0
 800df90:	3401      	adds	r4, #1
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df98:	482c      	ldr	r0, [pc, #176]	; (800e04c <_vfiprintf_r+0x250>)
 800df9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df9e:	2206      	movs	r2, #6
 800dfa0:	f7f2 f926 	bl	80001f0 <memchr>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d03f      	beq.n	800e028 <_vfiprintf_r+0x22c>
 800dfa8:	4b29      	ldr	r3, [pc, #164]	; (800e050 <_vfiprintf_r+0x254>)
 800dfaa:	bb1b      	cbnz	r3, 800dff4 <_vfiprintf_r+0x1f8>
 800dfac:	9b03      	ldr	r3, [sp, #12]
 800dfae:	3307      	adds	r3, #7
 800dfb0:	f023 0307 	bic.w	r3, r3, #7
 800dfb4:	3308      	adds	r3, #8
 800dfb6:	9303      	str	r3, [sp, #12]
 800dfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfba:	443b      	add	r3, r7
 800dfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800dfbe:	e767      	b.n	800de90 <_vfiprintf_r+0x94>
 800dfc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfc4:	460c      	mov	r4, r1
 800dfc6:	2001      	movs	r0, #1
 800dfc8:	e7a5      	b.n	800df16 <_vfiprintf_r+0x11a>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	3401      	adds	r4, #1
 800dfce:	9305      	str	r3, [sp, #20]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	f04f 0c0a 	mov.w	ip, #10
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfdc:	3a30      	subs	r2, #48	; 0x30
 800dfde:	2a09      	cmp	r2, #9
 800dfe0:	d903      	bls.n	800dfea <_vfiprintf_r+0x1ee>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d0c5      	beq.n	800df72 <_vfiprintf_r+0x176>
 800dfe6:	9105      	str	r1, [sp, #20]
 800dfe8:	e7c3      	b.n	800df72 <_vfiprintf_r+0x176>
 800dfea:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfee:	4604      	mov	r4, r0
 800dff0:	2301      	movs	r3, #1
 800dff2:	e7f0      	b.n	800dfd6 <_vfiprintf_r+0x1da>
 800dff4:	ab03      	add	r3, sp, #12
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	462a      	mov	r2, r5
 800dffa:	4b16      	ldr	r3, [pc, #88]	; (800e054 <_vfiprintf_r+0x258>)
 800dffc:	a904      	add	r1, sp, #16
 800dffe:	4630      	mov	r0, r6
 800e000:	f7fd fd20 	bl	800ba44 <_printf_float>
 800e004:	4607      	mov	r7, r0
 800e006:	1c78      	adds	r0, r7, #1
 800e008:	d1d6      	bne.n	800dfb8 <_vfiprintf_r+0x1bc>
 800e00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e00c:	07d9      	lsls	r1, r3, #31
 800e00e:	d405      	bmi.n	800e01c <_vfiprintf_r+0x220>
 800e010:	89ab      	ldrh	r3, [r5, #12]
 800e012:	059a      	lsls	r2, r3, #22
 800e014:	d402      	bmi.n	800e01c <_vfiprintf_r+0x220>
 800e016:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e018:	f7ff f928 	bl	800d26c <__retarget_lock_release_recursive>
 800e01c:	89ab      	ldrh	r3, [r5, #12]
 800e01e:	065b      	lsls	r3, r3, #25
 800e020:	f53f af12 	bmi.w	800de48 <_vfiprintf_r+0x4c>
 800e024:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e026:	e711      	b.n	800de4c <_vfiprintf_r+0x50>
 800e028:	ab03      	add	r3, sp, #12
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	462a      	mov	r2, r5
 800e02e:	4b09      	ldr	r3, [pc, #36]	; (800e054 <_vfiprintf_r+0x258>)
 800e030:	a904      	add	r1, sp, #16
 800e032:	4630      	mov	r0, r6
 800e034:	f7fd ffaa 	bl	800bf8c <_printf_i>
 800e038:	e7e4      	b.n	800e004 <_vfiprintf_r+0x208>
 800e03a:	bf00      	nop
 800e03c:	080729a0 	.word	0x080729a0
 800e040:	080729c0 	.word	0x080729c0
 800e044:	08072980 	.word	0x08072980
 800e048:	08072b3c 	.word	0x08072b3c
 800e04c:	08072b46 	.word	0x08072b46
 800e050:	0800ba45 	.word	0x0800ba45
 800e054:	0800ddd7 	.word	0x0800ddd7
 800e058:	08072b42 	.word	0x08072b42

0800e05c <_putc_r>:
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	460d      	mov	r5, r1
 800e060:	4614      	mov	r4, r2
 800e062:	4606      	mov	r6, r0
 800e064:	b118      	cbz	r0, 800e06e <_putc_r+0x12>
 800e066:	6983      	ldr	r3, [r0, #24]
 800e068:	b90b      	cbnz	r3, 800e06e <_putc_r+0x12>
 800e06a:	f7ff f849 	bl	800d100 <__sinit>
 800e06e:	4b1c      	ldr	r3, [pc, #112]	; (800e0e0 <_putc_r+0x84>)
 800e070:	429c      	cmp	r4, r3
 800e072:	d124      	bne.n	800e0be <_putc_r+0x62>
 800e074:	6874      	ldr	r4, [r6, #4]
 800e076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e078:	07d8      	lsls	r0, r3, #31
 800e07a:	d405      	bmi.n	800e088 <_putc_r+0x2c>
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	0599      	lsls	r1, r3, #22
 800e080:	d402      	bmi.n	800e088 <_putc_r+0x2c>
 800e082:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e084:	f7ff f8f1 	bl	800d26a <__retarget_lock_acquire_recursive>
 800e088:	68a3      	ldr	r3, [r4, #8]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	60a3      	str	r3, [r4, #8]
 800e090:	da05      	bge.n	800e09e <_putc_r+0x42>
 800e092:	69a2      	ldr	r2, [r4, #24]
 800e094:	4293      	cmp	r3, r2
 800e096:	db1c      	blt.n	800e0d2 <_putc_r+0x76>
 800e098:	b2eb      	uxtb	r3, r5
 800e09a:	2b0a      	cmp	r3, #10
 800e09c:	d019      	beq.n	800e0d2 <_putc_r+0x76>
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	6022      	str	r2, [r4, #0]
 800e0a4:	701d      	strb	r5, [r3, #0]
 800e0a6:	b2ed      	uxtb	r5, r5
 800e0a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0aa:	07da      	lsls	r2, r3, #31
 800e0ac:	d405      	bmi.n	800e0ba <_putc_r+0x5e>
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	059b      	lsls	r3, r3, #22
 800e0b2:	d402      	bmi.n	800e0ba <_putc_r+0x5e>
 800e0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b6:	f7ff f8d9 	bl	800d26c <__retarget_lock_release_recursive>
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	bd70      	pop	{r4, r5, r6, pc}
 800e0be:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <_putc_r+0x88>)
 800e0c0:	429c      	cmp	r4, r3
 800e0c2:	d101      	bne.n	800e0c8 <_putc_r+0x6c>
 800e0c4:	68b4      	ldr	r4, [r6, #8]
 800e0c6:	e7d6      	b.n	800e076 <_putc_r+0x1a>
 800e0c8:	4b07      	ldr	r3, [pc, #28]	; (800e0e8 <_putc_r+0x8c>)
 800e0ca:	429c      	cmp	r4, r3
 800e0cc:	bf08      	it	eq
 800e0ce:	68f4      	ldreq	r4, [r6, #12]
 800e0d0:	e7d1      	b.n	800e076 <_putc_r+0x1a>
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f000 f85c 	bl	800e194 <__swbuf_r>
 800e0dc:	4605      	mov	r5, r0
 800e0de:	e7e3      	b.n	800e0a8 <_putc_r+0x4c>
 800e0e0:	080729a0 	.word	0x080729a0
 800e0e4:	080729c0 	.word	0x080729c0
 800e0e8:	08072980 	.word	0x08072980

0800e0ec <_sbrk_r>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	4d06      	ldr	r5, [pc, #24]	; (800e108 <_sbrk_r+0x1c>)
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	4608      	mov	r0, r1
 800e0f6:	602b      	str	r3, [r5, #0]
 800e0f8:	f000 fb92 	bl	800e820 <_sbrk>
 800e0fc:	1c43      	adds	r3, r0, #1
 800e0fe:	d102      	bne.n	800e106 <_sbrk_r+0x1a>
 800e100:	682b      	ldr	r3, [r5, #0]
 800e102:	b103      	cbz	r3, 800e106 <_sbrk_r+0x1a>
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	20000bc0 	.word	0x20000bc0

0800e10c <__sread>:
 800e10c:	b510      	push	{r4, lr}
 800e10e:	460c      	mov	r4, r1
 800e110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e114:	f000 fabe 	bl	800e694 <_read_r>
 800e118:	2800      	cmp	r0, #0
 800e11a:	bfab      	itete	ge
 800e11c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e11e:	89a3      	ldrhlt	r3, [r4, #12]
 800e120:	181b      	addge	r3, r3, r0
 800e122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e126:	bfac      	ite	ge
 800e128:	6563      	strge	r3, [r4, #84]	; 0x54
 800e12a:	81a3      	strhlt	r3, [r4, #12]
 800e12c:	bd10      	pop	{r4, pc}

0800e12e <__swrite>:
 800e12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e132:	461f      	mov	r7, r3
 800e134:	898b      	ldrh	r3, [r1, #12]
 800e136:	05db      	lsls	r3, r3, #23
 800e138:	4605      	mov	r5, r0
 800e13a:	460c      	mov	r4, r1
 800e13c:	4616      	mov	r6, r2
 800e13e:	d505      	bpl.n	800e14c <__swrite+0x1e>
 800e140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e144:	2302      	movs	r3, #2
 800e146:	2200      	movs	r2, #0
 800e148:	f000 f9d0 	bl	800e4ec <_lseek_r>
 800e14c:	89a3      	ldrh	r3, [r4, #12]
 800e14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e156:	81a3      	strh	r3, [r4, #12]
 800e158:	4632      	mov	r2, r6
 800e15a:	463b      	mov	r3, r7
 800e15c:	4628      	mov	r0, r5
 800e15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e162:	f000 b869 	b.w	800e238 <_write_r>

0800e166 <__sseek>:
 800e166:	b510      	push	{r4, lr}
 800e168:	460c      	mov	r4, r1
 800e16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e16e:	f000 f9bd 	bl	800e4ec <_lseek_r>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	bf15      	itete	ne
 800e178:	6560      	strne	r0, [r4, #84]	; 0x54
 800e17a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e17e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e182:	81a3      	strheq	r3, [r4, #12]
 800e184:	bf18      	it	ne
 800e186:	81a3      	strhne	r3, [r4, #12]
 800e188:	bd10      	pop	{r4, pc}

0800e18a <__sclose>:
 800e18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e18e:	f000 b8db 	b.w	800e348 <_close_r>
	...

0800e194 <__swbuf_r>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	460e      	mov	r6, r1
 800e198:	4614      	mov	r4, r2
 800e19a:	4605      	mov	r5, r0
 800e19c:	b118      	cbz	r0, 800e1a6 <__swbuf_r+0x12>
 800e19e:	6983      	ldr	r3, [r0, #24]
 800e1a0:	b90b      	cbnz	r3, 800e1a6 <__swbuf_r+0x12>
 800e1a2:	f7fe ffad 	bl	800d100 <__sinit>
 800e1a6:	4b21      	ldr	r3, [pc, #132]	; (800e22c <__swbuf_r+0x98>)
 800e1a8:	429c      	cmp	r4, r3
 800e1aa:	d12b      	bne.n	800e204 <__swbuf_r+0x70>
 800e1ac:	686c      	ldr	r4, [r5, #4]
 800e1ae:	69a3      	ldr	r3, [r4, #24]
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	071a      	lsls	r2, r3, #28
 800e1b6:	d52f      	bpl.n	800e218 <__swbuf_r+0x84>
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	b36b      	cbz	r3, 800e218 <__swbuf_r+0x84>
 800e1bc:	6923      	ldr	r3, [r4, #16]
 800e1be:	6820      	ldr	r0, [r4, #0]
 800e1c0:	1ac0      	subs	r0, r0, r3
 800e1c2:	6963      	ldr	r3, [r4, #20]
 800e1c4:	b2f6      	uxtb	r6, r6
 800e1c6:	4283      	cmp	r3, r0
 800e1c8:	4637      	mov	r7, r6
 800e1ca:	dc04      	bgt.n	800e1d6 <__swbuf_r+0x42>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f000 f950 	bl	800e474 <_fflush_r>
 800e1d4:	bb30      	cbnz	r0, 800e224 <__swbuf_r+0x90>
 800e1d6:	68a3      	ldr	r3, [r4, #8]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	60a3      	str	r3, [r4, #8]
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	1c5a      	adds	r2, r3, #1
 800e1e0:	6022      	str	r2, [r4, #0]
 800e1e2:	701e      	strb	r6, [r3, #0]
 800e1e4:	6963      	ldr	r3, [r4, #20]
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	4283      	cmp	r3, r0
 800e1ea:	d004      	beq.n	800e1f6 <__swbuf_r+0x62>
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	07db      	lsls	r3, r3, #31
 800e1f0:	d506      	bpl.n	800e200 <__swbuf_r+0x6c>
 800e1f2:	2e0a      	cmp	r6, #10
 800e1f4:	d104      	bne.n	800e200 <__swbuf_r+0x6c>
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f000 f93b 	bl	800e474 <_fflush_r>
 800e1fe:	b988      	cbnz	r0, 800e224 <__swbuf_r+0x90>
 800e200:	4638      	mov	r0, r7
 800e202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e204:	4b0a      	ldr	r3, [pc, #40]	; (800e230 <__swbuf_r+0x9c>)
 800e206:	429c      	cmp	r4, r3
 800e208:	d101      	bne.n	800e20e <__swbuf_r+0x7a>
 800e20a:	68ac      	ldr	r4, [r5, #8]
 800e20c:	e7cf      	b.n	800e1ae <__swbuf_r+0x1a>
 800e20e:	4b09      	ldr	r3, [pc, #36]	; (800e234 <__swbuf_r+0xa0>)
 800e210:	429c      	cmp	r4, r3
 800e212:	bf08      	it	eq
 800e214:	68ec      	ldreq	r4, [r5, #12]
 800e216:	e7ca      	b.n	800e1ae <__swbuf_r+0x1a>
 800e218:	4621      	mov	r1, r4
 800e21a:	4628      	mov	r0, r5
 800e21c:	f000 f81e 	bl	800e25c <__swsetup_r>
 800e220:	2800      	cmp	r0, #0
 800e222:	d0cb      	beq.n	800e1bc <__swbuf_r+0x28>
 800e224:	f04f 37ff 	mov.w	r7, #4294967295
 800e228:	e7ea      	b.n	800e200 <__swbuf_r+0x6c>
 800e22a:	bf00      	nop
 800e22c:	080729a0 	.word	0x080729a0
 800e230:	080729c0 	.word	0x080729c0
 800e234:	08072980 	.word	0x08072980

0800e238 <_write_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	; (800e258 <_write_r+0x20>)
 800e23c:	4604      	mov	r4, r0
 800e23e:	4608      	mov	r0, r1
 800e240:	4611      	mov	r1, r2
 800e242:	2200      	movs	r2, #0
 800e244:	602a      	str	r2, [r5, #0]
 800e246:	461a      	mov	r2, r3
 800e248:	f000 faf8 	bl	800e83c <_write>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	d102      	bne.n	800e256 <_write_r+0x1e>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	b103      	cbz	r3, 800e256 <_write_r+0x1e>
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	20000bc0 	.word	0x20000bc0

0800e25c <__swsetup_r>:
 800e25c:	4b32      	ldr	r3, [pc, #200]	; (800e328 <__swsetup_r+0xcc>)
 800e25e:	b570      	push	{r4, r5, r6, lr}
 800e260:	681d      	ldr	r5, [r3, #0]
 800e262:	4606      	mov	r6, r0
 800e264:	460c      	mov	r4, r1
 800e266:	b125      	cbz	r5, 800e272 <__swsetup_r+0x16>
 800e268:	69ab      	ldr	r3, [r5, #24]
 800e26a:	b913      	cbnz	r3, 800e272 <__swsetup_r+0x16>
 800e26c:	4628      	mov	r0, r5
 800e26e:	f7fe ff47 	bl	800d100 <__sinit>
 800e272:	4b2e      	ldr	r3, [pc, #184]	; (800e32c <__swsetup_r+0xd0>)
 800e274:	429c      	cmp	r4, r3
 800e276:	d10f      	bne.n	800e298 <__swsetup_r+0x3c>
 800e278:	686c      	ldr	r4, [r5, #4]
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e280:	0719      	lsls	r1, r3, #28
 800e282:	d42c      	bmi.n	800e2de <__swsetup_r+0x82>
 800e284:	06dd      	lsls	r5, r3, #27
 800e286:	d411      	bmi.n	800e2ac <__swsetup_r+0x50>
 800e288:	2309      	movs	r3, #9
 800e28a:	6033      	str	r3, [r6, #0]
 800e28c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	f04f 30ff 	mov.w	r0, #4294967295
 800e296:	e03e      	b.n	800e316 <__swsetup_r+0xba>
 800e298:	4b25      	ldr	r3, [pc, #148]	; (800e330 <__swsetup_r+0xd4>)
 800e29a:	429c      	cmp	r4, r3
 800e29c:	d101      	bne.n	800e2a2 <__swsetup_r+0x46>
 800e29e:	68ac      	ldr	r4, [r5, #8]
 800e2a0:	e7eb      	b.n	800e27a <__swsetup_r+0x1e>
 800e2a2:	4b24      	ldr	r3, [pc, #144]	; (800e334 <__swsetup_r+0xd8>)
 800e2a4:	429c      	cmp	r4, r3
 800e2a6:	bf08      	it	eq
 800e2a8:	68ec      	ldreq	r4, [r5, #12]
 800e2aa:	e7e6      	b.n	800e27a <__swsetup_r+0x1e>
 800e2ac:	0758      	lsls	r0, r3, #29
 800e2ae:	d512      	bpl.n	800e2d6 <__swsetup_r+0x7a>
 800e2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2b2:	b141      	cbz	r1, 800e2c6 <__swsetup_r+0x6a>
 800e2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2b8:	4299      	cmp	r1, r3
 800e2ba:	d002      	beq.n	800e2c2 <__swsetup_r+0x66>
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7ff fb6d 	bl	800d99c <_free_r>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6363      	str	r3, [r4, #52]	; 0x34
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2cc:	81a3      	strh	r3, [r4, #12]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	6063      	str	r3, [r4, #4]
 800e2d2:	6923      	ldr	r3, [r4, #16]
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	f043 0308 	orr.w	r3, r3, #8
 800e2dc:	81a3      	strh	r3, [r4, #12]
 800e2de:	6923      	ldr	r3, [r4, #16]
 800e2e0:	b94b      	cbnz	r3, 800e2f6 <__swsetup_r+0x9a>
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ec:	d003      	beq.n	800e2f6 <__swsetup_r+0x9a>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f000 f931 	bl	800e558 <__smakebuf_r>
 800e2f6:	89a0      	ldrh	r0, [r4, #12]
 800e2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2fc:	f010 0301 	ands.w	r3, r0, #1
 800e300:	d00a      	beq.n	800e318 <__swsetup_r+0xbc>
 800e302:	2300      	movs	r3, #0
 800e304:	60a3      	str	r3, [r4, #8]
 800e306:	6963      	ldr	r3, [r4, #20]
 800e308:	425b      	negs	r3, r3
 800e30a:	61a3      	str	r3, [r4, #24]
 800e30c:	6923      	ldr	r3, [r4, #16]
 800e30e:	b943      	cbnz	r3, 800e322 <__swsetup_r+0xc6>
 800e310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e314:	d1ba      	bne.n	800e28c <__swsetup_r+0x30>
 800e316:	bd70      	pop	{r4, r5, r6, pc}
 800e318:	0781      	lsls	r1, r0, #30
 800e31a:	bf58      	it	pl
 800e31c:	6963      	ldrpl	r3, [r4, #20]
 800e31e:	60a3      	str	r3, [r4, #8]
 800e320:	e7f4      	b.n	800e30c <__swsetup_r+0xb0>
 800e322:	2000      	movs	r0, #0
 800e324:	e7f7      	b.n	800e316 <__swsetup_r+0xba>
 800e326:	bf00      	nop
 800e328:	20000064 	.word	0x20000064
 800e32c:	080729a0 	.word	0x080729a0
 800e330:	080729c0 	.word	0x080729c0
 800e334:	08072980 	.word	0x08072980

0800e338 <abort>:
 800e338:	b508      	push	{r3, lr}
 800e33a:	2006      	movs	r0, #6
 800e33c:	f000 f9e4 	bl	800e708 <raise>
 800e340:	2001      	movs	r0, #1
 800e342:	f000 fa83 	bl	800e84c <_exit>
	...

0800e348 <_close_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d06      	ldr	r5, [pc, #24]	; (800e364 <_close_r+0x1c>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	602b      	str	r3, [r5, #0]
 800e354:	f000 fa2c 	bl	800e7b0 <_close>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_close_r+0x1a>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_close_r+0x1a>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	20000bc0 	.word	0x20000bc0

0800e368 <__sflush_r>:
 800e368:	898a      	ldrh	r2, [r1, #12]
 800e36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e36e:	4605      	mov	r5, r0
 800e370:	0710      	lsls	r0, r2, #28
 800e372:	460c      	mov	r4, r1
 800e374:	d458      	bmi.n	800e428 <__sflush_r+0xc0>
 800e376:	684b      	ldr	r3, [r1, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	dc05      	bgt.n	800e388 <__sflush_r+0x20>
 800e37c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e37e:	2b00      	cmp	r3, #0
 800e380:	dc02      	bgt.n	800e388 <__sflush_r+0x20>
 800e382:	2000      	movs	r0, #0
 800e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	d0f9      	beq.n	800e382 <__sflush_r+0x1a>
 800e38e:	2300      	movs	r3, #0
 800e390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e394:	682f      	ldr	r7, [r5, #0]
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	d032      	beq.n	800e400 <__sflush_r+0x98>
 800e39a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	075a      	lsls	r2, r3, #29
 800e3a0:	d505      	bpl.n	800e3ae <__sflush_r+0x46>
 800e3a2:	6863      	ldr	r3, [r4, #4]
 800e3a4:	1ac0      	subs	r0, r0, r3
 800e3a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3a8:	b10b      	cbz	r3, 800e3ae <__sflush_r+0x46>
 800e3aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3ac:	1ac0      	subs	r0, r0, r3
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3b4:	6a21      	ldr	r1, [r4, #32]
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	47b0      	blx	r6
 800e3ba:	1c43      	adds	r3, r0, #1
 800e3bc:	89a3      	ldrh	r3, [r4, #12]
 800e3be:	d106      	bne.n	800e3ce <__sflush_r+0x66>
 800e3c0:	6829      	ldr	r1, [r5, #0]
 800e3c2:	291d      	cmp	r1, #29
 800e3c4:	d82c      	bhi.n	800e420 <__sflush_r+0xb8>
 800e3c6:	4a2a      	ldr	r2, [pc, #168]	; (800e470 <__sflush_r+0x108>)
 800e3c8:	40ca      	lsrs	r2, r1
 800e3ca:	07d6      	lsls	r6, r2, #31
 800e3cc:	d528      	bpl.n	800e420 <__sflush_r+0xb8>
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	6062      	str	r2, [r4, #4]
 800e3d2:	04d9      	lsls	r1, r3, #19
 800e3d4:	6922      	ldr	r2, [r4, #16]
 800e3d6:	6022      	str	r2, [r4, #0]
 800e3d8:	d504      	bpl.n	800e3e4 <__sflush_r+0x7c>
 800e3da:	1c42      	adds	r2, r0, #1
 800e3dc:	d101      	bne.n	800e3e2 <__sflush_r+0x7a>
 800e3de:	682b      	ldr	r3, [r5, #0]
 800e3e0:	b903      	cbnz	r3, 800e3e4 <__sflush_r+0x7c>
 800e3e2:	6560      	str	r0, [r4, #84]	; 0x54
 800e3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3e6:	602f      	str	r7, [r5, #0]
 800e3e8:	2900      	cmp	r1, #0
 800e3ea:	d0ca      	beq.n	800e382 <__sflush_r+0x1a>
 800e3ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3f0:	4299      	cmp	r1, r3
 800e3f2:	d002      	beq.n	800e3fa <__sflush_r+0x92>
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	f7ff fad1 	bl	800d99c <_free_r>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e3fe:	e7c1      	b.n	800e384 <__sflush_r+0x1c>
 800e400:	6a21      	ldr	r1, [r4, #32]
 800e402:	2301      	movs	r3, #1
 800e404:	4628      	mov	r0, r5
 800e406:	47b0      	blx	r6
 800e408:	1c41      	adds	r1, r0, #1
 800e40a:	d1c7      	bne.n	800e39c <__sflush_r+0x34>
 800e40c:	682b      	ldr	r3, [r5, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0c4      	beq.n	800e39c <__sflush_r+0x34>
 800e412:	2b1d      	cmp	r3, #29
 800e414:	d001      	beq.n	800e41a <__sflush_r+0xb2>
 800e416:	2b16      	cmp	r3, #22
 800e418:	d101      	bne.n	800e41e <__sflush_r+0xb6>
 800e41a:	602f      	str	r7, [r5, #0]
 800e41c:	e7b1      	b.n	800e382 <__sflush_r+0x1a>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e424:	81a3      	strh	r3, [r4, #12]
 800e426:	e7ad      	b.n	800e384 <__sflush_r+0x1c>
 800e428:	690f      	ldr	r7, [r1, #16]
 800e42a:	2f00      	cmp	r7, #0
 800e42c:	d0a9      	beq.n	800e382 <__sflush_r+0x1a>
 800e42e:	0793      	lsls	r3, r2, #30
 800e430:	680e      	ldr	r6, [r1, #0]
 800e432:	bf08      	it	eq
 800e434:	694b      	ldreq	r3, [r1, #20]
 800e436:	600f      	str	r7, [r1, #0]
 800e438:	bf18      	it	ne
 800e43a:	2300      	movne	r3, #0
 800e43c:	eba6 0807 	sub.w	r8, r6, r7
 800e440:	608b      	str	r3, [r1, #8]
 800e442:	f1b8 0f00 	cmp.w	r8, #0
 800e446:	dd9c      	ble.n	800e382 <__sflush_r+0x1a>
 800e448:	6a21      	ldr	r1, [r4, #32]
 800e44a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e44c:	4643      	mov	r3, r8
 800e44e:	463a      	mov	r2, r7
 800e450:	4628      	mov	r0, r5
 800e452:	47b0      	blx	r6
 800e454:	2800      	cmp	r0, #0
 800e456:	dc06      	bgt.n	800e466 <__sflush_r+0xfe>
 800e458:	89a3      	ldrh	r3, [r4, #12]
 800e45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e45e:	81a3      	strh	r3, [r4, #12]
 800e460:	f04f 30ff 	mov.w	r0, #4294967295
 800e464:	e78e      	b.n	800e384 <__sflush_r+0x1c>
 800e466:	4407      	add	r7, r0
 800e468:	eba8 0800 	sub.w	r8, r8, r0
 800e46c:	e7e9      	b.n	800e442 <__sflush_r+0xda>
 800e46e:	bf00      	nop
 800e470:	20400001 	.word	0x20400001

0800e474 <_fflush_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	690b      	ldr	r3, [r1, #16]
 800e478:	4605      	mov	r5, r0
 800e47a:	460c      	mov	r4, r1
 800e47c:	b913      	cbnz	r3, 800e484 <_fflush_r+0x10>
 800e47e:	2500      	movs	r5, #0
 800e480:	4628      	mov	r0, r5
 800e482:	bd38      	pop	{r3, r4, r5, pc}
 800e484:	b118      	cbz	r0, 800e48e <_fflush_r+0x1a>
 800e486:	6983      	ldr	r3, [r0, #24]
 800e488:	b90b      	cbnz	r3, 800e48e <_fflush_r+0x1a>
 800e48a:	f7fe fe39 	bl	800d100 <__sinit>
 800e48e:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <_fflush_r+0x6c>)
 800e490:	429c      	cmp	r4, r3
 800e492:	d11b      	bne.n	800e4cc <_fflush_r+0x58>
 800e494:	686c      	ldr	r4, [r5, #4]
 800e496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0ef      	beq.n	800e47e <_fflush_r+0xa>
 800e49e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4a0:	07d0      	lsls	r0, r2, #31
 800e4a2:	d404      	bmi.n	800e4ae <_fflush_r+0x3a>
 800e4a4:	0599      	lsls	r1, r3, #22
 800e4a6:	d402      	bmi.n	800e4ae <_fflush_r+0x3a>
 800e4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4aa:	f7fe fede 	bl	800d26a <__retarget_lock_acquire_recursive>
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	4621      	mov	r1, r4
 800e4b2:	f7ff ff59 	bl	800e368 <__sflush_r>
 800e4b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4b8:	07da      	lsls	r2, r3, #31
 800e4ba:	4605      	mov	r5, r0
 800e4bc:	d4e0      	bmi.n	800e480 <_fflush_r+0xc>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	059b      	lsls	r3, r3, #22
 800e4c2:	d4dd      	bmi.n	800e480 <_fflush_r+0xc>
 800e4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4c6:	f7fe fed1 	bl	800d26c <__retarget_lock_release_recursive>
 800e4ca:	e7d9      	b.n	800e480 <_fflush_r+0xc>
 800e4cc:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <_fflush_r+0x70>)
 800e4ce:	429c      	cmp	r4, r3
 800e4d0:	d101      	bne.n	800e4d6 <_fflush_r+0x62>
 800e4d2:	68ac      	ldr	r4, [r5, #8]
 800e4d4:	e7df      	b.n	800e496 <_fflush_r+0x22>
 800e4d6:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <_fflush_r+0x74>)
 800e4d8:	429c      	cmp	r4, r3
 800e4da:	bf08      	it	eq
 800e4dc:	68ec      	ldreq	r4, [r5, #12]
 800e4de:	e7da      	b.n	800e496 <_fflush_r+0x22>
 800e4e0:	080729a0 	.word	0x080729a0
 800e4e4:	080729c0 	.word	0x080729c0
 800e4e8:	08072980 	.word	0x08072980

0800e4ec <_lseek_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d07      	ldr	r5, [pc, #28]	; (800e50c <_lseek_r+0x20>)
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	602a      	str	r2, [r5, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f000 f980 	bl	800e800 <_lseek>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_lseek_r+0x1e>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	b103      	cbz	r3, 800e50a <_lseek_r+0x1e>
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	20000bc0 	.word	0x20000bc0

0800e510 <__swhatbuf_r>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	460e      	mov	r6, r1
 800e514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e518:	2900      	cmp	r1, #0
 800e51a:	b096      	sub	sp, #88	; 0x58
 800e51c:	4614      	mov	r4, r2
 800e51e:	461d      	mov	r5, r3
 800e520:	da07      	bge.n	800e532 <__swhatbuf_r+0x22>
 800e522:	2300      	movs	r3, #0
 800e524:	602b      	str	r3, [r5, #0]
 800e526:	89b3      	ldrh	r3, [r6, #12]
 800e528:	061a      	lsls	r2, r3, #24
 800e52a:	d410      	bmi.n	800e54e <__swhatbuf_r+0x3e>
 800e52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e530:	e00e      	b.n	800e550 <__swhatbuf_r+0x40>
 800e532:	466a      	mov	r2, sp
 800e534:	f000 f912 	bl	800e75c <_fstat_r>
 800e538:	2800      	cmp	r0, #0
 800e53a:	dbf2      	blt.n	800e522 <__swhatbuf_r+0x12>
 800e53c:	9a01      	ldr	r2, [sp, #4]
 800e53e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e546:	425a      	negs	r2, r3
 800e548:	415a      	adcs	r2, r3
 800e54a:	602a      	str	r2, [r5, #0]
 800e54c:	e7ee      	b.n	800e52c <__swhatbuf_r+0x1c>
 800e54e:	2340      	movs	r3, #64	; 0x40
 800e550:	2000      	movs	r0, #0
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	b016      	add	sp, #88	; 0x58
 800e556:	bd70      	pop	{r4, r5, r6, pc}

0800e558 <__smakebuf_r>:
 800e558:	898b      	ldrh	r3, [r1, #12]
 800e55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e55c:	079d      	lsls	r5, r3, #30
 800e55e:	4606      	mov	r6, r0
 800e560:	460c      	mov	r4, r1
 800e562:	d507      	bpl.n	800e574 <__smakebuf_r+0x1c>
 800e564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	6123      	str	r3, [r4, #16]
 800e56c:	2301      	movs	r3, #1
 800e56e:	6163      	str	r3, [r4, #20]
 800e570:	b002      	add	sp, #8
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	ab01      	add	r3, sp, #4
 800e576:	466a      	mov	r2, sp
 800e578:	f7ff ffca 	bl	800e510 <__swhatbuf_r>
 800e57c:	9900      	ldr	r1, [sp, #0]
 800e57e:	4605      	mov	r5, r0
 800e580:	4630      	mov	r0, r6
 800e582:	f7ff fa5b 	bl	800da3c <_malloc_r>
 800e586:	b948      	cbnz	r0, 800e59c <__smakebuf_r+0x44>
 800e588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e58c:	059a      	lsls	r2, r3, #22
 800e58e:	d4ef      	bmi.n	800e570 <__smakebuf_r+0x18>
 800e590:	f023 0303 	bic.w	r3, r3, #3
 800e594:	f043 0302 	orr.w	r3, r3, #2
 800e598:	81a3      	strh	r3, [r4, #12]
 800e59a:	e7e3      	b.n	800e564 <__smakebuf_r+0xc>
 800e59c:	4b0d      	ldr	r3, [pc, #52]	; (800e5d4 <__smakebuf_r+0x7c>)
 800e59e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	6020      	str	r0, [r4, #0]
 800e5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5a8:	81a3      	strh	r3, [r4, #12]
 800e5aa:	9b00      	ldr	r3, [sp, #0]
 800e5ac:	6163      	str	r3, [r4, #20]
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	6120      	str	r0, [r4, #16]
 800e5b2:	b15b      	cbz	r3, 800e5cc <__smakebuf_r+0x74>
 800e5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f000 f8e1 	bl	800e780 <_isatty_r>
 800e5be:	b128      	cbz	r0, 800e5cc <__smakebuf_r+0x74>
 800e5c0:	89a3      	ldrh	r3, [r4, #12]
 800e5c2:	f023 0303 	bic.w	r3, r3, #3
 800e5c6:	f043 0301 	orr.w	r3, r3, #1
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	89a0      	ldrh	r0, [r4, #12]
 800e5ce:	4305      	orrs	r5, r0
 800e5d0:	81a5      	strh	r5, [r4, #12]
 800e5d2:	e7cd      	b.n	800e570 <__smakebuf_r+0x18>
 800e5d4:	0800d099 	.word	0x0800d099

0800e5d8 <__ascii_mbtowc>:
 800e5d8:	b082      	sub	sp, #8
 800e5da:	b901      	cbnz	r1, 800e5de <__ascii_mbtowc+0x6>
 800e5dc:	a901      	add	r1, sp, #4
 800e5de:	b142      	cbz	r2, 800e5f2 <__ascii_mbtowc+0x1a>
 800e5e0:	b14b      	cbz	r3, 800e5f6 <__ascii_mbtowc+0x1e>
 800e5e2:	7813      	ldrb	r3, [r2, #0]
 800e5e4:	600b      	str	r3, [r1, #0]
 800e5e6:	7812      	ldrb	r2, [r2, #0]
 800e5e8:	1e10      	subs	r0, r2, #0
 800e5ea:	bf18      	it	ne
 800e5ec:	2001      	movne	r0, #1
 800e5ee:	b002      	add	sp, #8
 800e5f0:	4770      	bx	lr
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	e7fb      	b.n	800e5ee <__ascii_mbtowc+0x16>
 800e5f6:	f06f 0001 	mvn.w	r0, #1
 800e5fa:	e7f8      	b.n	800e5ee <__ascii_mbtowc+0x16>

0800e5fc <memmove>:
 800e5fc:	4288      	cmp	r0, r1
 800e5fe:	b510      	push	{r4, lr}
 800e600:	eb01 0402 	add.w	r4, r1, r2
 800e604:	d902      	bls.n	800e60c <memmove+0x10>
 800e606:	4284      	cmp	r4, r0
 800e608:	4623      	mov	r3, r4
 800e60a:	d807      	bhi.n	800e61c <memmove+0x20>
 800e60c:	1e43      	subs	r3, r0, #1
 800e60e:	42a1      	cmp	r1, r4
 800e610:	d008      	beq.n	800e624 <memmove+0x28>
 800e612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e61a:	e7f8      	b.n	800e60e <memmove+0x12>
 800e61c:	4402      	add	r2, r0
 800e61e:	4601      	mov	r1, r0
 800e620:	428a      	cmp	r2, r1
 800e622:	d100      	bne.n	800e626 <memmove+0x2a>
 800e624:	bd10      	pop	{r4, pc}
 800e626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e62a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e62e:	e7f7      	b.n	800e620 <memmove+0x24>

0800e630 <__malloc_lock>:
 800e630:	4801      	ldr	r0, [pc, #4]	; (800e638 <__malloc_lock+0x8>)
 800e632:	f7fe be1a 	b.w	800d26a <__retarget_lock_acquire_recursive>
 800e636:	bf00      	nop
 800e638:	20000bb8 	.word	0x20000bb8

0800e63c <__malloc_unlock>:
 800e63c:	4801      	ldr	r0, [pc, #4]	; (800e644 <__malloc_unlock+0x8>)
 800e63e:	f7fe be15 	b.w	800d26c <__retarget_lock_release_recursive>
 800e642:	bf00      	nop
 800e644:	20000bb8 	.word	0x20000bb8

0800e648 <_realloc_r>:
 800e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64a:	4607      	mov	r7, r0
 800e64c:	4614      	mov	r4, r2
 800e64e:	460e      	mov	r6, r1
 800e650:	b921      	cbnz	r1, 800e65c <_realloc_r+0x14>
 800e652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e656:	4611      	mov	r1, r2
 800e658:	f7ff b9f0 	b.w	800da3c <_malloc_r>
 800e65c:	b922      	cbnz	r2, 800e668 <_realloc_r+0x20>
 800e65e:	f7ff f99d 	bl	800d99c <_free_r>
 800e662:	4625      	mov	r5, r4
 800e664:	4628      	mov	r0, r5
 800e666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e668:	f000 f89a 	bl	800e7a0 <_malloc_usable_size_r>
 800e66c:	42a0      	cmp	r0, r4
 800e66e:	d20f      	bcs.n	800e690 <_realloc_r+0x48>
 800e670:	4621      	mov	r1, r4
 800e672:	4638      	mov	r0, r7
 800e674:	f7ff f9e2 	bl	800da3c <_malloc_r>
 800e678:	4605      	mov	r5, r0
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d0f2      	beq.n	800e664 <_realloc_r+0x1c>
 800e67e:	4631      	mov	r1, r6
 800e680:	4622      	mov	r2, r4
 800e682:	f7fd f929 	bl	800b8d8 <memcpy>
 800e686:	4631      	mov	r1, r6
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff f987 	bl	800d99c <_free_r>
 800e68e:	e7e9      	b.n	800e664 <_realloc_r+0x1c>
 800e690:	4635      	mov	r5, r6
 800e692:	e7e7      	b.n	800e664 <_realloc_r+0x1c>

0800e694 <_read_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d07      	ldr	r5, [pc, #28]	; (800e6b4 <_read_r+0x20>)
 800e698:	4604      	mov	r4, r0
 800e69a:	4608      	mov	r0, r1
 800e69c:	4611      	mov	r1, r2
 800e69e:	2200      	movs	r2, #0
 800e6a0:	602a      	str	r2, [r5, #0]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f000 f8b4 	bl	800e810 <_read>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_read_r+0x1e>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_read_r+0x1e>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	20000bc0 	.word	0x20000bc0

0800e6b8 <_raise_r>:
 800e6b8:	291f      	cmp	r1, #31
 800e6ba:	b538      	push	{r3, r4, r5, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	d904      	bls.n	800e6cc <_raise_r+0x14>
 800e6c2:	2316      	movs	r3, #22
 800e6c4:	6003      	str	r3, [r0, #0]
 800e6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6ce:	b112      	cbz	r2, 800e6d6 <_raise_r+0x1e>
 800e6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d4:	b94b      	cbnz	r3, 800e6ea <_raise_r+0x32>
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 f830 	bl	800e73c <_getpid_r>
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4601      	mov	r1, r0
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e6:	f000 b817 	b.w	800e718 <_kill_r>
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d00a      	beq.n	800e704 <_raise_r+0x4c>
 800e6ee:	1c59      	adds	r1, r3, #1
 800e6f0:	d103      	bne.n	800e6fa <_raise_r+0x42>
 800e6f2:	2316      	movs	r3, #22
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	2001      	movs	r0, #1
 800e6f8:	e7e7      	b.n	800e6ca <_raise_r+0x12>
 800e6fa:	2400      	movs	r4, #0
 800e6fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e700:	4628      	mov	r0, r5
 800e702:	4798      	blx	r3
 800e704:	2000      	movs	r0, #0
 800e706:	e7e0      	b.n	800e6ca <_raise_r+0x12>

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd3 	b.w	800e6b8 <_raise_r>
 800e712:	bf00      	nop
 800e714:	20000064 	.word	0x20000064

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f000 f863 	bl	800e7f0 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	20000bc0 	.word	0x20000bc0

0800e73c <_getpid_r>:
 800e73c:	f000 b848 	b.w	800e7d0 <_getpid>

0800e740 <__ascii_wctomb>:
 800e740:	b149      	cbz	r1, 800e756 <__ascii_wctomb+0x16>
 800e742:	2aff      	cmp	r2, #255	; 0xff
 800e744:	bf85      	ittet	hi
 800e746:	238a      	movhi	r3, #138	; 0x8a
 800e748:	6003      	strhi	r3, [r0, #0]
 800e74a:	700a      	strbls	r2, [r1, #0]
 800e74c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e750:	bf98      	it	ls
 800e752:	2001      	movls	r0, #1
 800e754:	4770      	bx	lr
 800e756:	4608      	mov	r0, r1
 800e758:	4770      	bx	lr
	...

0800e75c <_fstat_r>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	4d07      	ldr	r5, [pc, #28]	; (800e77c <_fstat_r+0x20>)
 800e760:	2300      	movs	r3, #0
 800e762:	4604      	mov	r4, r0
 800e764:	4608      	mov	r0, r1
 800e766:	4611      	mov	r1, r2
 800e768:	602b      	str	r3, [r5, #0]
 800e76a:	f000 f829 	bl	800e7c0 <_fstat>
 800e76e:	1c43      	adds	r3, r0, #1
 800e770:	d102      	bne.n	800e778 <_fstat_r+0x1c>
 800e772:	682b      	ldr	r3, [r5, #0]
 800e774:	b103      	cbz	r3, 800e778 <_fstat_r+0x1c>
 800e776:	6023      	str	r3, [r4, #0]
 800e778:	bd38      	pop	{r3, r4, r5, pc}
 800e77a:	bf00      	nop
 800e77c:	20000bc0 	.word	0x20000bc0

0800e780 <_isatty_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	4d06      	ldr	r5, [pc, #24]	; (800e79c <_isatty_r+0x1c>)
 800e784:	2300      	movs	r3, #0
 800e786:	4604      	mov	r4, r0
 800e788:	4608      	mov	r0, r1
 800e78a:	602b      	str	r3, [r5, #0]
 800e78c:	f000 f828 	bl	800e7e0 <_isatty>
 800e790:	1c43      	adds	r3, r0, #1
 800e792:	d102      	bne.n	800e79a <_isatty_r+0x1a>
 800e794:	682b      	ldr	r3, [r5, #0]
 800e796:	b103      	cbz	r3, 800e79a <_isatty_r+0x1a>
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	bd38      	pop	{r3, r4, r5, pc}
 800e79c:	20000bc0 	.word	0x20000bc0

0800e7a0 <_malloc_usable_size_r>:
 800e7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a4:	1f18      	subs	r0, r3, #4
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	bfbc      	itt	lt
 800e7aa:	580b      	ldrlt	r3, [r1, r0]
 800e7ac:	18c0      	addlt	r0, r0, r3
 800e7ae:	4770      	bx	lr

0800e7b0 <_close>:
 800e7b0:	4b02      	ldr	r3, [pc, #8]	; (800e7bc <_close+0xc>)
 800e7b2:	2258      	movs	r2, #88	; 0x58
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ba:	4770      	bx	lr
 800e7bc:	20000bc0 	.word	0x20000bc0

0800e7c0 <_fstat>:
 800e7c0:	4b02      	ldr	r3, [pc, #8]	; (800e7cc <_fstat+0xc>)
 800e7c2:	2258      	movs	r2, #88	; 0x58
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ca:	4770      	bx	lr
 800e7cc:	20000bc0 	.word	0x20000bc0

0800e7d0 <_getpid>:
 800e7d0:	4b02      	ldr	r3, [pc, #8]	; (800e7dc <_getpid+0xc>)
 800e7d2:	2258      	movs	r2, #88	; 0x58
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7da:	4770      	bx	lr
 800e7dc:	20000bc0 	.word	0x20000bc0

0800e7e0 <_isatty>:
 800e7e0:	4b02      	ldr	r3, [pc, #8]	; (800e7ec <_isatty+0xc>)
 800e7e2:	2258      	movs	r2, #88	; 0x58
 800e7e4:	601a      	str	r2, [r3, #0]
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	20000bc0 	.word	0x20000bc0

0800e7f0 <_kill>:
 800e7f0:	4b02      	ldr	r3, [pc, #8]	; (800e7fc <_kill+0xc>)
 800e7f2:	2258      	movs	r2, #88	; 0x58
 800e7f4:	601a      	str	r2, [r3, #0]
 800e7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fa:	4770      	bx	lr
 800e7fc:	20000bc0 	.word	0x20000bc0

0800e800 <_lseek>:
 800e800:	4b02      	ldr	r3, [pc, #8]	; (800e80c <_lseek+0xc>)
 800e802:	2258      	movs	r2, #88	; 0x58
 800e804:	601a      	str	r2, [r3, #0]
 800e806:	f04f 30ff 	mov.w	r0, #4294967295
 800e80a:	4770      	bx	lr
 800e80c:	20000bc0 	.word	0x20000bc0

0800e810 <_read>:
 800e810:	4b02      	ldr	r3, [pc, #8]	; (800e81c <_read+0xc>)
 800e812:	2258      	movs	r2, #88	; 0x58
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	f04f 30ff 	mov.w	r0, #4294967295
 800e81a:	4770      	bx	lr
 800e81c:	20000bc0 	.word	0x20000bc0

0800e820 <_sbrk>:
 800e820:	4b04      	ldr	r3, [pc, #16]	; (800e834 <_sbrk+0x14>)
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	4602      	mov	r2, r0
 800e826:	b909      	cbnz	r1, 800e82c <_sbrk+0xc>
 800e828:	4903      	ldr	r1, [pc, #12]	; (800e838 <_sbrk+0x18>)
 800e82a:	6019      	str	r1, [r3, #0]
 800e82c:	6818      	ldr	r0, [r3, #0]
 800e82e:	4402      	add	r2, r0
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	4770      	bx	lr
 800e834:	20000950 	.word	0x20000950
 800e838:	20000bc8 	.word	0x20000bc8

0800e83c <_write>:
 800e83c:	4b02      	ldr	r3, [pc, #8]	; (800e848 <_write+0xc>)
 800e83e:	2258      	movs	r2, #88	; 0x58
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	f04f 30ff 	mov.w	r0, #4294967295
 800e846:	4770      	bx	lr
 800e848:	20000bc0 	.word	0x20000bc0

0800e84c <_exit>:
 800e84c:	e7fe      	b.n	800e84c <_exit>
	...

0800e850 <_init>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	bf00      	nop
 800e854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e856:	bc08      	pop	{r3}
 800e858:	469e      	mov	lr, r3
 800e85a:	4770      	bx	lr

0800e85c <_fini>:
 800e85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85e:	bf00      	nop
 800e860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e862:	bc08      	pop	{r3}
 800e864:	469e      	mov	lr, r3
 800e866:	4770      	bx	lr
